<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2019-05-29T12:58:24.547+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="main"><xqdoc:uri>tx-xqdoc3.xq</xqdoc:uri><xqdoc:comment><xqdoc:description>Generate html for for XQuery sources</xqdoc:description><xqdoc:return>info about the run (json format)</xqdoc:return></xqdoc:comment><xqdoc:body>(:~
 : Generate html for for XQuery sources
 : @return info about the run (json format)
 :)

import module namespace xqd = 'quodatum:build.xqdoc' at "../../../lib/xqdoc/xqdoc-proj.xqm";
import module namespace xqhtml = 'quodatum:build.xqdoc-html' at "../../../lib/xqdoc/xqdoc-html.xqm";
import module namespace store = 'quodatum.store' at "../../../lib/store.xqm";



(:~ URL of the root folder to document
 : @default C:/Users/andy/git/vue-poc/src/vue-poc
 :)
declare variable $efolder as xs:anyURI  external := xs:anyURI("C:/Users/andy/git/vue-poc/src/vue-poc");

declare variable $id as element(last-id):=db:open("vue-poc","/state.xml")/state/last-id;
let $path:="static/xqdoc/" || "33" || "/"
let $root:=db:option("webpath")=&gt;file:path-to-uri()
let $target:=resolve-uri($path,$root)


let $state:=xqd:read($efolder)=&gt;trace("READ: ")
let $opts:=map{
               "src-folder": $efolder, 
               "project": $state?project, 
               "ext-id": $id/string(),
               "resources": "resources/"
               }

(: generate o/ps per source file  :)
let $modmap:=for $file at $pos in $state?files
               let $params:=map:merge((map{
                              "source":  $file?xqparse/string(),
                              "filename": $file?path,
                              "cache": $xqd:cache,
                              "show-private": true(),
                              "root": "../../",
                              "resources": "resources/"},
                              $opts))
               return (
                 map{
                   "document": $file?xqdoc,
                    "uri":  $file?href || "/xqdoc.xml", "opts":  $xqd:XML
                 },
                  map{
                   "document": $file?xqparse,
                    "uri":  $file?href || "xqparse.xml", "opts":  $xqd:XML
                 },
                  map{
                   "document": xqd:xqdoc-html($file?xqdoc,$params),
                   "uri":  $file?href || "index.html", "opts":  $xqd:HTML5
                 }
               )
               
 let $index:= map{ 
                   "document": xqhtml:index-html2($state,$opts),
                   "uri": ``[index.html]``, "opts":  $xqd:HTML5
                 }
                 
 let $restxq:= map{
                   "document": xqhtml:restxq($state, xqd:rxq-paths($state),$opts),
                     "uri": ``[restxq.html]``, "opts":  $xqd:HTML5
                 }
let $imports:=map{
                   "document": xqhtml:imports($state,xqd:imports($state),$opts),
                     "uri": ``[imports.html]``, "opts":  $xqd:HTML5
                 }
return (
       store:store(($index,$restxq,$imports,$modmap),$target),
       xqd:export-resources2($target),
       replace value of node $id with 1+$id,
       update:output(
         &lt;json type="object"&gt;
            &lt;extra&gt;XQdoc generated&lt;/extra&gt;
            &lt;msg&gt; {$target}, {count($state?files)} files processed.&lt;/msg&gt;
            &lt;id&gt;{$id/string()}&lt;/id&gt;
        &lt;/json&gt;
            )
       )

</xqdoc:body></xqdoc:module><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>quodatum:build.xqdoc</xqdoc:uri></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>quodatum:build.xqdoc-html</xqdoc:uri></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>quodatum.store</xqdoc:uri></xqdoc:import></xqdoc:imports><xqdoc:namespaces><xqdoc:namespace prefix="xqd" uri="quodatum:build.xqdoc"/><xqdoc:namespace prefix="xqhtml" uri="quodatum:build.xqdoc-html"/><xqdoc:namespace prefix="store" uri="quodatum.store"/><xqdoc:namespace prefix="local" uri="http://www.w3.org/2005/xquery-local-functions"/></xqdoc:namespaces><xqdoc:variables><xqdoc:variable><xqdoc:name>efolder</xqdoc:name><xqdoc:comment><xqdoc:description>URL of the root folder to document</xqdoc:description><xqdoc:custom tag="default">C:/Users/andy/git/vue-poc/src/vue-poc</xqdoc:custom></xqdoc:comment><xqdoc:type>xs:anyURI</xqdoc:type></xqdoc:variable><xqdoc:variable><xqdoc:name>id</xqdoc:name><xqdoc:type>element(last-id)</xqdoc:type></xqdoc:variable></xqdoc:variables><xqdoc:functions><xqdoc:function arity="0"><xqdoc:comment><xqdoc:description>pseudo main function</xqdoc:description></xqdoc:comment><xqdoc:name>local:xqDoc-main</xqdoc:name><xqdoc:signature>local:xqDoc-main()</xqdoc:signature><xqdoc:body>let $path:="static/xqdoc/" || "33" || "/"
let $root:=db:option("webpath")=&gt;file:path-to-uri()
let $target:=resolve-uri($path,$root)


let $state:=xqd:read($efolder)=&gt;trace("READ: ")
let $opts:=map{
               "src-folder": $efolder, 
               "project": $state?project, 
               "ext-id": $id/string(),
               "resources": "resources/"
               }

(: generate o/ps per source file  :)
let $modmap:=for $file at $pos in $state?files
               let $params:=map:merge((map{
                              "source":  $file?xqparse/string(),
                              "filename": $file?path,
                              "cache": $xqd:cache,
                              "show-private": true(),
                              "root": "../../",
                              "resources": "resources/"},
                              $opts))
               return (
                 map{
                   "document": $file?xqdoc,
                    "uri":  $file?href || "/xqdoc.xml", "opts":  $xqd:XML
                 },
                  map{
                   "document": $file?xqparse,
                    "uri":  $file?href || "xqparse.xml", "opts":  $xqd:XML
                 },
                  map{
                   "document": xqd:xqdoc-html($file?xqdoc,$params),
                   "uri":  $file?href || "index.html", "opts":  $xqd:HTML5
                 }
               )
               
 let $index:= map{ 
                   "document": xqhtml:index-html2($state,$opts),
                   "uri": ``[index.html]``, "opts":  $xqd:HTML5
                 }
                 
 let $restxq:= map{
                   "document": xqhtml:restxq($state, xqd:rxq-paths($state),$opts),
                     "uri": ``[restxq.html]``, "opts":  $xqd:HTML5
                 }
let $imports:=map{
                   "document": xqhtml:imports($state,xqd:imports($state),$opts),
                     "uri": ``[imports.html]``, "opts":  $xqd:HTML5
                 }
return (
       store:store(($index,$restxq,$imports,$modmap),$target),
       xqd:export-resources2($target),
       replace value of node $id with 1+$id,
       update:output(
         &lt;json type="object"&gt;
            &lt;extra&gt;XQdoc generated&lt;/extra&gt;
            &lt;msg&gt; {$target}, {count($state?files)} files processed.&lt;/msg&gt;
            &lt;id&gt;{$id/string()}&lt;/id&gt;
        &lt;/json&gt;
            )
       )</xqdoc:body><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/db</xqdoc:uri><xqdoc:name>option</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>resolve-uri</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>quodatum:build.xqdoc</xqdoc:uri><xqdoc:name>read</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>string</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions/map</xqdoc:uri><xqdoc:name>merge</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>string</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>true</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>quodatum:build.xqdoc</xqdoc:uri><xqdoc:name>xqdoc-html</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>quodatum:build.xqdoc-html</xqdoc:uri><xqdoc:name>index-html2</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="3"><xqdoc:uri>quodatum:build.xqdoc-html</xqdoc:uri><xqdoc:name>restxq</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>quodatum:build.xqdoc</xqdoc:uri><xqdoc:name>rxq-paths</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="3"><xqdoc:uri>quodatum:build.xqdoc-html</xqdoc:uri><xqdoc:name>imports</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>quodatum:build.xqdoc</xqdoc:uri><xqdoc:name>imports</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>quodatum.store</xqdoc:uri><xqdoc:name>store</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>quodatum:build.xqdoc</xqdoc:uri><xqdoc:name>export-resources2</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/update</xqdoc:uri><xqdoc:name>output</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>count</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>string</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="3"><xqdoc:uri>http://expath.org/ns/file</xqdoc:uri><xqdoc:name>path-to-uri</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="4"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>trace</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>path</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>root</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>efolder</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>efolder</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>state</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>id</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>state</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>file</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>file</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum:build.xqdoc</xqdoc:uri><xqdoc:name>cache</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>opts</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>file</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>file</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum:build.xqdoc</xqdoc:uri><xqdoc:name>XML</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>file</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>file</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum:build.xqdoc</xqdoc:uri><xqdoc:name>XML</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>file</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>params</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>file</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum:build.xqdoc</xqdoc:uri><xqdoc:name>HTML5</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>state</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>opts</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum:build.xqdoc</xqdoc:uri><xqdoc:name>HTML5</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>state</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>state</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>opts</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum:build.xqdoc</xqdoc:uri><xqdoc:name>HTML5</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>state</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>state</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>opts</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum:build.xqdoc</xqdoc:uri><xqdoc:name>HTML5</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>index</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>restxq</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>imports</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>modmap</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>target</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>target</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>id</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>id</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>target</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>state</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>id</xqdoc:name></xqdoc:ref-variable><xqdoc:body>let $path:="static/xqdoc/" || "33" || "/"
let $root:=db:option("webpath")=&gt;file:path-to-uri()
let $target:=resolve-uri($path,$root)


let $state:=xqd:read($efolder)=&gt;trace("READ: ")
let $opts:=map{
               "src-folder": $efolder, 
               "project": $state?project, 
               "ext-id": $id/string(),
               "resources": "resources/"
               }

(: generate o/ps per source file  :)
let $modmap:=for $file at $pos in $state?files
               let $params:=map:merge((map{
                              "source":  $file?xqparse/string(),
                              "filename": $file?path,
                              "cache": $xqd:cache,
                              "show-private": true(),
                              "root": "../../",
                              "resources": "resources/"},
                              $opts))
               return (
                 map{
                   "document": $file?xqdoc,
                    "uri":  $file?href || "/xqdoc.xml", "opts":  $xqd:XML
                 },
                  map{
                   "document": $file?xqparse,
                    "uri":  $file?href || "xqparse.xml", "opts":  $xqd:XML
                 },
                  map{
                   "document": xqd:xqdoc-html($file?xqdoc,$params),
                   "uri":  $file?href || "index.html", "opts":  $xqd:HTML5
                 }
               )
               
 let $index:= map{ 
                   "document": xqhtml:index-html2($state,$opts),
                   "uri": ``[index.html]``, "opts":  $xqd:HTML5
                 }
                 
 let $restxq:= map{
                   "document": xqhtml:restxq($state, xqd:rxq-paths($state),$opts),
                     "uri": ``[restxq.html]``, "opts":  $xqd:HTML5
                 }
let $imports:=map{
                   "document": xqhtml:imports($state,xqd:imports($state),$opts),
                     "uri": ``[imports.html]``, "opts":  $xqd:HTML5
                 }
return (
       store:store(($index,$restxq,$imports,$modmap),$target),
       xqd:export-resources2($target),
       replace value of node $id with 1+$id,
       update:output(
         &lt;json type="object"&gt;
            &lt;extra&gt;XQdoc generated&lt;/extra&gt;
            &lt;msg&gt; {$target}, {count($state?files)} files processed.&lt;/msg&gt;
            &lt;id&gt;{$id/string()}&lt;/id&gt;
        &lt;/json&gt;
            )
       )</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>