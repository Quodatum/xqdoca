<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2019-05-24T10:30:30.92+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>quodatum:vue.api.images</xqdoc:uri><xqdoc:name>images.xqm</xqdoc:name><xqdoc:comment><xqdoc:description>vue-poc thumbnail api.</xqdoc:description><xqdoc:author>Andy Bunce may-2017</xqdoc:author><xqdoc:custom tag="__source">features/images/images.xqm</xqdoc:custom></xqdoc:comment><xqdoc:body> (:~
 : vue-poc thumbnail api.
 :
 : @author Andy Bunce may-2017
 :)
module namespace vue-api = 'quodatum:vue.api.images';
import module namespace cfg = "quodatum:media.image.configure" at "config.xqm";
import module namespace fw="quodatum:file.walker";
import module namespace entity = 'quodatum.models.generated' at "../../models.gen.xqm";
declare namespace c="http://www.w3.org/ns/xproc-step";

declare variable $vue-api:entity:=$entity:list("thumbnail");
(:~
 : do a thumbnail
 :)
declare
%rest:GET %rest:path("/vue-poc/api/images/list/{$id}")
%rest:produces("application/json")
%output:method("json")   
function vue-api:id( $id as xs:integer)   
{
 let $image:=db:open-id($cfg:DB-IMAGE,$id)
 return &lt;json type="object" &gt;
    &lt;doc&gt;{ serialize($image) }&lt;/doc&gt;
     { vue-api:get-image($image) }
  &lt;/json&gt;
};

(:~
 : generate html report
 :)
declare
%rest:GET %rest:path("/vue-poc/api/images/report")
%rest:produces("application/json")
%output:method("json")
function vue-api:report()   
{
&lt;json type="object" &gt;
  &lt;imagedir&gt;{ $cfg:IMAGEDIR }&lt;/imagedir&gt;
  &lt;thumbdir&gt;{ $cfg:THUMBDIR }&lt;/thumbdir&gt;
  &lt;imagedb&gt;{ $cfg:DB-IMAGE }&lt;/imagedb&gt;
&lt;/json&gt;
};

(:~
 : get set of thumbnails matching search
 :)
declare
%rest:single
%rest:GET %rest:path("/vue-poc/api/images/list")
%rest:produces("application/json")
%rest:query-param("page", "{$page}",0)
%rest:query-param("from", "{$from}")
%rest:query-param("until", "{$until}")
%rest:query-param("keyword", "{$keyword}")
%output:method("json")   
function vue-api:list( $page as xs:integer,
$from,$until,
$keyword
)   
{
 let $rowsPerPage:=24
 let $images:=$vue-api:entity("data")()
 let $images:=$images[not(@original)]
 let $images:=if($from)then  $images[datetaken ge $from] else $images
 let $images:=if($until)then  $images[datetaken le $until] else $images
 let $images:=if($keyword)then  $images[keywords/keyword = $keyword] else $images
 let $total:=count($images)
 let $images:=subsequence($images,1+$rowsPerPage*$page,$rowsPerPage)
 
 return &lt;json   type="object" &gt;
            &lt;total type="number"&gt;{ $total }&lt;/total&gt;
            &lt;items type="array"&gt;{
            for $f in $images
            return &lt;_ type="object"&gt;
            {vue-api:get-image($f)} 
            &lt;/_&gt;
            }&lt;/items&gt;
  &lt;/json&gt;
};



(:~
 : keywords
 :)
declare
%rest:GET %rest:path("/vue-poc/api/images/keywords2")
%rest:produces("application/json")
%output:method("json")   
function vue-api:keywords2()   
{
let $keys:=db:open($cfg:DB-IMAGE,"keywords.xml")/keywords/keyword

return &lt;json   type="object" &gt;
            &lt;items type="array"&gt;{
            $keys!&lt;_ type="object"&gt;
               &lt;text&gt;{@name/string()}&lt;/text&gt;
               &lt;count&gt;{@count/string()}&lt;/count&gt;
               &lt;/_&gt;
            }&lt;/items&gt;
  &lt;/json&gt;
};

(:~
 : keywords
 :)
declare
%rest:GET %rest:path("/vue-poc/api/images/datetaken")
%rest:produces("application/json")
%output:method("json")   
function vue-api:datetaken()   
{
let $years:=db:open($cfg:DB-IMAGE,"datetaken.xml")/dates/year

return &lt;json   type="object" &gt;
            &lt;items type="array"&gt;{
            for $year in $years
            return &lt;_ type="object"&gt;
               &lt;year&gt;{$year/@value/string()}&lt;/year&gt;
               &lt;count type="number"&gt;{$year/@count/string()}&lt;/count&gt;
               &lt;months type="array"&gt;{
               for $m in 1 to 12
               let $c:= $year/month[@value=format-integer($m,"00")]/@count
               return &lt;_ type="number"&gt;{if($c)then string($c) else 0}&lt;/_&gt;
               }&lt;/months&gt;
               &lt;/_&gt;
            }&lt;/items&gt;
  &lt;/json&gt;
};

(:~ full size image :)
declare 
%rest:GET %rest:path("/vue-poc/api/images/list/{ $id }/image")
function vue-api:rawimage($id as xs:integer)
{
  let $image as element(image):=db:open-id($cfg:DB-IMAGE,$id)
  let $path:=$cfg:IMAGEDIR || '../' || $vue-api:entity?access?path($image)
  return (
    web:response-header(map { 'media-type': web:content-type($path) }),
    file:read-binary($path)
  )
};

(:~ thumb size image :)
declare 
%rest:GET %rest:path("/vue-poc/api/images/list/{ $id }/thumb")
function vue-api:rawthumb($id as xs:integer)
{
  let $image as element(image):=db:open-id($cfg:DB-IMAGE,$id)
 let $thumb:= $cfg:THUMBDIR || $vue-api:entity?access?path($image)
 let $thumb:=if(file:exists($thumb)) then $thumb else resolve-uri("missing.jpg")
  return (
    web:response-header(map { 'media-type': web:content-type($thumb) }),
    fetch:binary($thumb)
  )
};

(:~ image metadata :)
declare 
%rest:GET %rest:path("/vue-poc/api/images/list/{ $id }/meta")
function vue-api:meta($id as xs:integer)
{
  let $image as element(image):=db:open-id($cfg:DB-IMAGE,$id)
  let $path:=$cfg:DB-IMAGE || "/meta/"  || $vue-api:entity?access?path($image) || "/meta.xml"
  return doc($path)
};

(:~ fields for thumbnail for json :)
declare function vue-api:get-image($image as element(image))
as element(*)*
{
let $id:=$vue-api:entity?access?id($image)
let $path:=$vue-api:entity?access?path($image)
let $name:=$vue-api:entity?access?name($image)
let $geo:=$vue-api:entity?json?geo($image)
let $keywords:=$vue-api:entity?json?keywords($image)
let $thumb:= $cfg:THUMBDIR ||  $path
let $thumb:=if(file:exists($thumb)) then $thumb else resolve-uri("missing.jpg")
return   (
          &lt;id&gt;{$id}&lt;/id&gt;
         ,&lt;name&gt;{$name}&lt;/name&gt;
         ,&lt;path&gt;{$path}&lt;/path&gt;
         ,$geo,$keywords
         ,&lt;data&gt;{fetch:binary($thumb)}&lt;/data&gt;
         ,&lt;mime&gt;{fetch:content-type($thumb)}&lt;/mime&gt;
         ,&lt;selected type="boolean"&gt;false&lt;/selected&gt;
         )
};



</xqdoc:body></xqdoc:module><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>quodatum:media.image.configure</xqdoc:uri></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>quodatum:file.walker</xqdoc:uri></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>quodatum.models.generated</xqdoc:uri></xqdoc:import></xqdoc:imports><xqdoc:namespaces><xqdoc:namespace prefix="vue-api" uri="quodatum:vue.api.images"/><xqdoc:namespace prefix="cfg" uri="quodatum:media.image.configure"/><xqdoc:namespace prefix="fw" uri="quodatum:file.walker"/><xqdoc:namespace prefix="entity" uri="quodatum.models.generated"/><xqdoc:namespace prefix="c" uri="http://www.w3.org/ns/xproc-step"/><xqdoc:namespace prefix="rest" uri="http://exquery.org/ns/restxq"/><xqdoc:namespace prefix="output" uri="http://www.w3.org/2010/xslt-xquery-serialization"/></xqdoc:namespaces><xqdoc:variables><xqdoc:variable><xqdoc:name>vue-api:entity</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:variable></xqdoc:variables><xqdoc:functions><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>do a thumbnail</xqdoc:description></xqdoc:comment><xqdoc:name>vue-api:id</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:GET"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/vue-poc/api/images/list/{$id}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:produces"><xqdoc:literal type="xs:string">application/json</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="output:method"><xqdoc:literal type="xs:string">json</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>declare %rest:GET %rest:path("/vue-poc/api/images/list/{$id}") %rest:produces("application/json") %output:method("json") function vue-api:id($id as xs:integer) as item()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>id</xqdoc:name><xqdoc:type>xs:integer</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>http://basex.org/modules/db</xqdoc:uri><xqdoc:name>open-id</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>serialize</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>quodatum:vue.api.images</xqdoc:uri><xqdoc:name>get-image</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>quodatum:media.image.configure</xqdoc:uri><xqdoc:name>DB-IMAGE</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>id</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>image</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>image</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function vue-api:id( $id as xs:integer)   
{
 let $image:=db:open-id($cfg:DB-IMAGE,$id)
 return &lt;json type="object" &gt;
    &lt;doc&gt;{ serialize($image) }&lt;/doc&gt;
     { vue-api:get-image($image) }
  &lt;/json&gt;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="0"><xqdoc:comment><xqdoc:description>generate html report</xqdoc:description></xqdoc:comment><xqdoc:name>vue-api:report</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:GET"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/vue-poc/api/images/report</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:produces"><xqdoc:literal type="xs:string">application/json</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="output:method"><xqdoc:literal type="xs:string">json</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>declare %rest:GET %rest:path("/vue-poc/api/images/report") %rest:produces("application/json") %output:method("json") function vue-api:report() as item()*</xqdoc:signature><xqdoc:return><xqdoc:type>element()</xqdoc:type></xqdoc:return><xqdoc:ref-variable><xqdoc:uri>quodatum:media.image.configure</xqdoc:uri><xqdoc:name>IMAGEDIR</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum:media.image.configure</xqdoc:uri><xqdoc:name>THUMBDIR</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum:media.image.configure</xqdoc:uri><xqdoc:name>DB-IMAGE</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function vue-api:report()   
{
&lt;json type="object" &gt;
  &lt;imagedir&gt;{ $cfg:IMAGEDIR }&lt;/imagedir&gt;
  &lt;thumbdir&gt;{ $cfg:THUMBDIR }&lt;/thumbdir&gt;
  &lt;imagedb&gt;{ $cfg:DB-IMAGE }&lt;/imagedb&gt;
&lt;/json&gt;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="4"><xqdoc:comment><xqdoc:description>get set of thumbnails matching search</xqdoc:description></xqdoc:comment><xqdoc:name>vue-api:list</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:single"/><xqdoc:annotation name="rest:GET"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/vue-poc/api/images/list</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:produces"><xqdoc:literal type="xs:string">application/json</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">page</xqdoc:literal><xqdoc:literal type="xs:string">{$page}</xqdoc:literal><xqdoc:literal type="xs:integer">0</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">from</xqdoc:literal><xqdoc:literal type="xs:string">{$from}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">until</xqdoc:literal><xqdoc:literal type="xs:string">{$until}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">keyword</xqdoc:literal><xqdoc:literal type="xs:string">{$keyword}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="output:method"><xqdoc:literal type="xs:string">json</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>declare %rest:single %rest:GET %rest:path("/vue-poc/api/images/list") %rest:produces("application/json") %rest:query-param("page", "{$page}", 0) %rest:query-param("from", "{$from}") %rest:query-param("until", "{$until}") %rest:query-param("keyword", "{$keyword}") %output:method("json") function vue-api:list($page as xs:integer, $from as item()*, $until as item()*, $keyword as item()*) as item()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>page</xqdoc:name><xqdoc:type>xs:integer</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>from</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>until</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>keyword</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>not</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>count</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="3"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>subsequence</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>quodatum:vue.api.images</xqdoc:uri><xqdoc:name>get-image</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>quodatum:vue.api.images</xqdoc:uri><xqdoc:name>entity</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>images</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>from</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>images</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>from</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>images</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>until</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>images</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>until</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>images</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>keyword</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>images</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>keyword</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>images</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>images</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>images</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>rowsPerPage</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>page</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>rowsPerPage</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>total</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>images</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>f</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function vue-api:list( $page as xs:integer,
$from,$until,
$keyword
)   
{
 let $rowsPerPage:=24
 let $images:=$vue-api:entity("data")()
 let $images:=$images[not(@original)]
 let $images:=if($from)then  $images[datetaken ge $from] else $images
 let $images:=if($until)then  $images[datetaken le $until] else $images
 let $images:=if($keyword)then  $images[keywords/keyword = $keyword] else $images
 let $total:=count($images)
 let $images:=subsequence($images,1+$rowsPerPage*$page,$rowsPerPage)
 
 return &lt;json   type="object" &gt;
            &lt;total type="number"&gt;{ $total }&lt;/total&gt;
            &lt;items type="array"&gt;{
            for $f in $images
            return &lt;_ type="object"&gt;
            {vue-api:get-image($f)} 
            &lt;/_&gt;
            }&lt;/items&gt;
  &lt;/json&gt;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="0"><xqdoc:comment><xqdoc:description>keywords</xqdoc:description></xqdoc:comment><xqdoc:name>vue-api:keywords2</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:GET"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/vue-poc/api/images/keywords2</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:produces"><xqdoc:literal type="xs:string">application/json</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="output:method"><xqdoc:literal type="xs:string">json</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>declare %rest:GET %rest:path("/vue-poc/api/images/keywords2") %rest:produces("application/json") %output:method("json") function vue-api:keywords2() as item()*</xqdoc:signature><xqdoc:return><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>http://basex.org/modules/db</xqdoc:uri><xqdoc:name>open</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>string</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>string</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>quodatum:media.image.configure</xqdoc:uri><xqdoc:name>DB-IMAGE</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>keys</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function vue-api:keywords2()   
{
let $keys:=db:open($cfg:DB-IMAGE,"keywords.xml")/keywords/keyword

return &lt;json   type="object" &gt;
            &lt;items type="array"&gt;{
            $keys!&lt;_ type="object"&gt;
               &lt;text&gt;{@name/string()}&lt;/text&gt;
               &lt;count&gt;{@count/string()}&lt;/count&gt;
               &lt;/_&gt;
            }&lt;/items&gt;
  &lt;/json&gt;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="0"><xqdoc:comment><xqdoc:description>keywords</xqdoc:description></xqdoc:comment><xqdoc:name>vue-api:datetaken</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:GET"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/vue-poc/api/images/datetaken</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:produces"><xqdoc:literal type="xs:string">application/json</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="output:method"><xqdoc:literal type="xs:string">json</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>declare %rest:GET %rest:path("/vue-poc/api/images/datetaken") %rest:produces("application/json") %output:method("json") function vue-api:datetaken() as item()*</xqdoc:signature><xqdoc:return><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>http://basex.org/modules/db</xqdoc:uri><xqdoc:name>open</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>string</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>string</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>format-integer</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>string</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>quodatum:media.image.configure</xqdoc:uri><xqdoc:name>DB-IMAGE</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>years</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>year</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>year</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>year</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>m</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>c</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>c</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function vue-api:datetaken()   
{
let $years:=db:open($cfg:DB-IMAGE,"datetaken.xml")/dates/year

return &lt;json   type="object" &gt;
            &lt;items type="array"&gt;{
            for $year in $years
            return &lt;_ type="object"&gt;
               &lt;year&gt;{$year/@value/string()}&lt;/year&gt;
               &lt;count type="number"&gt;{$year/@count/string()}&lt;/count&gt;
               &lt;months type="array"&gt;{
               for $m in 1 to 12
               let $c:= $year/month[@value=format-integer($m,"00")]/@count
               return &lt;_ type="number"&gt;{if($c)then string($c) else 0}&lt;/_&gt;
               }&lt;/months&gt;
               &lt;/_&gt;
            }&lt;/items&gt;
  &lt;/json&gt;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>full size image</xqdoc:description></xqdoc:comment><xqdoc:name>vue-api:rawimage</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:GET"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/vue-poc/api/images/list/{ $id }/image</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>declare %rest:GET %rest:path("/vue-poc/api/images/list/{ $id }/image") function vue-api:rawimage($id as xs:integer) as item()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>id</xqdoc:name><xqdoc:type>xs:integer</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>http://basex.org/modules/db</xqdoc:uri><xqdoc:name>open-id</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/web</xqdoc:uri><xqdoc:name>response-header</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/web</xqdoc:uri><xqdoc:name>content-type</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://expath.org/ns/file</xqdoc:uri><xqdoc:name>read-binary</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>quodatum:media.image.configure</xqdoc:uri><xqdoc:name>DB-IMAGE</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>id</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum:media.image.configure</xqdoc:uri><xqdoc:name>IMAGEDIR</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum:vue.api.images</xqdoc:uri><xqdoc:name>entity</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>image</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>path</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>path</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function vue-api:rawimage($id as xs:integer)
{
  let $image as element(image):=db:open-id($cfg:DB-IMAGE,$id)
  let $path:=$cfg:IMAGEDIR || '../' || $vue-api:entity?access?path($image)
  return (
    web:response-header(map { 'media-type': web:content-type($path) }),
    file:read-binary($path)
  )
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>thumb size image</xqdoc:description></xqdoc:comment><xqdoc:name>vue-api:rawthumb</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:GET"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/vue-poc/api/images/list/{ $id }/thumb</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>declare %rest:GET %rest:path("/vue-poc/api/images/list/{ $id }/thumb") function vue-api:rawthumb($id as xs:integer) as item()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>id</xqdoc:name><xqdoc:type>xs:integer</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>http://basex.org/modules/db</xqdoc:uri><xqdoc:name>open-id</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://expath.org/ns/file</xqdoc:uri><xqdoc:name>exists</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>resolve-uri</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/web</xqdoc:uri><xqdoc:name>response-header</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/web</xqdoc:uri><xqdoc:name>content-type</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/fetch</xqdoc:uri><xqdoc:name>binary</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>quodatum:media.image.configure</xqdoc:uri><xqdoc:name>DB-IMAGE</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>id</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum:media.image.configure</xqdoc:uri><xqdoc:name>THUMBDIR</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum:vue.api.images</xqdoc:uri><xqdoc:name>entity</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>image</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>thumb</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>thumb</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>thumb</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>thumb</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function vue-api:rawthumb($id as xs:integer)
{
  let $image as element(image):=db:open-id($cfg:DB-IMAGE,$id)
 let $thumb:= $cfg:THUMBDIR || $vue-api:entity?access?path($image)
 let $thumb:=if(file:exists($thumb)) then $thumb else resolve-uri("missing.jpg")
  return (
    web:response-header(map { 'media-type': web:content-type($thumb) }),
    fetch:binary($thumb)
  )
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>image metadata</xqdoc:description></xqdoc:comment><xqdoc:name>vue-api:meta</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:GET"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/vue-poc/api/images/list/{ $id }/meta</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>declare %rest:GET %rest:path("/vue-poc/api/images/list/{ $id }/meta") function vue-api:meta($id as xs:integer) as item()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>id</xqdoc:name><xqdoc:type>xs:integer</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>http://basex.org/modules/db</xqdoc:uri><xqdoc:name>open-id</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>doc</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>quodatum:media.image.configure</xqdoc:uri><xqdoc:name>DB-IMAGE</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>id</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum:media.image.configure</xqdoc:uri><xqdoc:name>DB-IMAGE</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum:vue.api.images</xqdoc:uri><xqdoc:name>entity</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>image</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>path</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function vue-api:meta($id as xs:integer)
{
  let $image as element(image):=db:open-id($cfg:DB-IMAGE,$id)
  let $path:=$cfg:DB-IMAGE || "/meta/"  || $vue-api:entity?access?path($image) || "/meta.xml"
  return doc($path)
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>fields for thumbnail for json</xqdoc:description></xqdoc:comment><xqdoc:name>vue-api:get-image</xqdoc:name><xqdoc:signature>declare function vue-api:get-image($image as element(image)) as element()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>element(image)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">element()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://expath.org/ns/file</xqdoc:uri><xqdoc:name>exists</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>resolve-uri</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/fetch</xqdoc:uri><xqdoc:name>binary</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/fetch</xqdoc:uri><xqdoc:name>content-type</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>quodatum:vue.api.images</xqdoc:uri><xqdoc:name>entity</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>image</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum:vue.api.images</xqdoc:uri><xqdoc:name>entity</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>image</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum:vue.api.images</xqdoc:uri><xqdoc:name>entity</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>image</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum:vue.api.images</xqdoc:uri><xqdoc:name>entity</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>image</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum:vue.api.images</xqdoc:uri><xqdoc:name>entity</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>image</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum:media.image.configure</xqdoc:uri><xqdoc:name>THUMBDIR</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>path</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>thumb</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>thumb</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>id</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>name</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>path</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>geo</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>keywords</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>thumb</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>thumb</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function vue-api:get-image($image as element(image))
as element(*)*
{
let $id:=$vue-api:entity?access?id($image)
let $path:=$vue-api:entity?access?path($image)
let $name:=$vue-api:entity?access?name($image)
let $geo:=$vue-api:entity?json?geo($image)
let $keywords:=$vue-api:entity?json?keywords($image)
let $thumb:= $cfg:THUMBDIR ||  $path
let $thumb:=if(file:exists($thumb)) then $thumb else resolve-uri("missing.jpg")
return   (
          &lt;id&gt;{$id}&lt;/id&gt;
         ,&lt;name&gt;{$name}&lt;/name&gt;
         ,&lt;path&gt;{$path}&lt;/path&gt;
         ,$geo,$keywords
         ,&lt;data&gt;{fetch:binary($thumb)}&lt;/data&gt;
         ,&lt;mime&gt;{fetch:content-type($thumb)}&lt;/mime&gt;
         ,&lt;selected type="boolean"&gt;false&lt;/selected&gt;
         )
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>