<XQuery>(:~ 
: schema validation task
: @author andy bunce
: @since july 2018
:)


<MainModule><Prolog><ModuleImport><TOKEN>import</TOKEN> <TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>qv</NCName> <TOKEN>=</TOKEN> <StringLiteral>'quodatum.validate'</StringLiteral> <TOKEN>at</TOKEN> <StringLiteral>"../../lib/validate.xqm"</StringLiteral></ModuleImport><TOKEN>;</TOKEN>

(:~ URL of the doc to validate
 : @default C:/Users/andy/git/vue-poc/src/vue-poc/models/entities/adminlog.xml
  :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>doc</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:anyURI</QName></TypeDeclaration>  <TOKEN>external</TOKEN> <TOKEN>:=</TOKEN>
<CastExpr><StringLiteral>"C:/Users/andy/git/vue-poc/src/vue-poc/models/entities/adminlog.xml"</StringLiteral> <TOKEN>cast</TOKEN> <TOKEN>as</TOKEN> <QName>xs:anyURI</QName></CastExpr></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>


(:~ URL of the schema to use 
 : @default C:/Users/andy/git/vue-poc/src/vue-poc/models/schemas/entity.xsd
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>schema</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:anyURI</QName></TypeDeclaration> <TOKEN>external</TOKEN> <TOKEN>:=</TOKEN>
<CastExpr><StringLiteral>"C:/Users/andy/git/vue-poc/src/vue-poc/models/schemas/entity.xsd"</StringLiteral> <TOKEN>cast</TOKEN> <TOKEN>as</TOKEN> <QName>xs:anyURI</QName></CastExpr></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN></Prolog>
                                 
<FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>validators</QName><TOKEN>:=</TOKEN><FunctionCall><QName>qv:xsd</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>?</TOKEN><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>schema</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
<LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>report</QName><TOKEN>:=</TOKEN> <FunctionCall><QName>qv:validation</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>doc</QName></VarRef> <TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>validators</QName></VarRef><TOKEN>,</TOKEN><CompAttrConstructor><TOKEN>attribute</TOKEN> <QName>type</QName> <EnclosedExpr><TOKEN>{</TOKEN><StringLiteral>"xsd"</StringLiteral><TOKEN>}</TOKEN></EnclosedExpr></CompAttrConstructor><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
<ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>qv:json</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>report</QName></VarRef><TOKEN>,</TOKEN><MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN><TOKEN>}</TOKEN></MapConstructor><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr></MainModule>
<EOF/></XQuery>