<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2019-06-07T17:23:03.708+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>quodatum:vue.compile</xqdoc:uri><xqdoc:name>vue-compile.xqm</xqdoc:name><xqdoc:comment><xqdoc:description>compile vue files to js</xqdoc:description><xqdoc:custom tag="__source">lib/vue-compile/vue-compile.xqm</xqdoc:custom></xqdoc:comment><xqdoc:body>(:~
 : compile vue files to js
 :)
module namespace vue = 'quodatum:vue.compile';

import module namespace html5="text.html5" at "html5parse.xqm";
import module namespace fw="quodatum:file.walker";
declare namespace c="http://www.w3.org/ns/xproc-step";


declare namespace functx = "http://www.functx.com";

declare variable $vue:FEATURES:="features/";
declare variable $vue:COMPONENTS:="components/";
declare variable $vue:CORE:="components/core.js";
declare variable $vue:FILTERS:="components/filters.js";
declare variable $vue:DEST:="static/app-gen.js";

(:~ 
 : generate javascript vue call from vue files in source folder and core.js
 : @param $doc is a ch.digitalfondue.jfiveparse.Document
 : @param $url for vue file
 :)
declare function vue:feature($doc,$url as xs:string,$isComp as xs:boolean)
as xs:string
{
let $p:=vue:parse($doc)
let $script:= $p?script=&gt;substring-after("{")

return if(empty($p?id)) then 
           () 
       else 
        if($isComp) then
           ``[
// src: `{ $url }`
Vue.component('`{ $p?id }`',{template:` `{ $p?template }` `,
      `{$script}`
      );
      ]``
       else
         ``[
// src: `{ $url }`
const `{ vue:capitalize-first($p?id) }`=Vue.extend({template:` `{ $p?template }` `,
      `{ $script }`
      );
      ]``
};

(:~
 : parse a vue file to extract template and script
 : @return  map{"id":$id,"template":$template,"script":$script}
 :)
declare function vue:parse($doc)
as map(*)
{
  let $tempNode:= html5:getElementFirstByTagName($doc,"template")
  let $template:= html5:getInnerHTML($tempNode)
  let $id  := html5:getAttribute($tempNode,"id")=&gt;trace("ID")

  let $script:= html5:getElementFirstByTagName($doc,"script")
  let $script:= html5:getInnerHTML($script)
  return map{"id":$id,"template":$template,"script":$script}
};

declare function vue:capitalize-first
  ( $arg as xs:string? )  as xs:string? 
{
   concat(upper-case(substring($arg,1,1)), substring($arg,2))
};

(: filename of features:)
declare function vue:feature-files($proj)
as xs:string*
{
 let $FEATURES:="features/"=&gt;file:resolve-path($proj)
 let $files:=  fw:directory-list($FEATURES,map{"include-filter":".*\.vue"})
             //c:file/@name/resolve-uri(.,base-uri(.))
 return $files
};

declare function vue:feature-build($url as xs:string,$isComp as xs:boolean)
as xs:string
{
 fetch:text($url)=&gt;html5:doc()=&gt;vue:feature($url ,$isComp)
};

(:~
 : compile vue code to "static/app-gen.js"
 : @param $proj root folder e.g "C:/Users/andy/git/vue-poc/src/vue-poc/"
 :)
declare function vue:compile($proj as xs:string)
{
let $FEATURES:= file:resolve-path("features/",$proj=&gt;trace("proj:"))
let $COMPONENTS:= file:resolve-path("components/",$proj)
let $js:=vue:filelist(file:resolve-path("components/",$proj),".*\.js")
let $CORE:="core.js"=&gt;file:resolve-path($proj)
let $ROUTER:="router.js"=&gt;file:resolve-path($proj)
let $APP:="app.vue"=&gt;file:resolve-path($proj)

let $DEST:="static/app-gen.js"=&gt;file:resolve-path($proj)

let $files:=vue:feature-files($proj)
let $feats:=$files!vue:feature-build(.,false())

let $files:= fw:directory-list($COMPONENTS,map{"include-filter":".*\.vue"})
             //c:file/@name/resolve-uri(.,base-uri(.))
let $comps:=$files!vue:feature-build(.,true())

let $comment:="// generated " || current-dateTime() || "&amp;#xA;&amp;#xD;"
return file:write-text($DEST,string-join(($comment,
                                         $comps,
                                         $js!vue:js-test(.),
                                         $feats,
                                         vue:js-test($ROUTER),
                                         $APP!vue:feature-build(.,false()),
                                         vue:js-test($CORE))))
};

(:~
 : return sequence of file paths starting from $path matching $filter
 :)
 declare function vue:filelist($path as xs:string,$filter as xs:string)
 as xs:string*
 {
      fw:directory-list($path,map{"include-filter": $filter})
             //c:file/@name/resolve-uri(.,base-uri(.))
 };
(:~
 : javascript source with comment
 :)
declare function vue:js-test($url as xs:string)
{
 ``[
// src: `{ $url }`
`{ fetch:text($url) }`
]``
};</xqdoc:body></xqdoc:module><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>text.html5</xqdoc:uri></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>quodatum:file.walker</xqdoc:uri></xqdoc:import></xqdoc:imports><xqdoc:namespaces><xqdoc:namespace prefix="vue" uri="quodatum:vue.compile"/><xqdoc:namespace prefix="html5" uri="text.html5"/><xqdoc:namespace prefix="fw" uri="quodatum:file.walker"/><xqdoc:namespace prefix="c" uri="http://www.w3.org/ns/xproc-step"/><xqdoc:namespace prefix="functx" uri="http://www.functx.com"/></xqdoc:namespaces><xqdoc:variables><xqdoc:variable><xqdoc:name>vue:FEATURES</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:variable><xqdoc:variable><xqdoc:name>vue:COMPONENTS</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:variable><xqdoc:variable><xqdoc:name>vue:CORE</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:variable><xqdoc:variable><xqdoc:name>vue:FILTERS</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:variable><xqdoc:variable><xqdoc:name>vue:DEST</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:variable></xqdoc:variables><xqdoc:functions><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>generate javascript vue call from vue files in source folder and core.js</xqdoc:description><xqdoc:param>$doc is a ch.digitalfondue.jfiveparse.Document</xqdoc:param><xqdoc:param>$url for vue file</xqdoc:param></xqdoc:comment><xqdoc:name>vue:feature</xqdoc:name><xqdoc:signature>declare function vue:feature($doc as item()*, $url as xs:string, $isComp as xs:boolean) as xs:string</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>doc</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>url</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>isComp</xqdoc:name><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>quodatum:vue.compile</xqdoc:uri><xqdoc:name>parse</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>empty</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>quodatum:vue.compile</xqdoc:uri><xqdoc:name>capitalize-first</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="4"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>substring-after</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>doc</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>p</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>p</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>isComp</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>url</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>p</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>p</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>script</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>url</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>p</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>p</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>script</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function vue:feature($doc,$url as xs:string,$isComp as xs:boolean)
as xs:string
{
let $p:=vue:parse($doc)
let $script:= $p?script=&gt;substring-after("{")

return if(empty($p?id)) then 
           () 
       else 
        if($isComp) then
           ``[
// src: `{ $url }`
Vue.component('`{ $p?id }`',{template:` `{ $p?template }` `,
      `{$script}`
      );
      ]``
       else
         ``[
// src: `{ $url }`
const `{ vue:capitalize-first($p?id) }`=Vue.extend({template:` `{ $p?template }` `,
      `{ $script }`
      );
      ]``
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>parse a vue file to extract template and script</xqdoc:description><xqdoc:return>map{"id":$id,"template":$template,"script":$script}</xqdoc:return></xqdoc:comment><xqdoc:name>vue:parse</xqdoc:name><xqdoc:signature>declare function vue:parse($doc as item()*) as map(*)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>doc</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>map(*)</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>text.html5</xqdoc:uri><xqdoc:name>getElementFirstByTagName</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>text.html5</xqdoc:uri><xqdoc:name>getInnerHTML</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>text.html5</xqdoc:uri><xqdoc:name>getAttribute</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>text.html5</xqdoc:uri><xqdoc:name>getElementFirstByTagName</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>text.html5</xqdoc:uri><xqdoc:name>getInnerHTML</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="4"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>trace</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>doc</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>tempNode</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>tempNode</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>doc</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>script</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>id</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>template</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>script</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function vue:parse($doc)
as map(*)
{
  let $tempNode:= html5:getElementFirstByTagName($doc,"template")
  let $template:= html5:getInnerHTML($tempNode)
  let $id  := html5:getAttribute($tempNode,"id")=&gt;trace("ID")

  let $script:= html5:getElementFirstByTagName($doc,"script")
  let $script:= html5:getInnerHTML($script)
  return map{"id":$id,"template":$template,"script":$script}
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:name>vue:capitalize-first</xqdoc:name><xqdoc:signature>declare function vue:capitalize-first($arg as xs:string?) as xs:string?</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>arg</xqdoc:name><xqdoc:type occurrence="?">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="?">xs:string</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>concat</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>upper-case</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="3"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>substring</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>substring</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>arg</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>arg</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function vue:capitalize-first
  ( $arg as xs:string? )  as xs:string? 
{
   concat(upper-case(substring($arg,1,1)), substring($arg,2))
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:name>vue:feature-files</xqdoc:name><xqdoc:signature>declare function vue:feature-files($proj as item()*) as xs:string*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>proj</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>quodatum:file.walker</xqdoc:uri><xqdoc:name>directory-list</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>resolve-uri</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>base-uri</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="3"><xqdoc:uri>http://expath.org/ns/file</xqdoc:uri><xqdoc:name>resolve-path</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>proj</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>FEATURES</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>files</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function vue:feature-files($proj)
as xs:string*
{
 let $FEATURES:="features/"=&gt;file:resolve-path($proj)
 let $files:=  fw:directory-list($FEATURES,map{"include-filter":".*\.vue"})
             //c:file/@name/resolve-uri(.,base-uri(.))
 return $files
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>vue:feature-build</xqdoc:name><xqdoc:signature>declare function vue:feature-build($url as xs:string, $isComp as xs:boolean) as xs:string</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>url</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>isComp</xqdoc:name><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/fetch</xqdoc:uri><xqdoc:name>text</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="3"><xqdoc:uri>text.html5</xqdoc:uri><xqdoc:name>doc</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="4"><xqdoc:uri>quodatum:vue.compile</xqdoc:uri><xqdoc:name>feature</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>url</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>url</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>isComp</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function vue:feature-build($url as xs:string,$isComp as xs:boolean)
as xs:string
{
 fetch:text($url)=&gt;html5:doc()=&gt;vue:feature($url ,$isComp)
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>compile vue code to "static/app-gen.js"</xqdoc:description><xqdoc:param>$proj root folder e.g "C:/Users/andy/git/vue-poc/src/vue-poc/"</xqdoc:param></xqdoc:comment><xqdoc:name>vue:compile</xqdoc:name><xqdoc:signature>declare function vue:compile($proj as xs:string) as item()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>proj</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>http://expath.org/ns/file</xqdoc:uri><xqdoc:name>resolve-path</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://expath.org/ns/file</xqdoc:uri><xqdoc:name>resolve-path</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>quodatum:vue.compile</xqdoc:uri><xqdoc:name>filelist</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://expath.org/ns/file</xqdoc:uri><xqdoc:name>resolve-path</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>quodatum:vue.compile</xqdoc:uri><xqdoc:name>feature-files</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>quodatum:vue.compile</xqdoc:uri><xqdoc:name>feature-build</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>false</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>quodatum:file.walker</xqdoc:uri><xqdoc:name>directory-list</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>resolve-uri</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>base-uri</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>quodatum:vue.compile</xqdoc:uri><xqdoc:name>feature-build</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>true</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>current-dateTime</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://expath.org/ns/file</xqdoc:uri><xqdoc:name>write-text</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>string-join</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>quodatum:vue.compile</xqdoc:uri><xqdoc:name>js-test</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>quodatum:vue.compile</xqdoc:uri><xqdoc:name>js-test</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>quodatum:vue.compile</xqdoc:uri><xqdoc:name>feature-build</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>false</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>quodatum:vue.compile</xqdoc:uri><xqdoc:name>js-test</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="4"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>trace</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="3"><xqdoc:uri>http://expath.org/ns/file</xqdoc:uri><xqdoc:name>resolve-path</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="3"><xqdoc:uri>http://expath.org/ns/file</xqdoc:uri><xqdoc:name>resolve-path</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="3"><xqdoc:uri>http://expath.org/ns/file</xqdoc:uri><xqdoc:name>resolve-path</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="3"><xqdoc:uri>http://expath.org/ns/file</xqdoc:uri><xqdoc:name>resolve-path</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>proj</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>proj</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>proj</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>proj</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>proj</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>proj</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>proj</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>proj</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>files</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>COMPONENTS</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>files</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>DEST</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>$</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>comps</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>js</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>feats</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>ROUTER</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>APP</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>CORE</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function vue:compile($proj as xs:string)
{
let $FEATURES:= file:resolve-path("features/",$proj=&gt;trace("proj:"))
let $COMPONENTS:= file:resolve-path("components/",$proj)
let $js:=vue:filelist(file:resolve-path("components/",$proj),".*\.js")
let $CORE:="core.js"=&gt;file:resolve-path($proj)
let $ROUTER:="router.js"=&gt;file:resolve-path($proj)
let $APP:="app.vue"=&gt;file:resolve-path($proj)

let $DEST:="static/app-gen.js"=&gt;file:resolve-path($proj)

let $files:=vue:feature-files($proj)
let $feats:=$files!vue:feature-build(.,false())

let $files:= fw:directory-list($COMPONENTS,map{"include-filter":".*\.vue"})
             //c:file/@name/resolve-uri(.,base-uri(.))
let $comps:=$files!vue:feature-build(.,true())

let $comment:="// generated " || current-dateTime() || "&amp;#xA;&amp;#xD;"
return file:write-text($DEST,string-join(($comment,
                                         $comps,
                                         $js!vue:js-test(.),
                                         $feats,
                                         vue:js-test($ROUTER),
                                         $APP!vue:feature-build(.,false()),
                                         vue:js-test($CORE))))
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>return sequence of file paths starting from $path matching $filter</xqdoc:description></xqdoc:comment><xqdoc:name>vue:filelist</xqdoc:name><xqdoc:signature>declare function vue:filelist($path as xs:string, $filter as xs:string) as xs:string*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>path</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>filter</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>quodatum:file.walker</xqdoc:uri><xqdoc:name>directory-list</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>resolve-uri</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>base-uri</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>path</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>filter</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function vue:filelist($path as xs:string,$filter as xs:string)
 as xs:string*
 {
      fw:directory-list($path,map{"include-filter": $filter})
             //c:file/@name/resolve-uri(.,base-uri(.))
 }</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>javascript source with comment</xqdoc:description></xqdoc:comment><xqdoc:name>vue:js-test</xqdoc:name><xqdoc:signature>declare function vue:js-test($url as xs:string) as item()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>url</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/fetch</xqdoc:uri><xqdoc:name>text</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>url</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>url</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function vue:js-test($url as xs:string)
{
 ``[
// src: `{ $url }`
`{ fetch:text($url) }`
]``
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>