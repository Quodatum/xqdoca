<XQuery>(: entity access maps 
 : auto generated from xml files in entities folder at: 2019-02-23T22:59:34.827Z 
 :)

<LibraryModule><ModuleDecl><TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>entity</NCName> <TOKEN>=</TOKEN> <StringLiteral>'quodatum.models.generated'</StringLiteral><TOKEN>;</TOKEN></ModuleDecl>
<Prolog><ModuleImport><TOKEN>import</TOKEN> <TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>cfg</NCName> <TOKEN>=</TOKEN> <StringLiteral>"quodatum:media.image.configure"</StringLiteral> <TOKEN>at</TOKEN> <StringLiteral>"features/images/config.xqm"</StringLiteral></ModuleImport><TOKEN>;</TOKEN><NamespaceDecl><TOKEN>declare</TOKEN> <TOKEN>namespace</TOKEN> <NCName>xqdoc</NCName><TOKEN>=</TOKEN><StringLiteral>'http://www.xqdoc.org/1.0'</StringLiteral></NamespaceDecl><TOKEN>;</TOKEN>
<NamespaceDecl><TOKEN>declare</TOKEN> <TOKEN>namespace</TOKEN> <NCName>ent</NCName><TOKEN>=</TOKEN><StringLiteral>'https://github.com/Quodatum/app-doc/entity'</StringLiteral></NamespaceDecl><TOKEN>;</TOKEN>
<NamespaceDecl><TOKEN>declare</TOKEN> <TOKEN>namespace</TOKEN> <NCName>h</NCName><TOKEN>=</TOKEN><StringLiteral>'urn:quodatum:vue-poc.history'</StringLiteral></NamespaceDecl><TOKEN>;</TOKEN>
<NamespaceDecl><TOKEN>declare</TOKEN> <TOKEN>namespace</TOKEN> <NCName>c</NCName><TOKEN>=</TOKEN><StringLiteral>'http://www.w3.org/ns/xproc-step'</StringLiteral></NamespaceDecl><TOKEN>;</TOKEN>
          
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>entity:list</QName><TOKEN>:=</TOKEN><MapConstructor><TOKEN>map</TOKEN> <TOKEN>{</TOKEN> 
  <MapConstructorEntry><StringLiteral>"basexlog"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
     <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"basexlog"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"BaseX log entries "</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"access"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       <MapConstructorEntry><StringLiteral>"address"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>address</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"ms"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:integer</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>ms</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"text"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><TOKEN>.</TOKEN></RelativePathExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"time"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>concat</QName><ArgumentList><TOKEN>(</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>date</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>,</TOKEN><StringLiteral>'T'</StringLiteral><TOKEN>,</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>time</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"type"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>type</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"user"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>user</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
    
     <MapConstructorEntry><StringLiteral>"filter"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><TOKEN>item</TOKEN></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>q</QName></Param></ParamList><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:boolean</QName><EnclosedExpr><TOKEN>{</TOKEN> 
         <QuantifiedExpr><TOKEN>some</TOKEN> <QuantifiedVarDecl><TOKEN>$</TOKEN><QName>e</QName> <TOKEN>in</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN> <TOKEN>)</TOKEN></ParenthesizedExpr></QuantifiedVarDecl> <TOKEN>satisfies</TOKEN>
         <FunctionCall><QName>fn:contains</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>q</QName></VarRef><TOKEN>,</TOKEN> <StringLiteral>'http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive'</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></QuantifiedExpr>
      <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"json"</StringLiteral><TOKEN>:</TOKEN>   <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
           <MapConstructorEntry><StringLiteral>"address"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>address</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>address</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>address</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"ms"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>ms</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:integer :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>ms</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>ms</QName> <EnclosedExpr><TOKEN>{</TOKEN> <Expr><CompAttrConstructor><TOKEN>attribute</TOKEN> <QName>type</QName> <EnclosedExpr><TOKEN>{</TOKEN><StringLiteral>'number'</StringLiteral><TOKEN>}</TOKEN></EnclosedExpr></CompAttrConstructor><TOKEN>,</TOKEN> <TOKEN>.</TOKEN></Expr><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"text"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>text</TOKEN><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><TOKEN>.</TOKEN></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <TOKEN>text</TOKEN> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"time"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>time</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>concat</QName><ArgumentList><TOKEN>(</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>date</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>,</TOKEN><StringLiteral>'T'</StringLiteral><TOKEN>,</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>time</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>time</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"type"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>type</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>type</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>type</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"user"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>user</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>user</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>user</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
       
      <MapConstructorEntry><StringLiteral>"data"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>entry</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType>
       <EnclosedExpr><TOKEN>{</TOKEN> 
<FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>add-date</QName><TOKEN>:=</TOKEN><InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>logs</QName> <TypeDeclaration><TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType></TypeDeclaration></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>d</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN><EnclosedExpr><TOKEN>{</TOKEN>
    <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>logs</QName></VarRef><TOKEN>!</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN><TransformWithExpr><TOKEN>.</TOKEN> <TOKEN>transform</TOKEN> <TOKEN>with</TOKEN> <TOKEN>{</TOKEN> <InsertExpr><TOKEN>insert</TOKEN> <TOKEN>node</TOKEN> <CompAttrConstructor><TOKEN>attribute</TOKEN> <QName>date</QName> <EnclosedExpr><TOKEN>{</TOKEN><VarRef><TOKEN>$</TOKEN><QName>d</QName></VarRef><TOKEN>}</TOKEN></EnclosedExpr></CompAttrConstructor> <TOKEN>into</TOKEN> <TOKEN>.</TOKEN></InsertExpr><TOKEN>}</TOKEN></TransformWithExpr><TOKEN>)</TOKEN></ParenthesizedExpr></RelativePathExpr>
<TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></LetBinding></LetClause>

<ReturnClause><TOKEN>return</TOKEN> 
<RelativePathExpr><FunctionCall><QName>hof:top-k-by</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>admin:logs</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN> <NamedFunctionRef><QName>string</QName><TOKEN>#</TOKEN><IntegerLiteral>1</IntegerLiteral></NamedFunctionRef><TOKEN>,</TOKEN> <IntegerLiteral>2</IntegerLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall>  
<TOKEN>!</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN><ArrowExpr><FunctionCall><QName>reverse</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>admin:logs</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>,</TOKEN><FunctionCall><QName>true</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>=&gt;</TOKEN><VarRef><TOKEN>$</TOKEN><QName>add-date</QName></VarRef><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></ArrowExpr><TOKEN>)</TOKEN></ParenthesizedExpr></RelativePathExpr></ReturnClause></FLWORExpr>
	 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       
       <MapConstructorEntry><StringLiteral>"views"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       
       <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry>
   <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
  <MapConstructorEntry><StringLiteral>"basexjob"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
     <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"basexjob"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"A BaseX job"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"access"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       <MapConstructorEntry><StringLiteral>"duration"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>duration</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"id"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>id</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"interval"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>interval</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"reads"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>reads</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"registered"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>time</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"start"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><TOKEN>start</TOKEN></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"state"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>state</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"text"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><TOKEN>.</TOKEN></RelativePathExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"type"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>type</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"user"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>user</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"writes"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>writes</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
    
     <MapConstructorEntry><StringLiteral>"filter"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><TOKEN>item</TOKEN></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>q</QName></Param></ParamList><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:boolean</QName><EnclosedExpr><TOKEN>{</TOKEN> 
         <QuantifiedExpr><TOKEN>some</TOKEN> <QuantifiedVarDecl><TOKEN>$</TOKEN><QName>e</QName> <TOKEN>in</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN> <TOKEN>)</TOKEN></ParenthesizedExpr></QuantifiedVarDecl> <TOKEN>satisfies</TOKEN>
         <FunctionCall><QName>fn:contains</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>q</QName></VarRef><TOKEN>,</TOKEN> <StringLiteral>'http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive'</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></QuantifiedExpr>
      <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"json"</StringLiteral><TOKEN>:</TOKEN>   <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
           <MapConstructorEntry><StringLiteral>"duration"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>duration</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>duration</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>duration</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"id"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>id</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>id</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>id</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"interval"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>interval</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>interval</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>interval</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"reads"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>reads</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>reads</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>reads</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"registered"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>registered</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>time</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>registered</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"start"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>start</TOKEN><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><TOKEN>start</TOKEN></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <TOKEN>start</TOKEN> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"state"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>state</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>state</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>state</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"text"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>text</TOKEN><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><TOKEN>.</TOKEN></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <TOKEN>text</TOKEN> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"type"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>type</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>type</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>type</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"user"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>user</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>user</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>user</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"writes"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>writes</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>writes</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>writes</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
       
      <MapConstructorEntry><StringLiteral>"data"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>job</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType>
       <EnclosedExpr><TOKEN>{</TOKEN> <ArrowExpr><RelativePathExpr><PostfixExpr><FunctionCall><QName>jobs:list</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><Predicate><TOKEN>[</TOKEN><ComparisonExpr><TOKEN>.</TOKEN> <TOKEN>!=</TOKEN> <FunctionCall><QName>jobs:current</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ComparisonExpr><TOKEN>]</TOKEN></Predicate></PostfixExpr> <TOKEN>!</TOKEN><FunctionCall><QName>jobs:list-details</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>=&gt;</TOKEN><QName>reverse</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></ArrowExpr>
	 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       
       <MapConstructorEntry><StringLiteral>"views"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       <MapConstructorEntry><StringLiteral>'filter'</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>'name description'</StringLiteral></MapConstructorEntry>
       <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry>
   <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
  <MapConstructorEntry><StringLiteral>"entity.field"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
     <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"entity.field"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"About an entity field. "</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"access"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>ent:description</QName> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"parent"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><TOKEN>..</TOKEN><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><TOKEN>..</TOKEN><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"type"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>type</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"xpath"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>ent:xpath</QName> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
    
     <MapConstructorEntry><StringLiteral>"filter"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><TOKEN>item</TOKEN></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>q</QName></Param></ParamList><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:boolean</QName><EnclosedExpr><TOKEN>{</TOKEN> 
         <QuantifiedExpr><TOKEN>some</TOKEN> <QuantifiedVarDecl><TOKEN>$</TOKEN><QName>e</QName> <TOKEN>in</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN> <Expr><RelativePathExpr><VarRef><TOKEN>$</TOKEN><TOKEN>item</TOKEN></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>,</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><TOKEN>item</TOKEN></VarRef><TOKEN>/</TOKEN><AxisStep><QName>ent:description</QName><PredicateList/></AxisStep></RelativePathExpr></Expr><TOKEN>)</TOKEN></ParenthesizedExpr></QuantifiedVarDecl> <TOKEN>satisfies</TOKEN>
         <FunctionCall><QName>fn:contains</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>q</QName></VarRef><TOKEN>,</TOKEN> <StringLiteral>'http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive'</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></QuantifiedExpr>
      <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"json"</StringLiteral><TOKEN>:</TOKEN>   <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
           <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>description</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>ent:description</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>description</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>name</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>name</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"parent"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>parent</TOKEN><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><TOKEN>..</TOKEN><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><TOKEN>..</TOKEN><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <TOKEN>parent</TOKEN> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"type"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>type</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>type</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>type</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"xpath"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>xpath</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>ent:xpath</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>xpath</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
       
      <MapConstructorEntry><StringLiteral>"data"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>ent:field</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType>
       <EnclosedExpr><TOKEN>{</TOKEN> <RelativePathExpr><FunctionCall><QName>collection</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"doc-doc"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>/</TOKEN><AxisStep><QName>ent:entity</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>ent:fields</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>ent:field</QName> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       
       <MapConstructorEntry><StringLiteral>"views"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       <MapConstructorEntry><StringLiteral>'filter'</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>'name description'</StringLiteral></MapConstructorEntry>
       <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry>
   <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
  <MapConstructorEntry><StringLiteral>"entity"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
     <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"entity"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"About an entity i.e. something described in this framework
	"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"access"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       <MapConstructorEntry><StringLiteral>"code"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><QName>xs:string</QName><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>ent:data</QName> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>ent:description</QName> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"fieldslink"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>fn:concat</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"/data/entity/"</StringLiteral><TOKEN>,</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>,</TOKEN><StringLiteral>"/field"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"iconclass"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>ent:views</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>iconclass</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"modules"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><QName>xs:string</QName><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN><ArrowExpr><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>ent:module</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>concat</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"import module namespace "</StringLiteral><TOKEN>,</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>prefix</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>,</TOKEN><StringLiteral>"='"</StringLiteral><TOKEN>,</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><TOKEN>namespace</TOKEN></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>,</TOKEN><StringLiteral>"';
"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>=&gt;</TOKEN><QName>string-join</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></ArrowExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"namespaces"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><QName>xs:string</QName><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN><ArrowExpr><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>ent:namespace</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>concat</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"declare namespace "</StringLiteral><TOKEN>,</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>prefix</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>,</TOKEN><StringLiteral>"='"</StringLiteral><TOKEN>,</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>uri</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>,</TOKEN><StringLiteral>"';
"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>=&gt;</TOKEN><QName>string-join</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></ArrowExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"nfields"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:integer</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>fn:count</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><AxisStep><QName>ent:fields</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>ent:field</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"parent"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><QName>xs:string</QName><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>ent:parent</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"parentlink"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><QName>xs:string</QName><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>fn:concat</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"/data/entity/"</StringLiteral><TOKEN>,</TOKEN><RelativePathExpr><AxisStep><QName>ent:parent</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"type"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>ent:data</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>type</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
    
     <MapConstructorEntry><StringLiteral>"filter"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><TOKEN>item</TOKEN></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>q</QName></Param></ParamList><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:boolean</QName><EnclosedExpr><TOKEN>{</TOKEN> 
         <QuantifiedExpr><TOKEN>some</TOKEN> <QuantifiedVarDecl><TOKEN>$</TOKEN><QName>e</QName> <TOKEN>in</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN> <Expr><RelativePathExpr><VarRef><TOKEN>$</TOKEN><TOKEN>item</TOKEN></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>,</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><TOKEN>item</TOKEN></VarRef><TOKEN>/</TOKEN><AxisStep><QName>ent:description</QName><PredicateList/></AxisStep></RelativePathExpr></Expr><TOKEN>)</TOKEN></ParenthesizedExpr></QuantifiedVarDecl> <TOKEN>satisfies</TOKEN>
         <FunctionCall><QName>fn:contains</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>q</QName></VarRef><TOKEN>,</TOKEN> <StringLiteral>'http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive'</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></QuantifiedExpr>
      <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"json"</StringLiteral><TOKEN>:</TOKEN>   <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
           <MapConstructorEntry><StringLiteral>"code"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>code</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string? :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>ent:data</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>code</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>description</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>ent:description</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>description</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"fieldslink"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>fieldslink</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>fn:concat</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"/data/entity/"</StringLiteral><TOKEN>,</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>,</TOKEN><StringLiteral>"/field"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>fieldslink</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"iconclass"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>iconclass</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>ent:views</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>iconclass</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>iconclass</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"modules"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>modules</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string? :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><ArrowExpr><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>ent:module</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>concat</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"import module namespace "</StringLiteral><TOKEN>,</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>prefix</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>,</TOKEN><StringLiteral>"='"</StringLiteral><TOKEN>,</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><TOKEN>namespace</TOKEN></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>,</TOKEN><StringLiteral>"';
"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>=&gt;</TOKEN><QName>string-join</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></ArrowExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>modules</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>name</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>name</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"namespaces"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>namespaces</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string? :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><ArrowExpr><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>ent:namespace</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>concat</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"declare namespace "</StringLiteral><TOKEN>,</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>prefix</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>,</TOKEN><StringLiteral>"='"</StringLiteral><TOKEN>,</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>uri</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>,</TOKEN><StringLiteral>"';
"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>=&gt;</TOKEN><QName>string-join</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></ArrowExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>namespaces</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"nfields"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>nfields</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:integer :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>fn:count</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><AxisStep><QName>ent:fields</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>ent:field</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>nfields</QName> <EnclosedExpr><TOKEN>{</TOKEN> <Expr><CompAttrConstructor><TOKEN>attribute</TOKEN> <QName>type</QName> <EnclosedExpr><TOKEN>{</TOKEN><StringLiteral>'number'</StringLiteral><TOKEN>}</TOKEN></EnclosedExpr></CompAttrConstructor><TOKEN>,</TOKEN> <TOKEN>.</TOKEN></Expr><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"parent"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>parent</TOKEN><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string? :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>ent:parent</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <TOKEN>parent</TOKEN> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"parentlink"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>parentlink</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string? :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>fn:concat</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"/data/entity/"</StringLiteral><TOKEN>,</TOKEN><RelativePathExpr><AxisStep><QName>ent:parent</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>parentlink</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"type"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>type</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>ent:data</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>type</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>type</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
       
      <MapConstructorEntry><StringLiteral>"data"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>ent:entity</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType>
       <EnclosedExpr><TOKEN>{</TOKEN> <RelativePathExpr><FunctionCall><QName>collection</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"vue-poc"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>/</TOKEN><AxisStep><QName>ent:entity</QName> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       
       <MapConstructorEntry><StringLiteral>"views"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       <MapConstructorEntry><StringLiteral>'filter'</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>'name description'</StringLiteral></MapConstructorEntry>
       <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry>
   <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
  <MapConstructorEntry><StringLiteral>"filehistory"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
     <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"filehistory"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"vue-poc file view events "</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"access"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       <MapConstructorEntry><StringLiteral>"created"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>when</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"id"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>id</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"protocol"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>h:file</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>mode</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"url"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>h:file</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>url</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"user"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>user</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
    
     <MapConstructorEntry><StringLiteral>"filter"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><TOKEN>item</TOKEN></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>q</QName></Param></ParamList><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:boolean</QName><EnclosedExpr><TOKEN>{</TOKEN> 
         <QuantifiedExpr><TOKEN>some</TOKEN> <QuantifiedVarDecl><TOKEN>$</TOKEN><QName>e</QName> <TOKEN>in</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN> <TOKEN>)</TOKEN></ParenthesizedExpr></QuantifiedVarDecl> <TOKEN>satisfies</TOKEN>
         <FunctionCall><QName>fn:contains</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>q</QName></VarRef><TOKEN>,</TOKEN> <StringLiteral>'http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive'</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></QuantifiedExpr>
      <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"json"</StringLiteral><TOKEN>:</TOKEN>   <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
           <MapConstructorEntry><StringLiteral>"created"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>created</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>when</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>created</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"id"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>id</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>id</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>id</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"protocol"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>protocol</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>h:file</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>mode</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>protocol</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"url"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>url</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>h:file</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>url</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>url</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"user"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>user</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>user</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>user</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
       
      <MapConstructorEntry><StringLiteral>"data"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>h:event</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType>
       <EnclosedExpr><TOKEN>{</TOKEN> <RelativePathExpr><FunctionCall><QName>doc</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"vue-poc/history.xml"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>/</TOKEN><AxisStep><QName>h:history</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>h:event</QName><Predicate><TOKEN>[</TOKEN><AxisStep><QName>h:file</QName><PredicateList/></AxisStep><TOKEN>]</TOKEN></Predicate></AxisStep></RelativePathExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       
       <MapConstructorEntry><StringLiteral>"views"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       
       <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry>
   <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
  <MapConstructorEntry><StringLiteral>"jobrun"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
     <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"jobrun"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"About the running of a job"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"access"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       <MapConstructorEntry><StringLiteral>"created"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>json</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>dateTime</QName> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"id"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>id</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"job"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>json</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>job</QName> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"query"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>query</QName> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"result"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>substring</QName><ArgumentList><TOKEN>(</TOKEN><AxisStep><QName>result</QName><PredicateList/></AxisStep><TOKEN>,</TOKEN><IntegerLiteral>0</IntegerLiteral><TOKEN>,</TOKEN><IntegerLiteral>1000</IntegerLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"resultlength"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:integer</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>string-length</QName><ArgumentList><TOKEN>(</TOKEN><AxisStep><QName>result</QName><PredicateList/></AxisStep><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
    
     <MapConstructorEntry><StringLiteral>"filter"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><TOKEN>item</TOKEN></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>q</QName></Param></ParamList><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:boolean</QName><EnclosedExpr><TOKEN>{</TOKEN> 
         <QuantifiedExpr><TOKEN>some</TOKEN> <QuantifiedVarDecl><TOKEN>$</TOKEN><QName>e</QName> <TOKEN>in</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN> <TOKEN>)</TOKEN></ParenthesizedExpr></QuantifiedVarDecl> <TOKEN>satisfies</TOKEN>
         <FunctionCall><QName>fn:contains</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>q</QName></VarRef><TOKEN>,</TOKEN> <StringLiteral>'http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive'</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></QuantifiedExpr>
      <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"json"</StringLiteral><TOKEN>:</TOKEN>   <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
           <MapConstructorEntry><StringLiteral>"created"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>created</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>json</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>dateTime</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>created</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"id"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>id</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>id</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>id</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"job"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>job</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>json</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>job</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>job</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"query"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>query</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>query</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>query</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"result"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>result</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>substring</QName><ArgumentList><TOKEN>(</TOKEN><AxisStep><QName>result</QName><PredicateList/></AxisStep><TOKEN>,</TOKEN><IntegerLiteral>0</IntegerLiteral><TOKEN>,</TOKEN><IntegerLiteral>1000</IntegerLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>result</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"resultlength"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>resultlength</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:integer :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>string-length</QName><ArgumentList><TOKEN>(</TOKEN><AxisStep><QName>result</QName><PredicateList/></AxisStep><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>resultlength</QName> <EnclosedExpr><TOKEN>{</TOKEN> <Expr><CompAttrConstructor><TOKEN>attribute</TOKEN> <QName>type</QName> <EnclosedExpr><TOKEN>{</TOKEN><StringLiteral>'number'</StringLiteral><TOKEN>}</TOKEN></EnclosedExpr></CompAttrConstructor><TOKEN>,</TOKEN> <TOKEN>.</TOKEN></Expr><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
       
      <MapConstructorEntry><StringLiteral>"data"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>jobrun</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType>
       <EnclosedExpr><TOKEN>{</TOKEN> <RelativePathExpr><FunctionCall><QName>collection</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"vue-poc/jobrun"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>/</TOKEN><AxisStep><QName>jobrun</QName>
	 <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       
       <MapConstructorEntry><StringLiteral>"views"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       <MapConstructorEntry><StringLiteral>'filter'</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>'name description'</StringLiteral></MapConstructorEntry>
       <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry>
   <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
  <MapConstructorEntry><StringLiteral>"namespace"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
     <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"namespace"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"An XML namespace"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"access"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>description</QName> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"prefix"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>prefix</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"xmlns"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>uri</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
    
     <MapConstructorEntry><StringLiteral>"filter"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><TOKEN>item</TOKEN></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>q</QName></Param></ParamList><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:boolean</QName><EnclosedExpr><TOKEN>{</TOKEN> 
         <QuantifiedExpr><TOKEN>some</TOKEN> <QuantifiedVarDecl><TOKEN>$</TOKEN><QName>e</QName> <TOKEN>in</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN> <Expr><RelativePathExpr><VarRef><TOKEN>$</TOKEN><TOKEN>item</TOKEN></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>uri</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>,</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><TOKEN>item</TOKEN></VarRef><TOKEN>/</TOKEN><AxisStep><QName>description</QName><PredicateList/></AxisStep></RelativePathExpr></Expr><TOKEN>)</TOKEN></ParenthesizedExpr></QuantifiedVarDecl> <TOKEN>satisfies</TOKEN>
         <FunctionCall><QName>fn:contains</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>q</QName></VarRef><TOKEN>,</TOKEN> <StringLiteral>'http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive'</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></QuantifiedExpr>
      <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"json"</StringLiteral><TOKEN>:</TOKEN>   <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
           <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>description</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>description</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>description</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"prefix"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>prefix</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>prefix</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>prefix</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"xmlns"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>xmlns</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>uri</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>xmlns</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
       
      <MapConstructorEntry><StringLiteral>"data"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>namespace</TOKEN><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType>
       <EnclosedExpr><TOKEN>{</TOKEN> <RelativePathExpr><FunctionCall><QName>collection</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"vue-poc"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>/</TOKEN><AxisStep><QName>namespaces</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><TOKEN>namespace</TOKEN>
	 <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       
       <MapConstructorEntry><StringLiteral>"views"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       <MapConstructorEntry><StringLiteral>'filter'</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>'xmlns description'</StringLiteral></MapConstructorEntry>
       <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry>
   <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
  <MapConstructorEntry><StringLiteral>"query"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
     <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"query"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"An replx query"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"access"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       <MapConstructorEntry><StringLiteral>"created"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>created</QName> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"id"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>id</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"query"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>query</QName> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"result"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>substring</QName><ArgumentList><TOKEN>(</TOKEN><AxisStep><QName>result</QName><PredicateList/></AxisStep><TOKEN>,</TOKEN><IntegerLiteral>0</IntegerLiteral><TOKEN>,</TOKEN><IntegerLiteral>1000</IntegerLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"resultlength"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:integer</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>string-length</QName><ArgumentList><TOKEN>(</TOKEN><AxisStep><QName>result</QName><PredicateList/></AxisStep><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
    
     <MapConstructorEntry><StringLiteral>"filter"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><TOKEN>item</TOKEN></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>q</QName></Param></ParamList><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:boolean</QName><EnclosedExpr><TOKEN>{</TOKEN> 
         <QuantifiedExpr><TOKEN>some</TOKEN> <QuantifiedVarDecl><TOKEN>$</TOKEN><QName>e</QName> <TOKEN>in</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN> <TOKEN>)</TOKEN></ParenthesizedExpr></QuantifiedVarDecl> <TOKEN>satisfies</TOKEN>
         <FunctionCall><QName>fn:contains</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>q</QName></VarRef><TOKEN>,</TOKEN> <StringLiteral>'http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive'</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></QuantifiedExpr>
      <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"json"</StringLiteral><TOKEN>:</TOKEN>   <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
           <MapConstructorEntry><StringLiteral>"created"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>created</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>created</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>created</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"id"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>id</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>id</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>id</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"query"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>query</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>query</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>query</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"result"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>result</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>substring</QName><ArgumentList><TOKEN>(</TOKEN><AxisStep><QName>result</QName><PredicateList/></AxisStep><TOKEN>,</TOKEN><IntegerLiteral>0</IntegerLiteral><TOKEN>,</TOKEN><IntegerLiteral>1000</IntegerLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>result</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"resultlength"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>resultlength</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:integer :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>string-length</QName><ArgumentList><TOKEN>(</TOKEN><AxisStep><QName>result</QName><PredicateList/></AxisStep><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>resultlength</QName> <EnclosedExpr><TOKEN>{</TOKEN> <Expr><CompAttrConstructor><TOKEN>attribute</TOKEN> <QName>type</QName> <EnclosedExpr><TOKEN>{</TOKEN><StringLiteral>'number'</StringLiteral><TOKEN>}</TOKEN></EnclosedExpr></CompAttrConstructor><TOKEN>,</TOKEN> <TOKEN>.</TOKEN></Expr><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
       
      <MapConstructorEntry><StringLiteral>"data"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>query</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType>
       <EnclosedExpr><TOKEN>{</TOKEN> <RelativePathExpr><FunctionCall><QName>collection</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"replx/queries"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>/</TOKEN><AxisStep><QName>query</QName>
	 <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       
       <MapConstructorEntry><StringLiteral>"views"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       <MapConstructorEntry><StringLiteral>'filter'</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>'name description'</StringLiteral></MapConstructorEntry>
       <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry>
   <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
  <MapConstructorEntry><StringLiteral>"repo"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
     <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"repo"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"An entry in the basex repository"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"access"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"type"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>type</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"version"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>version</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
    
     <MapConstructorEntry><StringLiteral>"filter"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><TOKEN>item</TOKEN></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>q</QName></Param></ParamList><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:boolean</QName><EnclosedExpr><TOKEN>{</TOKEN> 
         <QuantifiedExpr><TOKEN>some</TOKEN> <QuantifiedVarDecl><TOKEN>$</TOKEN><QName>e</QName> <TOKEN>in</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN> <TOKEN>)</TOKEN></ParenthesizedExpr></QuantifiedVarDecl> <TOKEN>satisfies</TOKEN>
         <FunctionCall><QName>fn:contains</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>q</QName></VarRef><TOKEN>,</TOKEN> <StringLiteral>'http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive'</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></QuantifiedExpr>
      <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"json"</StringLiteral><TOKEN>:</TOKEN>   <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
           <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>name</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>name</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"type"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>type</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>type</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>type</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"version"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>version</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>version</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>version</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
       
      <MapConstructorEntry><StringLiteral>"data"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>package</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType>
       <EnclosedExpr><TOKEN>{</TOKEN> <FunctionCall><QName>repo:list</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       
       <MapConstructorEntry><StringLiteral>"views"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       
       <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry>
   <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
  <MapConstructorEntry><StringLiteral>"search-result"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
     <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"search-result"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"About a search result."</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"access"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       <MapConstructorEntry><StringLiteral>"sref"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><StringLiteral>"app.item.index({'name':'benchx'})"</StringLiteral></RelativePathExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"title"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>title</QName> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"type"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>type</QName> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"uri"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>uri</QName> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
    
     <MapConstructorEntry><StringLiteral>"filter"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><TOKEN>item</TOKEN></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>q</QName></Param></ParamList><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:boolean</QName><EnclosedExpr><TOKEN>{</TOKEN> 
         <QuantifiedExpr><TOKEN>some</TOKEN> <QuantifiedVarDecl><TOKEN>$</TOKEN><QName>e</QName> <TOKEN>in</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN> <TOKEN>)</TOKEN></ParenthesizedExpr></QuantifiedVarDecl> <TOKEN>satisfies</TOKEN>
         <FunctionCall><QName>fn:contains</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>q</QName></VarRef><TOKEN>,</TOKEN> <StringLiteral>'http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive'</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></QuantifiedExpr>
      <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"json"</StringLiteral><TOKEN>:</TOKEN>   <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
           <MapConstructorEntry><StringLiteral>"sref"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>sref</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><StringLiteral>"app.item.index({'name':'benchx'})"</StringLiteral></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>sref</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"title"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>title</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>title</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>title</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"type"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>type</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>type</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>type</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"uri"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>uri</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>uri</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>uri</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
       
      <MapConstructorEntry><StringLiteral>"data"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>search</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType>
       <EnclosedExpr><TOKEN>{</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ParenthesizedExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       
       <MapConstructorEntry><StringLiteral>"views"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       
       <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry>
   <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
  <MapConstructorEntry><StringLiteral>"service"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
     <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"service"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"basex services "</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"access"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       <MapConstructorEntry><StringLiteral>"base-uri"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>base-uri</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"id"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>id</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"interval"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>interval</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"query"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><TOKEN>.</TOKEN></RelativePathExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"running"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:boolean</QName> <EnclosedExpr><TOKEN>{</TOKEN><ComparisonExpr><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>jobs:list</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>=</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>id</QName></AbbrevForwardStep> <PredicateList/></AxisStep></ComparisonExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
    
     <MapConstructorEntry><StringLiteral>"filter"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><TOKEN>item</TOKEN></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>q</QName></Param></ParamList><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:boolean</QName><EnclosedExpr><TOKEN>{</TOKEN> 
         <QuantifiedExpr><TOKEN>some</TOKEN> <QuantifiedVarDecl><TOKEN>$</TOKEN><QName>e</QName> <TOKEN>in</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN> <TOKEN>)</TOKEN></ParenthesizedExpr></QuantifiedVarDecl> <TOKEN>satisfies</TOKEN>
         <FunctionCall><QName>fn:contains</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>q</QName></VarRef><TOKEN>,</TOKEN> <StringLiteral>'http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive'</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></QuantifiedExpr>
      <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"json"</StringLiteral><TOKEN>:</TOKEN>   <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
           <MapConstructorEntry><StringLiteral>"base-uri"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>base-uri</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>base-uri</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>base-uri</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"id"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>id</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>id</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>id</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"interval"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>interval</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>interval</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>interval</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"query"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>query</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><TOKEN>.</TOKEN></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>query</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"running"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>running</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:boolean :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><ComparisonExpr><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>jobs:list</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>=</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>id</QName></AbbrevForwardStep><PredicateList/></AxisStep></ComparisonExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>running</QName> <EnclosedExpr><TOKEN>{</TOKEN> <Expr><CompAttrConstructor><TOKEN>attribute</TOKEN> <QName>type</QName> <EnclosedExpr><TOKEN>{</TOKEN><StringLiteral>'boolean'</StringLiteral><TOKEN>}</TOKEN></EnclosedExpr></CompAttrConstructor><TOKEN>,</TOKEN> <TOKEN>.</TOKEN></Expr><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
       
      <MapConstructorEntry><StringLiteral>"data"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>job</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType>
       <EnclosedExpr><TOKEN>{</TOKEN> <FunctionCall><QName>jobs:services</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       
       <MapConstructorEntry><StringLiteral>"views"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       
       <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry>
   <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
  <MapConstructorEntry><StringLiteral>"task"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
     <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"task"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"predefined queries with parameters "</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"access"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>fn:serialize</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><AxisStep><QName>description</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AnyKindTest><TOKEN>node</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></AnyKindTest><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"title"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>title</QName> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"to"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"url"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>url</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
    
     <MapConstructorEntry><StringLiteral>"filter"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><TOKEN>item</TOKEN></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>q</QName></Param></ParamList><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:boolean</QName><EnclosedExpr><TOKEN>{</TOKEN> 
         <QuantifiedExpr><TOKEN>some</TOKEN> <QuantifiedVarDecl><TOKEN>$</TOKEN><QName>e</QName> <TOKEN>in</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN> <TOKEN>)</TOKEN></ParenthesizedExpr></QuantifiedVarDecl> <TOKEN>satisfies</TOKEN>
         <FunctionCall><QName>fn:contains</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>q</QName></VarRef><TOKEN>,</TOKEN> <StringLiteral>'http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive'</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></QuantifiedExpr>
      <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"json"</StringLiteral><TOKEN>:</TOKEN>   <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
           <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>description</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>fn:serialize</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><AxisStep><QName>description</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AnyKindTest><TOKEN>node</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></AnyKindTest><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>description</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"title"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>title</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>title</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>title</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"to"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>to</TOKEN><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <TOKEN>to</TOKEN> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"url"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>url</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>url</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>url</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
       
      <MapConstructorEntry><StringLiteral>"data"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>task</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType>
       <EnclosedExpr><TOKEN>{</TOKEN> <RelativePathExpr><FunctionCall><QName>doc</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"tasks/taskdef.xml"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>/</TOKEN><AxisStep><QName>tasks</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>task</QName> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       
       <MapConstructorEntry><StringLiteral>"views"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       
       <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry>
   <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
  <MapConstructorEntry><StringLiteral>"taskhistory"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
     <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"taskhistory"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"vue-poc task view events "</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"access"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       <MapConstructorEntry><StringLiteral>"created"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>when</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"id"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>id</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"protocol"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>h:file</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>mode</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"url"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>h:file</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>url</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"user"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>user</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
    
     <MapConstructorEntry><StringLiteral>"filter"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><TOKEN>item</TOKEN></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>q</QName></Param></ParamList><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:boolean</QName><EnclosedExpr><TOKEN>{</TOKEN> 
         <QuantifiedExpr><TOKEN>some</TOKEN> <QuantifiedVarDecl><TOKEN>$</TOKEN><QName>e</QName> <TOKEN>in</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN> <TOKEN>)</TOKEN></ParenthesizedExpr></QuantifiedVarDecl> <TOKEN>satisfies</TOKEN>
         <FunctionCall><QName>fn:contains</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>q</QName></VarRef><TOKEN>,</TOKEN> <StringLiteral>'http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive'</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></QuantifiedExpr>
      <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"json"</StringLiteral><TOKEN>:</TOKEN>   <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
           <MapConstructorEntry><StringLiteral>"created"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>created</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>when</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>created</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"id"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>id</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>id</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>id</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"protocol"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>protocol</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>h:file</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>mode</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>protocol</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"url"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>url</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>h:file</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>url</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>url</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"user"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>user</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>user</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>user</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
       
      <MapConstructorEntry><StringLiteral>"data"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>h:event</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType>
       <EnclosedExpr><TOKEN>{</TOKEN> <RelativePathExpr><FunctionCall><QName>doc</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"vue-poc/history.xml"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>/</TOKEN><AxisStep><QName>h:history</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>h:event</QName><Predicate><TOKEN>[</TOKEN><AxisStep><QName>task</QName><PredicateList/></AxisStep><TOKEN>]</TOKEN></Predicate></AxisStep></RelativePathExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       
       <MapConstructorEntry><StringLiteral>"views"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       
       <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry>
   <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
  <MapConstructorEntry><StringLiteral>"thumbnail"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
     <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"thumbnail"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"an image."</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"access"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       <MapConstructorEntry><StringLiteral>"geo"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:boolean</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>boolean</QName><ArgumentList><TOKEN>(</TOKEN><AxisStep><QName>geo</QName><PredicateList/></AxisStep><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"height"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:integer</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>height</QName> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"id"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:integer</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>db:node-id</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"keywords"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:integer</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><TOKEN>count</TOKEN><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><AxisStep><QName>keywords</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>keyword</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>file</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"path"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>file</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>path</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"size"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:integer</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><IntegerLiteral>0</IntegerLiteral></RelativePathExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"width"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:integer</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>width</QName> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
    
     <MapConstructorEntry><StringLiteral>"filter"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><TOKEN>item</TOKEN></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>q</QName></Param></ParamList><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:boolean</QName><EnclosedExpr><TOKEN>{</TOKEN> 
         <QuantifiedExpr><TOKEN>some</TOKEN> <QuantifiedVarDecl><TOKEN>$</TOKEN><QName>e</QName> <TOKEN>in</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><TOKEN>item</TOKEN></VarRef><TOKEN>/</TOKEN><AxisStep><QName>file</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ParenthesizedExpr></QuantifiedVarDecl> <TOKEN>satisfies</TOKEN>
         <FunctionCall><QName>fn:contains</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>q</QName></VarRef><TOKEN>,</TOKEN> <StringLiteral>'http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive'</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></QuantifiedExpr>
      <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"json"</StringLiteral><TOKEN>:</TOKEN>   <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
           <MapConstructorEntry><StringLiteral>"geo"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>geo</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:boolean :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>boolean</QName><ArgumentList><TOKEN>(</TOKEN><AxisStep><QName>geo</QName><PredicateList/></AxisStep><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>geo</QName> <EnclosedExpr><TOKEN>{</TOKEN> <Expr><CompAttrConstructor><TOKEN>attribute</TOKEN> <QName>type</QName> <EnclosedExpr><TOKEN>{</TOKEN><StringLiteral>'boolean'</StringLiteral><TOKEN>}</TOKEN></EnclosedExpr></CompAttrConstructor><TOKEN>,</TOKEN> <TOKEN>.</TOKEN></Expr><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"height"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>height</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:integer :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>height</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>height</QName> <EnclosedExpr><TOKEN>{</TOKEN> <Expr><CompAttrConstructor><TOKEN>attribute</TOKEN> <QName>type</QName> <EnclosedExpr><TOKEN>{</TOKEN><StringLiteral>'number'</StringLiteral><TOKEN>}</TOKEN></EnclosedExpr></CompAttrConstructor><TOKEN>,</TOKEN> <TOKEN>.</TOKEN></Expr><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"id"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>id</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:integer :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>db:node-id</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>id</QName> <EnclosedExpr><TOKEN>{</TOKEN> <Expr><CompAttrConstructor><TOKEN>attribute</TOKEN> <QName>type</QName> <EnclosedExpr><TOKEN>{</TOKEN><StringLiteral>'number'</StringLiteral><TOKEN>}</TOKEN></EnclosedExpr></CompAttrConstructor><TOKEN>,</TOKEN> <TOKEN>.</TOKEN></Expr><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"keywords"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>keywords</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:integer :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><TOKEN>count</TOKEN><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><AxisStep><QName>keywords</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>keyword</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>keywords</QName> <EnclosedExpr><TOKEN>{</TOKEN> <Expr><CompAttrConstructor><TOKEN>attribute</TOKEN> <QName>type</QName> <EnclosedExpr><TOKEN>{</TOKEN><StringLiteral>'number'</StringLiteral><TOKEN>}</TOKEN></EnclosedExpr></CompAttrConstructor><TOKEN>,</TOKEN> <TOKEN>.</TOKEN></Expr><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>name</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>file</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>name</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"path"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>path</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>file</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>path</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>path</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"size"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>size</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:integer :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><IntegerLiteral>0</IntegerLiteral></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>size</QName> <EnclosedExpr><TOKEN>{</TOKEN> <Expr><CompAttrConstructor><TOKEN>attribute</TOKEN> <QName>type</QName> <EnclosedExpr><TOKEN>{</TOKEN><StringLiteral>'number'</StringLiteral><TOKEN>}</TOKEN></EnclosedExpr></CompAttrConstructor><TOKEN>,</TOKEN> <TOKEN>.</TOKEN></Expr><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"width"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>width</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:integer :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>width</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>width</QName> <EnclosedExpr><TOKEN>{</TOKEN> <Expr><CompAttrConstructor><TOKEN>attribute</TOKEN> <QName>type</QName> <EnclosedExpr><TOKEN>{</TOKEN><StringLiteral>'number'</StringLiteral><TOKEN>}</TOKEN></EnclosedExpr></CompAttrConstructor><TOKEN>,</TOKEN> <TOKEN>.</TOKEN></Expr><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
       
      <MapConstructorEntry><StringLiteral>"data"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>image</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType>
       <EnclosedExpr><TOKEN>{</TOKEN> <RelativePathExpr><FunctionCall><QName>collection</QName><ArgumentList><TOKEN>(</TOKEN><StringConcatExpr><VarRef><TOKEN>$</TOKEN><QName>cfg:DB-IMAGE</QName></VarRef> <TOKEN>||</TOKEN> <StringLiteral>"/image"</StringLiteral></StringConcatExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>/</TOKEN><AxisStep><QName>image</QName> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       
       <MapConstructorEntry><StringLiteral>"views"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       <MapConstructorEntry><StringLiteral>'filter'</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>'name'</StringLiteral></MapConstructorEntry>
       <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry>
   <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
  <MapConstructorEntry><StringLiteral>"user"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
     <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"user"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"A BaseX user "</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"access"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"permission"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>permission</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
    
     <MapConstructorEntry><StringLiteral>"filter"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><TOKEN>item</TOKEN></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>q</QName></Param></ParamList><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:boolean</QName><EnclosedExpr><TOKEN>{</TOKEN> 
         <QuantifiedExpr><TOKEN>some</TOKEN> <QuantifiedVarDecl><TOKEN>$</TOKEN><QName>e</QName> <TOKEN>in</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN> <TOKEN>)</TOKEN></ParenthesizedExpr></QuantifiedVarDecl> <TOKEN>satisfies</TOKEN>
         <FunctionCall><QName>fn:contains</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>q</QName></VarRef><TOKEN>,</TOKEN> <StringLiteral>'http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive'</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></QuantifiedExpr>
      <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"json"</StringLiteral><TOKEN>:</TOKEN>   <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
           <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>name</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>name</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"permission"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>permission</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>permission</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>permission</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
       
      <MapConstructorEntry><StringLiteral>"data"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>user</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType>
       <EnclosedExpr><TOKEN>{</TOKEN> <FunctionCall><QName>user:list-details</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       
       <MapConstructorEntry><StringLiteral>"views"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       
       <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry>
   <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
  <MapConstructorEntry><StringLiteral>"xqdoc"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
     <MapConstructorEntry><StringLiteral>"name"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"xqdoc"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"XQuery documentation set "</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
     <MapConstructorEntry><StringLiteral>"access"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       <MapConstructorEntry><StringLiteral>"id"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>id</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"root"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><StringLiteral>"file:///C:/tmp/xqdoc/"</StringLiteral></RelativePathExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"time"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:string</QName> <EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>time</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
    
     <MapConstructorEntry><StringLiteral>"filter"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><TOKEN>item</TOKEN></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>q</QName></Param></ParamList><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <QName>xs:boolean</QName><EnclosedExpr><TOKEN>{</TOKEN> 
         <QuantifiedExpr><TOKEN>some</TOKEN> <QuantifiedVarDecl><TOKEN>$</TOKEN><QName>e</QName> <TOKEN>in</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN> <TOKEN>)</TOKEN></ParenthesizedExpr></QuantifiedVarDecl> <TOKEN>satisfies</TOKEN>
         <FunctionCall><QName>fn:contains</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>q</QName></VarRef><TOKEN>,</TOKEN> <StringLiteral>'http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive'</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></QuantifiedExpr>
      <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       <MapConstructorEntry><StringLiteral>"json"</StringLiteral><TOKEN>:</TOKEN>   <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
           <MapConstructorEntry><StringLiteral>"id"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>id</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>id</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>id</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"root"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>root</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><StringLiteral>"file:///C:/tmp/xqdoc/"</StringLiteral></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>root</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
           <MapConstructorEntry><StringLiteral>"time"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>_</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>time</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
            (: xs:string :)
                        <RelativePathExpr><FunctionCall><QName>fn:data</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>_</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>time</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><CompElemConstructor><TOKEN>element</TOKEN> <QName>time</QName> <EnclosedExpr><TOKEN>{</TOKEN>  <TOKEN>.</TOKEN><TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr> 
                 <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
       
      <MapConstructorEntry><StringLiteral>"data"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>entry</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType>
       <EnclosedExpr><TOKEN>{</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ParenthesizedExpr> <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
       
       <MapConstructorEntry><StringLiteral>"views"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
       
       <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry>
   <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry>
<TOKEN>}</TOKEN></MapConstructor></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>

 

(:~ map of access functions for entity :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>entity:fields</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>entity</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType><EnclosedExpr><TOKEN>{</TOKEN>
  <PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>entity:list</QName></VarRef><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>entity</QName></VarRef><TOKEN>)</TOKEN></ArgumentList><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"access"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></PostfixExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN></Prolog></LibraryModule> 
  <EOF/></XQuery>