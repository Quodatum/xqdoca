<XQuery><Module><VersionDecl><TOKEN>xquery</TOKEN> <TOKEN>version</TOKEN> <StringLiteral>"3.1"</StringLiteral><TOKEN>;</TOKEN></VersionDecl>
(:~
: tools for databases..
: @author andy bunce
: @since mar 2013
:)

<LibraryModule><ModuleDecl><TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>dbtools</NCName> <TOKEN>=</TOKEN> <StringLiteral>'quodatum.dbtools'</StringLiteral><TOKEN>;</TOKEN></ModuleDecl>
<Prolog><ModuleImport><TOKEN>import</TOKEN> <TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>file</NCName><TOKEN>=</TOKEN><StringLiteral>"http://expath.org/ns/file"</StringLiteral></ModuleImport><TOKEN>;</TOKEN>
<ModuleImport><TOKEN>import</TOKEN> <TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>db</NCName><TOKEN>=</TOKEN><StringLiteral>"http://basex.org/modules/db"</StringLiteral></ModuleImport><TOKEN>;</TOKEN>
<ModuleImport><TOKEN>import</TOKEN> <TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>archive</NCName><TOKEN>=</TOKEN><StringLiteral>"http://basex.org/modules/archive"</StringLiteral></ModuleImport><TOKEN>;</TOKEN>
<ModuleImport><TOKEN>import</TOKEN> <TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>hof</NCName><TOKEN>=</TOKEN><StringLiteral>"http://basex.org/modules/hof"</StringLiteral></ModuleImport><TOKEN>;</TOKEN>

(:  trailing slash :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>dbtools:webpath</QName><TOKEN>:=</TOKEN> <StringConcatExpr><RelativePathExpr><FunctionCall><QName>db:system</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>/</TOKEN><AxisStep><QName>globaloptions</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>webpath</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>fn:string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr>
                             <TOKEN>||</TOKEN> <FunctionCall><QName>file:dir-separator</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></StringConcatExpr></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ 
: save all in db to zip
: no binary yet 
:)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>dbtools:zip</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>dbname</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <QName>xs:base64Binary</QName><EnclosedExpr><TOKEN>{</TOKEN>
  <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>files</QName><TOKEN>:=</TOKEN><FunctionCall><QName>db:list</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>dbname</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
  <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>zip</QName>   <TOKEN>:=</TOKEN> <FunctionCall><QName>archive:create</QName><ArgumentList><TOKEN>(</TOKEN>
                  <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>files</QName></VarRef> <TOKEN>!</TOKEN> <CompElemConstructor><TOKEN>element</TOKEN> <QName>archive:entry</QName> <EnclosedExpr><TOKEN>{</TOKEN> <TOKEN>.</TOKEN> <TOKEN>}</TOKEN></EnclosedExpr></CompElemConstructor></RelativePathExpr><TOKEN>,</TOKEN>
                  <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>files</QName></VarRef> <TOKEN>!</TOKEN> <FunctionCall><QName>fn:serialize</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>db:open</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>dbname</QName></VarRef><TOKEN>,</TOKEN> <TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr>
                  <TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
<ReturnClause><TOKEN>return</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>zip</QName></VarRef></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~
: update or create database from file path
: @param $dbname name of database
: @param $path file path contain files
:)
<AnnotatedDecl><TOKEN>declare</TOKEN> <Annotation><TOKEN>%</TOKEN><QName>updating</QName></Annotation> <FunctionDecl><TOKEN>function</TOKEN> <QName>dbtools:sync-from-path</QName><TOKEN>(</TOKEN>
                   <ParamList><Param><TOKEN>$</TOKEN><QName>dbname</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>,</TOKEN>
                   <Param><TOKEN>$</TOKEN><QName>path</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>
<EnclosedExpr><TOKEN>{</TOKEN>
   <FunctionCall><QName>dbtools:sync-from-files</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>dbname</QName></VarRef><TOKEN>,</TOKEN>
                  <VarRef><TOKEN>$</TOKEN><QName>path</QName></VarRef><TOKEN>,</TOKEN>
                  <FunctionCall><QName>file:list</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>path</QName></VarRef><TOKEN>,</TOKEN><FunctionCall><QName>fn:true</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN>
                  <NamedFunctionRef><QName>hof:id</QName><TOKEN>#</TOKEN><IntegerLiteral>1</IntegerLiteral></NamedFunctionRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~
: update or create database from file list. After this the database will have a
: matching copy of the files on the file system
: @param $dbname name of database
: @param $path  base file path where files are relative to en
: @param $files file names from base
: @param $ingest function to apply f(fullsrcpath)-&gt;anotherpath or xml nodes
:)
<AnnotatedDecl><TOKEN>declare</TOKEN> <Annotation><TOKEN>%</TOKEN><QName>updating</QName></Annotation> 
<FunctionDecl><TOKEN>function</TOKEN> <QName>dbtools:sync-from-files</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>dbname</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>,</TOKEN>
                                 <Param><TOKEN>$</TOKEN><QName>path</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>,</TOKEN>
                                 <Param><TOKEN>$</TOKEN><QName>files</QName> <TypeDeclaration><TOKEN>as</TOKEN> <SequenceType><QName>xs:string</QName><TOKEN>*</TOKEN></SequenceType></TypeDeclaration></Param><TOKEN>,</TOKEN>
                                 <Param><TOKEN>$</TOKEN><QName>ingest</QName> <TypeDeclaration><TOKEN>as</TOKEN> <AnyFunctionTest><TOKEN>function</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></AnyFunctionTest></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>
<EnclosedExpr><TOKEN>{</TOKEN>
<FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>path</QName><TOKEN>:=</TOKEN><StringConcatExpr><VarRef><TOKEN>$</TOKEN><QName>path</QName></VarRef> <TOKEN>||</TOKEN><StringLiteral>"/"</StringLiteral></StringConcatExpr></LetBinding></LetClause>
<LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>files</QName><TOKEN>:=</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>files</QName></VarRef><TOKEN>!</TOKEN><FunctionCall><QName>fn:translate</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>,</TOKEN><StringLiteral>"\"</StringLiteral><TOKEN>,</TOKEN><StringLiteral>"/"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr></LetBinding></LetClause>
<LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>files</QName><TOKEN>:=</TOKEN><FunctionCall><QName>fn:filter</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>files</QName></VarRef><TOKEN>,</TOKEN><InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>f</QName></Param><TOKEN>)</TOKEN><EnclosedExpr><TOKEN>{</TOKEN><FunctionCall><QName>file:is-file</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>fn:concat</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>path</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>f</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
<ReturnClause><TOKEN>return</TOKEN> <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><FunctionCall><QName>db:exists</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>dbname</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN> <TOKEN>then</TOKEN>
           <ParenthesizedExpr><TOKEN>(</TOKEN>
           <Expr><FLWORExpr><ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>d</QName> <TOKEN>in</TOKEN> <FunctionCall><QName>db:list</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>dbname</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ForBinding></ForClause> 
           <WhereClause><TOKEN>where</TOKEN> <FunctionCall><QName>fn:not</QName><ArgumentList><TOKEN>(</TOKEN><ComparisonExpr><VarRef><TOKEN>$</TOKEN><QName>d</QName></VarRef><TOKEN>=</TOKEN><VarRef><TOKEN>$</TOKEN><QName>files</QName></VarRef></ComparisonExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></WhereClause> 
           <ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>db:delete</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>dbname</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>d</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr><TOKEN>,</TOKEN>
           
           <FLWORExpr><ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>f</QName> <TOKEN>in</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>files</QName></VarRef></ForBinding></ForClause>
           <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>_</QName><TOKEN>:=</TOKEN><FunctionCall><QName>fn:trace</QName><ArgumentList><TOKEN>(</TOKEN><StringConcatExpr><VarRef><TOKEN>$</TOKEN><QName>path</QName></VarRef> <TOKEN>||</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>f</QName></VarRef></StringConcatExpr><TOKEN>,</TOKEN><StringLiteral>"file:"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause> 
           <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>content</QName><TOKEN>:=</TOKEN><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>ingest</QName></VarRef><ArgumentList><TOKEN>(</TOKEN><StringConcatExpr><VarRef><TOKEN>$</TOKEN><QName>path</QName></VarRef> <TOKEN>||</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>f</QName></VarRef></StringConcatExpr><TOKEN>)</TOKEN></ArgumentList></PostfixExpr></LetBinding></LetClause> 
           <ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>db:replace</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>dbname</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>f</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>content</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr><TOKEN>,</TOKEN>
           
           <FunctionCall><QName>db:optimize</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>dbname</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></Expr>
           <TOKEN>)</TOKEN></ParenthesizedExpr>
       <TOKEN>else</TOKEN>
          <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>full</QName><TOKEN>:=</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>files</QName></VarRef><TOKEN>!</TOKEN><FunctionCall><QName>fn:concat</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>path</QName></VarRef><TOKEN>,</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr></LetBinding></LetClause>
          <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>content</QName><TOKEN>:=</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>full</QName></VarRef><TOKEN>!</TOKEN><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>ingest</QName></VarRef><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></PostfixExpr></RelativePathExpr></LetBinding></LetClause> 
          <ReturnClause><TOKEN>return</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN><FunctionCall><QName>db:create</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>dbname</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>content</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>files</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ParenthesizedExpr></ReturnClause></FLWORExpr></IfExpr></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN></Prolog></LibraryModule></Module>

<EOF/></XQuery>