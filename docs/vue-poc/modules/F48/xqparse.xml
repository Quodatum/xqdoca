<XQuery>(:~ 
 :  plantuml library
 : @see  http://plantuml.com/code-javascript-synchronous
 : @author Andy Bunce
 : @version 0.1
 : @date apr 2019  
:)
<LibraryModule><ModuleDecl><TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN>  <NCName>plant</NCName><TOKEN>=</TOKEN><StringLiteral>'http://quodatum.com/ns/plantuml'</StringLiteral><TOKEN>;</TOKEN></ModuleDecl>
<Prolog><ModuleImport><TOKEN>import</TOKEN> <TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>bin</NCName><TOKEN>=</TOKEN><StringLiteral>"http://expath.org/ns/binary"</StringLiteral></ModuleImport><TOKEN>;</TOKEN>

<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>plant:encode6bit</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>b</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:integer</QName></TypeDeclaration></Param><TOKEN>)</TOKEN> <EnclosedExpr><TOKEN>{</TOKEN>
  <SwitchExpr><TOKEN>switch</TOKEN><TOKEN>(</TOKEN><FunctionCall><QName>true</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN>
  <SwitchCaseClause><TOKEN>case</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN><ComparisonExpr><VarRef><TOKEN>$</TOKEN><QName>b</QName></VarRef> <TOKEN>lt</TOKEN>  <IntegerLiteral>10</IntegerLiteral></ComparisonExpr><TOKEN>)</TOKEN></ParenthesizedExpr> <TOKEN>return</TOKEN> <FunctionCall><QName>fn:codepoints-to-string</QName> <ArgumentList><TOKEN>(</TOKEN><AdditiveExpr><IntegerLiteral>48</IntegerLiteral> <TOKEN>+</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>b</QName></VarRef></AdditiveExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></SwitchCaseClause>
  <SwitchCaseClause><TOKEN>case</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN><ComparisonExpr><VarRef><TOKEN>$</TOKEN><QName>b</QName></VarRef> <TOKEN>lt</TOKEN> <IntegerLiteral>36</IntegerLiteral></ComparisonExpr><TOKEN>)</TOKEN></ParenthesizedExpr> <TOKEN>return</TOKEN> <FunctionCall><QName>fn:codepoints-to-string</QName> <ArgumentList><TOKEN>(</TOKEN><AdditiveExpr><IntegerLiteral>65</IntegerLiteral> <TOKEN>+</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>b</QName></VarRef> <TOKEN>-</TOKEN><IntegerLiteral>10</IntegerLiteral></AdditiveExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></SwitchCaseClause>
  <SwitchCaseClause><TOKEN>case</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN><ComparisonExpr><VarRef><TOKEN>$</TOKEN><QName>b</QName></VarRef> <TOKEN>lt</TOKEN> <IntegerLiteral>62</IntegerLiteral></ComparisonExpr><TOKEN>)</TOKEN></ParenthesizedExpr> <TOKEN>return</TOKEN> <FunctionCall><QName>fn:codepoints-to-string</QName> <ArgumentList><TOKEN>(</TOKEN><AdditiveExpr><IntegerLiteral>97</IntegerLiteral> <TOKEN>+</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>b</QName></VarRef> <TOKEN>-</TOKEN><IntegerLiteral>36</IntegerLiteral></AdditiveExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></SwitchCaseClause>
  <SwitchCaseClause><TOKEN>case</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN><ComparisonExpr><VarRef><TOKEN>$</TOKEN><QName>b</QName></VarRef> <TOKEN>eq</TOKEN> <IntegerLiteral>62</IntegerLiteral></ComparisonExpr><TOKEN>)</TOKEN></ParenthesizedExpr> <TOKEN>return</TOKEN> <StringLiteral>"-"</StringLiteral></SwitchCaseClause>
  <SwitchCaseClause><TOKEN>case</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN><ComparisonExpr><VarRef><TOKEN>$</TOKEN><QName>b</QName></VarRef> <TOKEN>eq</TOKEN> <IntegerLiteral>63</IntegerLiteral></ComparisonExpr><TOKEN>)</TOKEN></ParenthesizedExpr> <TOKEN>return</TOKEN> <StringLiteral>"_"</StringLiteral></SwitchCaseClause>
  <TOKEN>default</TOKEN> <TOKEN>return</TOKEN> <StringLiteral>"?"</StringLiteral></SwitchExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>plant:append3bytes</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>b1</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:base64Binary</QName></TypeDeclaration></Param> <TOKEN>,</TOKEN> 
                                    <Param><TOKEN>$</TOKEN><QName>b2</QName>  <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:base64Binary</QName></TypeDeclaration></Param> <TOKEN>,</TOKEN>
                                    <Param><TOKEN>$</TOKEN><QName>b3</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:base64Binary</QName></TypeDeclaration></Param></ParamList> <TOKEN>)</TOKEN>
  <EnclosedExpr><TOKEN>{</TOKEN>
  <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>c1</QName> <TOKEN>:=</TOKEN> <ArrowExpr><VarRef><TOKEN>$</TOKEN><QName>b1</QName></VarRef><TOKEN>=&gt;</TOKEN><QName>bin:shift</QName><ArgumentList><TOKEN>(</TOKEN><UnaryExpr><TOKEN>-</TOKEN><IntegerLiteral>2</IntegerLiteral></UnaryExpr><TOKEN>)</TOKEN></ArgumentList></ArrowExpr></LetBinding></LetClause>
  <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>c2</QName><TOKEN>:=</TOKEN> <ArrowExpr><VarRef><TOKEN>$</TOKEN><QName>b1</QName></VarRef><TOKEN>=&gt;</TOKEN><QName>bin:and</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>bin:hex</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"3"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList><TOKEN>=&gt;</TOKEN><QName>bin:shift</QName><ArgumentList><TOKEN>(</TOKEN><IntegerLiteral>4</IntegerLiteral><TOKEN>)</TOKEN></ArgumentList><TOKEN>=&gt;</TOKEN><QName>bin:or</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>bin:shift</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>b2</QName></VarRef><TOKEN>,</TOKEN><UnaryExpr><TOKEN>-</TOKEN><IntegerLiteral>4</IntegerLiteral></UnaryExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></ArrowExpr></LetBinding></LetClause>
  <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>c3</QName> <TOKEN>:=</TOKEN> <ArrowExpr><VarRef><TOKEN>$</TOKEN><QName>b2</QName></VarRef><TOKEN>=&gt;</TOKEN><QName>bin:and</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>bin:hex</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"F"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList><TOKEN>=&gt;</TOKEN><QName>bin:shift</QName><ArgumentList><TOKEN>(</TOKEN><IntegerLiteral>2</IntegerLiteral><TOKEN>)</TOKEN></ArgumentList><TOKEN>=&gt;</TOKEN><QName>bin:or</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>bin:shift</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>b3</QName></VarRef><TOKEN>,</TOKEN><UnaryExpr><TOKEN>-</TOKEN><IntegerLiteral>6</IntegerLiteral></UnaryExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></ArrowExpr></LetBinding></LetClause>
  <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>mask</QName><TOKEN>:=</TOKEN><InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>b</QName></Param><TOKEN>)</TOKEN><EnclosedExpr><TOKEN>{</TOKEN><ArrowExpr><FunctionCall><QName>bin:and</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>b</QName></VarRef><TOKEN>,</TOKEN><FunctionCall><QName>bin:hex</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"3F"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>=&gt;</TOKEN><QName>bin:unpack-integer</QName><ArgumentList><TOKEN>(</TOKEN><IntegerLiteral>0</IntegerLiteral><TOKEN>,</TOKEN><IntegerLiteral>1</IntegerLiteral><TOKEN>)</TOKEN></ArgumentList></ArrowExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></LetBinding></LetClause>
  <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>c4</QName> <TOKEN>:=</TOKEN> <ArrowExpr><VarRef><TOKEN>$</TOKEN><QName>b3</QName></VarRef> <TOKEN>=&gt;</TOKEN><QName>bin:and</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>bin:hex</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"3F"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></ArrowExpr></LetBinding></LetClause>
  <ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>concat</QName><ArgumentList><TOKEN>(</TOKEN> 
  <FunctionCall><QName>plant:encode6bit</QName><ArgumentList><TOKEN>(</TOKEN><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>mask</QName></VarRef><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>c1</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></PostfixExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN>
  <FunctionCall><QName>plant:encode6bit</QName><ArgumentList><TOKEN>(</TOKEN><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>mask</QName></VarRef><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>c2</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></PostfixExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN>
  <FunctionCall><QName>plant:encode6bit</QName><ArgumentList><TOKEN>(</TOKEN><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>mask</QName></VarRef><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>c3</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></PostfixExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN>
  <FunctionCall><QName>plant:encode6bit</QName><ArgumentList><TOKEN>(</TOKEN><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>mask</QName></VarRef><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>c4</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></PostfixExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
  <TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>plant:encode64</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>data</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>)</TOKEN>
<EnclosedExpr><TOKEN>{</TOKEN>
  <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>b</QName><TOKEN>:=</TOKEN><FunctionCall><QName>bin:encode-string</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>data</QName></VarRef><TOKEN>,</TOKEN><StringLiteral>"UTF-8"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
  <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>b</QName><TOKEN>:=</TOKEN><FunctionCall><QName>bin:pad-right</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>b</QName></VarRef><TOKEN>,</TOKEN><MultiplicativeExpr><FunctionCall><QName>bin:length</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>b</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall> <TOKEN>mod</TOKEN> <IntegerLiteral>3</IntegerLiteral></MultiplicativeExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
  <ReturnClause><TOKEN>return</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>b</QName></VarRef></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN></Prolog></LibraryModule><EOF/></XQuery>