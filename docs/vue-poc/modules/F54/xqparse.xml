<XQuery>(:~
 : Generate XQuery  documentation in html
 : using file:///C:/Users/andy/workspace/app-doc/src/doc/data/doc/models
 : $efolder:="file:///C:/Users/andy/workspace/app-doc/src/doc/data/doc/models"
 : $target:="file:///C:/Users/andy/workspace/app-doc/src/doc/generated/models.xqm"
 :)
<LibraryModule><ModuleDecl><TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>xqd</NCName> <TOKEN>=</TOKEN> <StringLiteral>'quodatum:build.xqdoc'</StringLiteral><TOKEN>;</TOKEN></ModuleDecl>
<Prolog><ModuleImport><TOKEN>import</TOKEN> <TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>xp</NCName><TOKEN>=</TOKEN><StringLiteral>"expkg-zone58:text.parse"</StringLiteral></ModuleImport><TOKEN>;</TOKEN>
<ModuleImport><TOKEN>import</TOKEN> <TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>store</NCName> <TOKEN>=</TOKEN> <StringLiteral>'quodatum.store'</StringLiteral> <TOKEN>at</TOKEN> <StringLiteral>'../store.xqm'</StringLiteral></ModuleImport><TOKEN>;</TOKEN>
<ModuleImport><TOKEN>import</TOKEN> <TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>xqhtml</NCName> <TOKEN>=</TOKEN> <StringLiteral>'quodatum:build.xqdoc-html'</StringLiteral> <TOKEN>at</TOKEN> <StringLiteral>"xqdoc-html.xqm"</StringLiteral></ModuleImport><TOKEN>;</TOKEN>
<NamespaceDecl><TOKEN>declare</TOKEN> <TOKEN>namespace</TOKEN> <NCName>c</NCName><TOKEN>=</TOKEN><StringLiteral>"http://www.w3.org/ns/xproc-step"</StringLiteral></NamespaceDecl><TOKEN>;</TOKEN>
<NamespaceDecl><TOKEN>declare</TOKEN> <TOKEN>namespace</TOKEN> <NCName>xqdoc</NCName><TOKEN>=</TOKEN><StringLiteral>"http://www.xqdoc.org/1.0"</StringLiteral></NamespaceDecl><TOKEN>;</TOKEN>

<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>xqd:HTML5</QName><TOKEN>:=</TOKEN><MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN><MapConstructorEntry><StringLiteral>"method"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"html"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN><MapConstructorEntry><StringLiteral>"version"</StringLiteral><TOKEN>:</TOKEN><StringLiteral>"5.0"</StringLiteral></MapConstructorEntry><TOKEN>}</TOKEN></MapConstructor></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>xqd:XML</QName><TOKEN>:=</TOKEN><MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN><MapConstructorEntry><StringLiteral>"indent"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"no"</StringLiteral></MapConstructorEntry><TOKEN>}</TOKEN></MapConstructor></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>xqd:mod-xslt</QName> <TOKEN>external</TOKEN> <TOKEN>:=</TOKEN><StringLiteral>"html-module.xsl"</StringLiteral></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>xqd:index-xslt</QName> <TOKEN>external</TOKEN> <TOKEN>:=</TOKEN><StringLiteral>"html-index.xsl"</StringLiteral></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>xqd:nsRESTXQ</QName><TOKEN>:=</TOKEN> <StringLiteral>'http://exquery.org/ns/restxq'</StringLiteral></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>xqd:cache</QName> <TOKEN>external</TOKEN> <TOKEN>:=</TOKEN><FunctionCall><QName>false</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~  @see https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>xqd:methods</QName><TOKEN>:=</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN><Expr><StringLiteral>"GET"</StringLiteral><TOKEN>,</TOKEN><StringLiteral>"HEAD"</StringLiteral><TOKEN>,</TOKEN><StringLiteral>"POST"</StringLiteral><TOKEN>,</TOKEN><StringLiteral>"PUT"</StringLiteral><TOKEN>,</TOKEN><StringLiteral>"DELETE"</StringLiteral><TOKEN>,</TOKEN><StringLiteral>"PATCH"</StringLiteral></Expr><TOKEN>)</TOKEN></ParenthesizedExpr></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ 
 : save documentation for files to target
 : @param $files c:directory-list
 : @param $target where to save
 : @param $opts
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqd:save-xq</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>files</QName></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>target</QName></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>params</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>
<EnclosedExpr><TOKEN>{</TOKEN>
<FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>f</QName><TOKEN>:=</TOKEN>  <TransformWithExpr><CompDocConstructor><TOKEN>document</TOKEN><EnclosedExpr><TOKEN>{</TOKEN><VarRef><TOKEN>$</TOKEN><QName>files</QName></VarRef><TOKEN>}</TOKEN></EnclosedExpr></CompDocConstructor> <TOKEN>transform</TOKEN> <TOKEN>with</TOKEN> <TOKEN>{</TOKEN> <DeleteExpr><TOKEN>delete</TOKEN>  <TOKEN>node</TOKEN> <PathExpr><TOKEN>//</TOKEN><AxisStep><QName>c:directory</QName><Predicate><TOKEN>[</TOKEN><FunctionCall><QName>not</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><TOKEN>.</TOKEN><TOKEN>//</TOKEN><AxisStep><QName>c:file</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>]</TOKEN></Predicate></AxisStep></PathExpr></DeleteExpr><TOKEN>}</TOKEN></TransformWithExpr></LetBinding></LetClause>
 
<ReturnClause><TOKEN>return</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN>
    <Expr><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>files</QName></VarRef><TOKEN>//</TOKEN><AxisStep><QName>c:file</QName><PredicateList/></AxisStep><TOKEN>!</TOKEN><FunctionCall><QName>xqd:gendoc</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>,</TOKEN><StringConcatExpr><StringLiteral>"modules/F"</StringLiteral> <TOKEN>||</TOKEN> <FunctionCall><QName>position</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></StringConcatExpr><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>target</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>params</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>,</TOKEN>
    <ArrowExpr><VarRef><TOKEN>$</TOKEN><QName>f</QName></VarRef><TOKEN>=&gt;</TOKEN><QName>xqd:store</QName><ArgumentList><TOKEN>(</TOKEN><StringConcatExpr><VarRef><TOKEN>$</TOKEN><QName>target</QName></VarRef> <TOKEN>||</TOKEN> <StringLiteral>"/files.xml"</StringLiteral></StringConcatExpr><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xqd:XML</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></ArrowExpr><TOKEN>,</TOKEN>
    <ArrowExpr><VarRef><TOKEN>$</TOKEN><QName>f</QName></VarRef><TOKEN>=&gt;</TOKEN><QName>xqhtml:index-html</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>params</QName></VarRef><TOKEN>)</TOKEN></ArgumentList><TOKEN>=&gt;</TOKEN><QName>xqd:store</QName><ArgumentList><TOKEN>(</TOKEN><StringConcatExpr><VarRef><TOKEN>$</TOKEN><QName>target</QName></VarRef> <TOKEN>||</TOKEN> <StringLiteral>"/index.html"</StringLiteral></StringConcatExpr><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xqd:HTML5</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></ArrowExpr><TOKEN>,</TOKEN>
    <FunctionCall><QName>xqd:export-resources</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>target</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></Expr>
    <TOKEN>)</TOKEN></ParenthesizedExpr></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>   
 
(:~
 : save xqdoc and html for source file $f
 : @param $f &lt;c:file/&gt;
 : @param $target destination folder
 : @param map
 : @param 
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN>  <FunctionDecl><TOKEN>function</TOKEN> <QName>xqd:gendoc</QName><TOKEN>(</TOKEN>
                    <ParamList><Param><TOKEN>$</TOKEN><QName>f</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>c:file</QName><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>,</TOKEN>
                    <Param><TOKEN>$</TOKEN><QName>op</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>,</TOKEN> 
                    <Param><TOKEN>$</TOKEN><QName>target</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>,</TOKEN>
                    <Param><TOKEN>$</TOKEN><QName>params</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param></ParamList>
<TOKEN>)</TOKEN>
 <EnclosedExpr><TOKEN>{</TOKEN>
  <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>_</QName><TOKEN>:=</TOKEN> <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><FunctionCall><QName>file:is-dir</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>target</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN> <TOKEN>then</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ParenthesizedExpr> <TOKEN>else</TOKEN> <FunctionCall><QName>file:create-dir</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>target</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></IfExpr></LetBinding></LetClause>
   <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>target</QName><TOKEN>:=</TOKEN> <FunctionCall><QName>file:path-to-native</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>target</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
  <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>ip</QName><TOKEN>:=</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>f</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>resolve-uri</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>,</TOKEN><FunctionCall><QName>base-uri</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr></LetBinding></LetClause>
   <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>dest</QName><TOKEN>:=</TOKEN> <FunctionCall><QName>file:resolve-path</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>op</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>target</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
  
   <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>xqdoc</QName><TOKEN>:=</TOKEN> <FunctionCall><QName>xqd:xqdoc</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>ip</QName></VarRef><TOKEN>,</TOKEN><MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN><MapConstructorEntry><StringLiteral>"source"</StringLiteral><TOKEN>:</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>ip</QName></VarRef></MapConstructorEntry><TOKEN>}</TOKEN></MapConstructor><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
   <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>xq</QName><TOKEN>:=</TOKEN> <FunctionCall><QName>fetch:text</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>ip</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
   <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>params</QName><TOKEN>:=</TOKEN><FunctionCall><QName>map:merge</QName><ArgumentList><TOKEN>(</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN><Expr><MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
                <MapConstructorEntry><StringLiteral>"source"</StringLiteral><TOKEN>:</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>xq</QName></VarRef></MapConstructorEntry><TOKEN>,</TOKEN>
                <MapConstructorEntry><StringLiteral>"filename"</StringLiteral><TOKEN>:</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>f</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr></MapConstructorEntry><TOKEN>,</TOKEN>
                <MapConstructorEntry><StringLiteral>"cache"</StringLiteral><TOKEN>:</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>xqd:cache</QName></VarRef></MapConstructorEntry><TOKEN>,</TOKEN>
                <MapConstructorEntry><StringLiteral>"show-private"</StringLiteral><TOKEN>:</TOKEN> <FunctionCall><QName>true</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></MapConstructorEntry><TOKEN>,</TOKEN>
                <MapConstructorEntry><StringLiteral>"resources"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"resources/"</StringLiteral></MapConstructorEntry><TOKEN>}</TOKEN></MapConstructor><TOKEN>,</TOKEN>
                <VarRef><TOKEN>$</TOKEN><QName>params</QName></VarRef></Expr><TOKEN>)</TOKEN></ParenthesizedExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
   <ReturnClause><TOKEN>return</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN>
       <Expr><ArrowExpr><VarRef><TOKEN>$</TOKEN><QName>xq</QName></VarRef><TOKEN>=&gt;</TOKEN><QName>xqd:parse</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList><TOKEN>=&gt;</TOKEN><QName>xqd:store</QName><ArgumentList><TOKEN>(</TOKEN><StringConcatExpr><VarRef><TOKEN>$</TOKEN><QName>dest</QName></VarRef> <TOKEN>||</TOKEN> <StringLiteral>"/xparse.xml"</StringLiteral></StringConcatExpr><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xqd:XML</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></ArrowExpr><TOKEN>,</TOKEN>
       <ArrowExpr><VarRef><TOKEN>$</TOKEN><QName>xqdoc</QName></VarRef><TOKEN>=&gt;</TOKEN><QName>xqd:store</QName><ArgumentList><TOKEN>(</TOKEN><StringConcatExpr><VarRef><TOKEN>$</TOKEN><QName>dest</QName></VarRef> <TOKEN>||</TOKEN> <StringLiteral>"/xqdoc.xml"</StringLiteral></StringConcatExpr><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xqd:XML</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></ArrowExpr><TOKEN>,</TOKEN>
       <ArrowExpr><VarRef><TOKEN>$</TOKEN><QName>xqdoc</QName></VarRef><TOKEN>=&gt;</TOKEN><QName>xqd:xqdoc-html</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>params</QName></VarRef><TOKEN>)</TOKEN></ArgumentList><TOKEN>=&gt;</TOKEN><QName>xqd:store</QName><ArgumentList><TOKEN>(</TOKEN><StringConcatExpr><VarRef><TOKEN>$</TOKEN><QName>dest</QName></VarRef> <TOKEN>||</TOKEN> <StringLiteral>"/index.html"</StringLiteral></StringConcatExpr><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xqd:HTML5</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></ArrowExpr></Expr>
        <TOKEN>)</TOKEN></ParenthesizedExpr></ReturnClause></FLWORExpr>
 <TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>
 
(:~
: create documentation folder map
: map{"base-uri":.., "files":map(*)*}
:)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqd:read</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>efolder</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType>
<EnclosedExpr><TOKEN>{</TOKEN>
<FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>files</QName><TOKEN>:=</TOKEN> <FunctionCall><QName>file:list</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>efolder</QName></VarRef><TOKEN>,</TOKEN><FunctionCall><QName>true</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN><StringLiteral>"*.xqm"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
<LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>full</QName><TOKEN>:=</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>files</QName></VarRef><TOKEN>!</TOKEN><FunctionCall><QName>concat</QName><ArgumentList><TOKEN>(</TOKEN><StringConcatExpr><VarRef><TOKEN>$</TOKEN><QName>efolder</QName></VarRef> <TOKEN>||</TOKEN> <StringLiteral>"\"</StringLiteral></StringConcatExpr><TOKEN>,</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr></LetBinding></LetClause>                                
<ReturnClause><TOKEN>return</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
             <MapConstructorEntry><StringLiteral>"base-uri"</StringLiteral><TOKEN>:</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>efolder</QName></VarRef></MapConstructorEntry><TOKEN>,</TOKEN>
             <MapConstructorEntry><StringLiteral>"project"</StringLiteral><TOKEN>:</TOKEN> <PostfixExpr><FunctionCall><QName>tokenize</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>efolder</QName></VarRef><TOKEN>,</TOKEN><StringLiteral>"[/\\]"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><Predicate><TOKEN>[</TOKEN><FunctionCall><QName>last</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>]</TOKEN></Predicate></PostfixExpr></MapConstructorEntry><TOKEN>,</TOKEN>
             <MapConstructorEntry><StringLiteral>"files"</StringLiteral><TOKEN>:</TOKEN> <FLWORExpr><ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>file</QName> <PositionalVar><TOKEN>at</TOKEN> <TOKEN>$</TOKEN><QName>pos</QName></PositionalVar> <TOKEN>in</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>files</QName></VarRef></ForBinding></ForClause>
                      <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>full</QName><TOKEN>:=</TOKEN><FunctionCall><QName>concat</QName><ArgumentList><TOKEN>(</TOKEN><StringConcatExpr><VarRef><TOKEN>$</TOKEN><QName>efolder</QName></VarRef> <TOKEN>||</TOKEN> <StringLiteral>"\"</StringLiteral></StringConcatExpr><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>file</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
                      <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>spath</QName><TOKEN>:=</TOKEN><FunctionCall><QName>translate</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>file</QName></VarRef><TOKEN>,</TOKEN><StringLiteral>"\"</StringLiteral><TOKEN>,</TOKEN><StringLiteral>"/"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
                      <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>xqdoc</QName><TOKEN>:=</TOKEN><FunctionCall><QName>xqd:xqdoc</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>full</QName></VarRef><TOKEN>,</TOKEN><MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN><MapConstructorEntry><StringLiteral>"_source"</StringLiteral><TOKEN>:</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>spath</QName></VarRef></MapConstructorEntry><TOKEN>}</TOKEN></MapConstructor><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
                      <ReturnClause><TOKEN>return</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
                        <MapConstructorEntry><StringLiteral>"path"</StringLiteral><TOKEN>:</TOKEN><VarRef><TOKEN>$</TOKEN><QName>file</QName></VarRef></MapConstructorEntry><TOKEN>,</TOKEN>
                        <MapConstructorEntry><StringLiteral>"href"</StringLiteral><TOKEN>:</TOKEN> <StringConstructor><TOKEN>``[</TOKEN><StringConstructorContent><StringConstructorChars>modules/F</StringConstructorChars><StringConstructorInterpolation><TOKEN>`{</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>pos</QName></VarRef> <TOKEN>}`</TOKEN></StringConstructorInterpolation><StringConstructorChars>/</StringConstructorChars></StringConstructorContent><TOKEN>]``</TOKEN></StringConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
                        <MapConstructorEntry><StringLiteral>"namespace"</StringLiteral><TOKEN>:</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>xqdoc</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>xqdoc:module</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>xqdoc:uri</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr></MapConstructorEntry><TOKEN>,</TOKEN>
                        <MapConstructorEntry><StringLiteral>"xqdoc"</StringLiteral><TOKEN>:</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>xqdoc</QName></VarRef></MapConstructorEntry><TOKEN>,</TOKEN>
                        <MapConstructorEntry><StringLiteral>"xqparse"</StringLiteral><TOKEN>:</TOKEN> <ArrowExpr><FunctionCall><QName>fetch:text</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>full</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>=&gt;</TOKEN><QName>xqd:parse</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></ArrowExpr></MapConstructorEntry>
                      <TOKEN>}</TOKEN></MapConstructor></ReturnClause></FLWORExpr></MapConstructorEntry>
          
           <TOKEN>}</TOKEN></MapConstructor></ReturnClause></FLWORExpr>

<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(: return sequence of maps  are imported ns values are where imported:)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqd:imports</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>doc</QName></Param><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <SequenceType><MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType><TOKEN>*</TOKEN></SequenceType>
<EnclosedExpr><TOKEN>{</TOKEN>
<FLWORExpr><ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>f</QName> <TOKEN>in</TOKEN> <PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>doc</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>files</NCName></Lookup></PostfixExpr></ForBinding></ForClause>
<ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>in</QName> <TOKEN>in</TOKEN> <RelativePathExpr><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>f</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>xqdoc</NCName></Lookup></PostfixExpr><TOKEN>//</TOKEN><AxisStep><QName>xqdoc:import</QName><Predicate><TOKEN>[</TOKEN><ComparisonExpr><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>type</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>=</TOKEN><StringLiteral>"library"</StringLiteral></ComparisonExpr><TOKEN>]</TOKEN></Predicate></AxisStep></RelativePathExpr></ForBinding></ForClause>
<GroupByClause><TOKEN>group</TOKEN> <TOKEN>by</TOKEN> <GroupingSpec><GroupingVariable><TOKEN>$</TOKEN><QName>ns</QName></GroupingVariable><TOKEN>:=</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>in</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>xqdoc:uri</QName>
<PredicateList/></AxisStep></RelativePathExpr></GroupingSpec></GroupByClause><ReturnClause><TOKEN>return</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> <MapConstructorEntry><StringLiteral>"uri"</StringLiteral><TOKEN>:</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>ns</QName></VarRef></MapConstructorEntry><TOKEN>,</TOKEN> <MapConstructorEntry><StringLiteral>"where"</StringLiteral><TOKEN>:</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>f</QName></VarRef></MapConstructorEntry><TOKEN>}</TOKEN></MapConstructor></ReturnClause></FLWORExpr>

<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

 (:~
 : save xqdoc and html for source file $f
 : @param $f &lt;c:file/&gt;
 : @param $target destination folder
 : @param map
 : @param 
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN>  <FunctionDecl><TOKEN>function</TOKEN> <QName>xqd:gendoc2</QName><TOKEN>(</TOKEN>
                    <ParamList><Param><TOKEN>$</TOKEN><QName>f</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>c:file</QName><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>,</TOKEN>
                    <Param><TOKEN>$</TOKEN><QName>op</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>,</TOKEN> 
                    <Param><TOKEN>$</TOKEN><QName>target</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>,</TOKEN>
                    <Param><TOKEN>$</TOKEN><QName>params</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param></ParamList>
<TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <SequenceType><MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType><TOKEN>*</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
  <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>ip</QName><TOKEN>:=</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>f</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>resolve-uri</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>,</TOKEN><FunctionCall><QName>base-uri</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr></LetBinding></LetClause>
  <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>xqdoc</QName><TOKEN>:=</TOKEN> <FunctionCall><QName>xqd:xqdoc</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>ip</QName></VarRef><TOKEN>,</TOKEN><MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN><TOKEN>}</TOKEN></MapConstructor><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
  <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>xq</QName><TOKEN>:=</TOKEN> <FunctionCall><QName>fetch:text</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>ip</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
  <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>params</QName><TOKEN>:=</TOKEN><FunctionCall><QName>map:merge</QName><ArgumentList><TOKEN>(</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN><Expr><MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
                <MapConstructorEntry><StringLiteral>"source"</StringLiteral><TOKEN>:</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>xq</QName></VarRef></MapConstructorEntry><TOKEN>,</TOKEN>
                <MapConstructorEntry><StringLiteral>"filename"</StringLiteral><TOKEN>:</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>f</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr></MapConstructorEntry><TOKEN>,</TOKEN>
                <MapConstructorEntry><StringLiteral>"cache"</StringLiteral><TOKEN>:</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>xqd:cache</QName></VarRef></MapConstructorEntry><TOKEN>,</TOKEN>
                <MapConstructorEntry><StringLiteral>"show-private"</StringLiteral><TOKEN>:</TOKEN> <FunctionCall><QName>true</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></MapConstructorEntry><TOKEN>,</TOKEN>
                <MapConstructorEntry><StringLiteral>"root"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"../../"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
                <MapConstructorEntry><StringLiteral>"resources"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"resources/"</StringLiteral></MapConstructorEntry><TOKEN>}</TOKEN></MapConstructor><TOKEN>,</TOKEN>
                <VarRef><TOKEN>$</TOKEN><QName>params</QName></VarRef></Expr><TOKEN>)</TOKEN></ParenthesizedExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
   <ReturnClause><TOKEN>return</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN>
       <Expr><FunctionCall><QName>xqd:store2</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>xqd:parse</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xq</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN> <StringLiteral>"xparse.xml"</StringLiteral><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xqd:XML</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN>
        <FunctionCall><QName>xqd:store2</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xqdoc</QName></VarRef><TOKEN>,</TOKEN><StringLiteral>"xqdoc.xml"</StringLiteral><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xqd:XML</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN>
        <FunctionCall><QName>xqd:store2</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>xqd:xqdoc-html</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xqdoc</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>params</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN> <StringLiteral>"index.html"</StringLiteral><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xqd:HTML5</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></Expr>
        <TOKEN>)</TOKEN></ParenthesizedExpr></ReturnClause></FLWORExpr>
 <TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>
(:~ 
 :save $data to $url , create fdolder if missing) 
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqd:store</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>data</QName></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>url</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>params</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>
<EnclosedExpr><TOKEN>{</TOKEN>  
   <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>p</QName><TOKEN>:=</TOKEN><FunctionCall><QName>file:parent</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>url</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
   <ReturnClause><TOKEN>return</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN>
           <Expr><IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><FunctionCall><QName>file:is-dir</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>p</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN> <TOKEN>then</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ParenthesizedExpr> <TOKEN>else</TOKEN> <FunctionCall><QName>file:create-dir</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>p</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></IfExpr><TOKEN>,</TOKEN>
           <FunctionCall><QName>file:write</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>url</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>data</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>params</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></Expr>
           <TOKEN>)</TOKEN></ParenthesizedExpr></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ 
 : return intent to save $data to $url with serialization $params
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqd:store2</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>data</QName></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>url</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>params</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>
<EnclosedExpr><TOKEN>{</TOKEN>  
  <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN><MapConstructorEntry><StringLiteral>"document"</StringLiteral><TOKEN>:</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>data</QName></VarRef></MapConstructorEntry><TOKEN>,</TOKEN> <MapConstructorEntry><StringLiteral>"uri"</StringLiteral><TOKEN>:</TOKEN><VarRef><TOKEN>$</TOKEN><QName>url</QName></VarRef></MapConstructorEntry><TOKEN>,</TOKEN><MapConstructorEntry><StringLiteral>"opts"</StringLiteral><TOKEN>:</TOKEN><VarRef><TOKEN>$</TOKEN><QName>params</QName></VarRef></MapConstructorEntry><TOKEN>}</TOKEN></MapConstructor>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>
     
(:~ parse XQuery 
 : result is &lt;XQuery&gt; or &lt;ERROR&gt;
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqd:parse</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>xq</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></ElementTest>
<EnclosedExpr><TOKEN>{</TOKEN>  
  <FunctionCall><QName>xp:parse</QName><ArgumentList><TOKEN>(</TOKEN><StringConcatExpr><VarRef><TOKEN>$</TOKEN><QName>xq</QName></VarRef> <TOKEN>||</TOKEN> <StringLiteral>""</StringLiteral></StringConcatExpr><TOKEN>,</TOKEN><MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN><MapConstructorEntry><StringLiteral>"lang"</StringLiteral><TOKEN>:</TOKEN><StringLiteral>"xquery"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN><MapConstructorEntry><StringLiteral>"version"</StringLiteral><TOKEN>:</TOKEN><StringLiteral>"3.1 basex"</StringLiteral></MapConstructorEntry><TOKEN>}</TOKEN></MapConstructor><TOKEN>)</TOKEN></ArgumentList></FunctionCall> 
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ 
 : Generate xqdoc adding custom opts 
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqd:xqdoc</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>url</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>opts</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>xqdoc:xqdoc</QName><TOKEN>)</TOKEN></ElementTest>
<EnclosedExpr><TOKEN>{</TOKEN>  
  <TransformWithExpr><FunctionCall><QName>inspect:xqdoc</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>url</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
  <TOKEN>transform</TOKEN> <TOKEN>with</TOKEN> <TOKEN>{</TOKEN>
          <FLWORExpr><ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>tag</QName> <TOKEN>in</TOKEN> <FunctionCall><QName>map:keys</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>opts</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ForBinding></ForClause>
          <ReturnClause><TOKEN>return</TOKEN> <InsertExpr><TOKEN>insert</TOKEN> <TOKEN>node</TOKEN> <DirElemConstructor><TOKEN>&lt;</TOKEN><QName>xqdoc:custom</QName><DirAttributeList><S> </S><QName>tag</QName><TOKEN>=</TOKEN><DirAttributeValue><TOKEN>"</TOKEN><QuotAttrContentChar>_</QuotAttrContentChar><EnclosedExpr><TOKEN>{</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>tag</QName></VarRef> <TOKEN>}</TOKEN></EnclosedExpr><TOKEN>"</TOKEN></DirAttributeValue></DirAttributeList><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>opts</QName></VarRef><Lookup><TOKEN>?</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>tag</QName></VarRef><TOKEN>)</TOKEN></ParenthesizedExpr></Lookup></PostfixExpr> <TOKEN>}</TOKEN></EnclosedExpr><TOKEN>&lt;/</TOKEN><QName>xqdoc:custom</QName><TOKEN>&gt;</TOKEN></DirElemConstructor> 
          <TOKEN>into</TOKEN> <RelativePathExpr><AxisStep><QName>xqdoc:module</QName><Predicate><TOKEN>[</TOKEN><ComparisonExpr><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>type</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>=</TOKEN><StringLiteral>"library"</StringLiteral></ComparisonExpr><TOKEN>]</TOKEN></Predicate></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>xqdoc:comment</QName>
  <PredicateList/></AxisStep></RelativePathExpr></InsertExpr></ReturnClause></FLWORExpr><TOKEN>}</TOKEN></TransformWithExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>
         
(:~ transform xqdoc to html :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqd:xqdoc-html</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>xqd</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>xqdoc:xqdoc</QName><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>,</TOKEN>
                            <Param><TOKEN>$</TOKEN><QName>params</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param></ParamList>
                            <TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <DocumentTest><TOKEN>document-node</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></DocumentTest>                            
<EnclosedExpr><TOKEN>{</TOKEN>  
<FunctionCall><QName>xslt:transform</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xqd</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xqd:mod-xslt</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>params</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ transform files to html :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqd:index-html</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>files</QName></Param><TOKEN>,</TOKEN>
                            <Param><TOKEN>$</TOKEN><QName>params</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param></ParamList>
                            <TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <DocumentTest><TOKEN>document-node</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></DocumentTest>                            
<EnclosedExpr><TOKEN>{</TOKEN>  
<FunctionCall><QName>xslt:transform</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>files</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xqd:index-xslt</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>params</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ save runtime support files to $target :)
<AnnotatedDecl><TOKEN>declare</TOKEN>
<FunctionDecl><TOKEN>function</TOKEN> <QName>xqd:export-resources</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>target</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>)</TOKEN>                       
<TOKEN>as</TOKEN> <SequenceType><TOKEN>empty-sequence</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></SequenceType><EnclosedExpr><TOKEN>{</TOKEN>  
<FunctionCall><QName>archive:extract-to</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>target</QName></VarRef><TOKEN>,</TOKEN> <FunctionCall><QName>file:read-binary</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>resolve-uri</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>'resources.zip'</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN> 

(:~ save runtime support files to $target :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <Annotation><TOKEN>%</TOKEN><QName>updating</QName></Annotation>
<FunctionDecl><TOKEN>function</TOKEN> <QName>xqd:export-resources2</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>target</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>)</TOKEN>                       
<TOKEN>as</TOKEN> <SequenceType><TOKEN>empty-sequence</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></SequenceType><EnclosedExpr><TOKEN>{</TOKEN>  
<FunctionCall><QName>archive:extract-to</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>target</QName></VarRef><TOKEN>,</TOKEN> <FunctionCall><QName>file:read-binary</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>resolve-uri</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>'resources.zip'</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ return sequence of maps with maps uri and methods :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqd:rxq-paths</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>state</QName></Param><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <SequenceType><MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType><TOKEN>*</TOKEN></SequenceType> 
<EnclosedExpr><TOKEN>{</TOKEN>
<FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>reports</QName><TOKEN>:=</TOKEN> <FunctionCall><QName>xqd:annots-rxq</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>state</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>  
(: map keyed on uris :)
<LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>data</QName><TOKEN>:=</TOKEN><FunctionCall><QName>map:merge</QName><ArgumentList><TOKEN>(</TOKEN><FLWORExpr><ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>report</QName> <TOKEN>in</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>reports</QName></VarRef></ForBinding></ForClause>
          <GroupByClause><TOKEN>group</TOKEN> <TOKEN>by</TOKEN> <GroupingSpec><GroupingVariable><TOKEN>$</TOKEN><QName>uri</QName></GroupingVariable><TOKEN>:=</TOKEN><RelativePathExpr><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>report</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>annot</NCName></Lookup></PostfixExpr><TOKEN>/</TOKEN><AxisStep><QName>xqdoc:literal</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr></GroupingSpec></GroupByClause>
          <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>methods</QName><TOKEN>:=</TOKEN> <FunctionCall><QName>map:merge</QName><ArgumentList><TOKEN>(</TOKEN>
                         <FLWORExpr><ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>annot</QName> <TOKEN>in</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>report</QName></VarRef></ForBinding></ForClause>
                         <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>hits</QName><TOKEN>:=</TOKEN><FLWORExpr><ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>method</QName> <TOKEN>in</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>xqd:methods</QName></VarRef></ForBinding></ForClause>
                                     <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>hit</QName><TOKEN>:=</TOKEN>  <FunctionCall><QName>xqd:methods</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>annot</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>annot</NCName></Lookup></PostfixExpr><TOKEN>/</TOKEN><AxisStep><TOKEN>..</TOKEN><PredicateList/></AxisStep></RelativePathExpr><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>xqd:nsRESTXQ</QName></VarRef><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>method</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
                                     <WhereClause><TOKEN>where</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>hit</QName></VarRef></WhereClause>
                                     <ReturnClause><TOKEN>return</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN><MapConstructorEntry><VarRef><TOKEN>$</TOKEN><QName>method</QName></VarRef><TOKEN>:</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>annot</QName></VarRef></MapConstructorEntry><TOKEN>}</TOKEN></MapConstructor></ReturnClause></FLWORExpr></LetBinding></LetClause>
                         <ReturnClause><TOKEN>return</TOKEN> <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><FunctionCall><QName>exists</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>hits</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN><TOKEN>then</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>hits</QName></VarRef> <TOKEN>else</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN><MapConstructorEntry><StringLiteral>"ALL"</StringLiteral><TOKEN>:</TOKEN><VarRef><TOKEN>$</TOKEN><QName>annot</QName></VarRef></MapConstructorEntry><TOKEN>}</TOKEN></MapConstructor></IfExpr></ReturnClause></FLWORExpr>
                       <TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
          <ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>map:entry</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>uri</QName></VarRef><TOKEN>,</TOKEN><MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> <MapConstructorEntry><StringLiteral>"uri"</StringLiteral><TOKEN>:</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>uri</QName></VarRef></MapConstructorEntry><TOKEN>,</TOKEN> <MapConstructorEntry><StringLiteral>"methods"</StringLiteral><TOKEN>:</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>methods</QName></VarRef></MapConstructorEntry><TOKEN>}</TOKEN></MapConstructor><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr>
        <TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause> 
<LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>uris</QName><TOKEN>:=</TOKEN><FunctionCall><QName>sort</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>map:keys</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>data</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>        
<ReturnClause><TOKEN>return</TOKEN> <PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>data</QName></VarRef><Lookup><TOKEN>?</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>uris</QName></VarRef><TOKEN>)</TOKEN></ParenthesizedExpr></Lookup></PostfixExpr></ReturnClause></FLWORExpr>        
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>
(:~ 
 : map for each restxq:path annotation
  :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqd:annots-rxq</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>state</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <SequenceType><MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType><TOKEN>*</TOKEN></SequenceType>
<EnclosedExpr><TOKEN>{</TOKEN>
  <FLWORExpr><ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>f</QName> <PositionalVar><TOKEN>at</TOKEN> <TOKEN>$</TOKEN><QName>index</QName></PositionalVar> <TOKEN>in</TOKEN> <PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>state</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>files</NCName></Lookup></PostfixExpr></ForBinding></ForClause>
  <ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>annot</QName> <TOKEN>in</TOKEN> <FunctionCall><QName>xqd:annotations</QName><ArgumentList><TOKEN>(</TOKEN><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>f</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>xqdoc</NCName></Lookup></PostfixExpr><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>xqd:nsRESTXQ</QName></VarRef><TOKEN>,</TOKEN><StringLiteral>"path"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ForBinding></ForClause>
  <ReturnClause><TOKEN>return</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
                <MapConstructorEntry><StringLiteral>"id"</StringLiteral><TOKEN>:</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>index</QName></VarRef></MapConstructorEntry><TOKEN>,</TOKEN>
                <MapConstructorEntry><StringLiteral>"uri"</StringLiteral><TOKEN>:</TOKEN> <PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>f</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>href</NCName></Lookup></PostfixExpr></MapConstructorEntry><TOKEN>,</TOKEN>
                <MapConstructorEntry><StringLiteral>"path"</StringLiteral><TOKEN>:</TOKEN> <PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>f</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>path</NCName></Lookup></PostfixExpr></MapConstructorEntry><TOKEN>,</TOKEN>
                <MapConstructorEntry><StringLiteral>"annot"</StringLiteral><TOKEN>:</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>annot</QName></VarRef></MapConstructorEntry><TOKEN>,</TOKEN>
                <MapConstructorEntry><StringLiteral>"function"</StringLiteral><TOKEN>:</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>annot</QName></VarRef><TOKEN>/</TOKEN><AxisStep><TOKEN>..</TOKEN><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><TOKEN>..</TOKEN><PredicateList/></AxisStep><TOKEN>/</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN><Expr><RelativePathExpr><AxisStep><QName>xqdoc:name</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>,</TOKEN><RelativePathExpr><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>arity</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr></Expr><TOKEN>)</TOKEN></ParenthesizedExpr></RelativePathExpr></MapConstructorEntry><TOKEN>,</TOKEN>
                <MapConstructorEntry><StringLiteral>"description"</StringLiteral><TOKEN>:</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>annot</QName></VarRef><TOKEN>/</TOKEN><AxisStep><TOKEN>..</TOKEN><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><TOKEN>..</TOKEN><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>xqdoc:comment</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>xqdoc:description</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><AnyKindTest><TOKEN>node</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></AnyKindTest> 
                 <PredicateList/></AxisStep></RelativePathExpr></MapConstructorEntry><TOKEN>}</TOKEN></MapConstructor></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ 
 : return all matching annotations in xqdoc
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqd:annotations</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>xqdoc</QName>  <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>xqdoc:xqdoc</QName><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>,</TOKEN>
                                 <Param><TOKEN>$</TOKEN><QName>annotns</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>,</TOKEN>
                                 <Param><TOKEN>$</TOKEN><QName>aname</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN> 
<TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>xqdoc:annotation</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType>
<EnclosedExpr><TOKEN>{</TOKEN>
 <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>prefixes</QName><TOKEN>:=</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>xqdoc</QName></VarRef><TOKEN>//</TOKEN><AxisStep><QName>xqdoc:namespace</QName><Predicate><TOKEN>[</TOKEN><ComparisonExpr><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>uri</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>=</TOKEN><VarRef><TOKEN>$</TOKEN><QName>annotns</QName></VarRef></ComparisonExpr><TOKEN>]</TOKEN></Predicate></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>prefix</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr></LetBinding></LetClause>
 <ReturnClause><TOKEN>return</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>xqdoc</QName></VarRef><TOKEN>//</TOKEN><AxisStep><QName>xqdoc:annotations</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>xqdoc:annotation</QName><Predicate><TOKEN>[</TOKEN><ComparisonExpr><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>=</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN><FLWORExpr><ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>p</QName> <TOKEN>in</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>prefixes</QName></VarRef></ForBinding></ForClause> <ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>concat</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>p</QName></VarRef><TOKEN>,</TOKEN><StringLiteral>':'</StringLiteral><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>aname</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr><TOKEN>)</TOKEN></ParenthesizedExpr></ComparisonExpr><TOKEN>]</TOKEN></Predicate></AxisStep></RelativePathExpr></ReturnClause></FLWORExpr>

<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ 
 : return annotations with namespace and name
  :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqd:methods</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>annots</QName>  <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>xqdoc:annotations</QName><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>,</TOKEN>
                                 <Param><TOKEN>$</TOKEN><QName>annotns</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>,</TOKEN>
                                 <Param><TOKEN>$</TOKEN><QName>aname</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN> 
<TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>xqdoc:annotation</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType>
<EnclosedExpr><TOKEN>{</TOKEN>
   <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>ns</QName><TOKEN>:=</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>annots</QName></VarRef><TOKEN>/</TOKEN><AxisStep><ReverseStep><ReverseAxis><TOKEN>ancestor</TOKEN><TOKEN>::</TOKEN></ReverseAxis><QName>xqdoc:xqdoc</QName></ReverseStep><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>xqdoc:namespaces</QName>
   <PredicateList/></AxisStep></RelativePathExpr></LetBinding></LetClause><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>prefixes</QName><TOKEN>:=</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>ns</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>xqdoc:namespace</QName><Predicate><TOKEN>[</TOKEN><ComparisonExpr><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>uri</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>=</TOKEN><VarRef><TOKEN>$</TOKEN><QName>annotns</QName></VarRef></ComparisonExpr><TOKEN>]</TOKEN></Predicate></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>prefix</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr></LetBinding></LetClause>
  <ReturnClause><TOKEN>return</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>annots</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>xqdoc:annotation</QName><Predicate><TOKEN>[</TOKEN><ComparisonExpr><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>=</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN><FLWORExpr><ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>p</QName> <TOKEN>in</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>prefixes</QName></VarRef></ForBinding></ForClause> <ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>concat</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>p</QName></VarRef><TOKEN>,</TOKEN><StringLiteral>':'</StringLiteral><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>aname</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr><TOKEN>)</TOKEN></ParenthesizedExpr></ComparisonExpr><TOKEN>]</TOKEN></Predicate></AxisStep></RelativePathExpr></ReturnClause></FLWORExpr>

<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>



(: @return map of functions and variables having annotations :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqd:annotation-map</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>xqdoc</QName></Param><TOKEN>)</TOKEN>
<EnclosedExpr><TOKEN>{</TOKEN>
  <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>ns</QName><TOKEN>:=</TOKEN><FunctionCall><QName>map:merge</QName><ArgumentList><TOKEN>(</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN>
           <Expr><FunctionCall><QName>map:entry</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>""</StringLiteral><TOKEN>,</TOKEN> <StringLiteral>"http://www.w3.org/2012/xquery"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN>
           <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>xqdoc</QName></VarRef><TOKEN>//</TOKEN><AxisStep><QName>xqdoc:namespace</QName><PredicateList/></AxisStep><TOKEN>!</TOKEN><FunctionCall><QName>map:entry</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>prefix</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>uri</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr></Expr>
           <TOKEN>)</TOKEN></ParenthesizedExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
  <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>f</QName><TOKEN>:=</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>xqdoc</QName></VarRef><TOKEN>//</TOKEN><AxisStep><QName>xqdoc:function</QName><Predicate><TOKEN>[</TOKEN><AxisStep><QName>xqdoc:annotations</QName><PredicateList/></AxisStep><TOKEN>]</TOKEN></Predicate></AxisStep><TOKEN>!</TOKEN>
                  <FunctionCall><QName>map:entry</QName><ArgumentList><TOKEN>(</TOKEN>
                        <StringConcatExpr><AxisStep><QName>xqdoc:name</QName> <PredicateList/></AxisStep><TOKEN>||</TOKEN> <StringLiteral>"#"</StringLiteral> <TOKEN>||</TOKEN> <AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>arity</QName></AbbrevForwardStep><PredicateList/></AxisStep></StringConcatExpr><TOKEN>,</TOKEN>
                        <FunctionCall><QName>xqd:annots</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><AxisStep><QName>xqdoc:annotations</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>xqdoc:annotation</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>ns</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
                   <TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr></LetBinding></LetClause>
   <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>v</QName><TOKEN>:=</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>xqdoc</QName></VarRef><TOKEN>//</TOKEN><AxisStep><QName>xqdoc:variable</QName><Predicate><TOKEN>[</TOKEN><AxisStep><QName>xqdoc:annotations</QName><PredicateList/></AxisStep><TOKEN>]</TOKEN></Predicate></AxisStep><TOKEN>!</TOKEN>
                 <FunctionCall><QName>map:entry</QName><ArgumentList><TOKEN>(</TOKEN>
                   <AxisStep><QName>xqdoc:name</QName> <PredicateList/></AxisStep><TOKEN>,</TOKEN>
                   <FunctionCall><QName>xqd:annots</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><AxisStep><QName>xqdoc:annotations</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>xqdoc:annotation</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>ns</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
                 <TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr></LetBinding></LetClause>
  <ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>map:merge</QName><ArgumentList><TOKEN>(</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN><Expr><VarRef><TOKEN>$</TOKEN><QName>f</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>v</QName></VarRef></Expr><TOKEN>)</TOKEN></ParenthesizedExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr>
         
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(: return annotation map for a name 
 :  map{ $ns: map{
 :        $aname: $values
 :      }
 : }
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqd:annots</QName><TOKEN>(</TOKEN>
 <ParamList><Param><TOKEN>$</TOKEN><QName>annots</QName> <TypeDeclaration><TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>xqdoc:annotation</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType></TypeDeclaration></Param><TOKEN>,</TOKEN>
 <Param><TOKEN>$</TOKEN><QName>ns</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param></ParamList>
<TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType>
<EnclosedExpr><TOKEN>{</TOKEN>
 <FunctionCall><QName>map:merge</QName><ArgumentList><TOKEN>(</TOKEN> 
 <FLWORExpr><ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>a</QName> <TOKEN>in</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>annots</QName></VarRef></ForBinding></ForClause>
 <GroupByClause><TOKEN>group</TOKEN> <TOKEN>by</TOKEN> <GroupingSpec><GroupingVariable><TOKEN>$</TOKEN><QName>prefix</QName></GroupingVariable><TOKEN>:=</TOKEN><FunctionCall><QName>substring-before</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>a</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>,</TOKEN><StringLiteral>":"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></GroupingSpec></GroupByClause>
 <ReturnClause><TOKEN>return</TOKEN> <FLWORExpr><ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>p</QName> <TOKEN>in</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>prefix</QName></VarRef></ForBinding></ForClause>
                  <ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>map:entry</QName><ArgumentList><TOKEN>(</TOKEN>
                     <PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>ns</QName></VarRef><Lookup><TOKEN>?</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>p</QName></VarRef><TOKEN>)</TOKEN></ParenthesizedExpr></Lookup></PostfixExpr><TOKEN>,</TOKEN>
                     <FunctionCall><QName>map:merge</QName><ArgumentList><TOKEN>(</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN>
                     <FLWORExpr><ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>x</QName> <TOKEN>in</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>a</QName></VarRef></ForBinding></ForClause>
                     <GroupByClause><TOKEN>group</TOKEN> <TOKEN>by</TOKEN> <GroupingSpec><GroupingVariable><TOKEN>$</TOKEN><QName>aname</QName></GroupingVariable><TOKEN>:=</TOKEN><IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><FunctionCall><QName>contains</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>x</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>,</TOKEN><StringLiteral>":"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN> <TOKEN>then</TOKEN> <FunctionCall><QName>substring-after</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>x</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>,</TOKEN><StringLiteral>":"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall> <TOKEN>else</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>x</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep>
                     <PredicateList/></AxisStep></RelativePathExpr></IfExpr></GroupingSpec></GroupByClause><ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>map:entry</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>aname</QName></VarRef><TOKEN>,</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>x</QName></VarRef><TOKEN>/</TOKEN><AxisStep><Wildcard>*</Wildcard><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr>
                  <TOKEN>)</TOKEN></ParenthesizedExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
                <TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr></ReturnClause></FLWORExpr>
<TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN></Prolog></LibraryModule>        <EOF/></XQuery>