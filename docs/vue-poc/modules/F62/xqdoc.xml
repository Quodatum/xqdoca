<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2019-06-06T22:42:08.709+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>quodatum.data.mimetype</xqdoc:uri><xqdoc:name>mimetype.xqm</xqdoc:name><xqdoc:comment><xqdoc:description>fetch function for given data type "text","xml","binary"</xqdoc:description><xqdoc:return>function()</xqdoc:return><xqdoc:custom tag="__source">lib/mimetype.xqm</xqdoc:custom></xqdoc:comment><xqdoc:body>xquery version "3.1";
module namespace mt = 'quodatum.data.mimetype';
declare namespace MediaType='java:org.basex.util.http.MediaType';
declare %basex:lazy variable $mt:lines:="media-types.properties"=&gt;fn:unparsed-text-lines();
(:~ 
 : fetch function for given data type "text","xml","binary"
: @return function()
:)
declare function mt:fetch-fn($treat as xs:string)
as function(*)
{
     switch  ($treat) 
     case "text"
          return fetch:text(?)
     case "xml" 
          return fetch:text(?)
     default 
          return fetch:binary(?)
};

(:~ get mediatype and dataformat as map
 : @return e.g. {type:"application/xml","treat-as":"xml"}
 :)
declare function mt:type($filepath as xs:string)
as map(*)
{
let $f:="a." || mt:base-ext($filepath)
let $a:=MediaType:get($f)
let $type:= if($a="application/sparql-query") then 
                 "text"
            else if(MediaType:isXML($a)) then 
                 "xml"
            else if(MediaType:isText($a) or MediaType:isXQuery($a))then
                "text"
            else
               "binary"
 return map{"type": MediaType:type($a) ,
            "treat-as": $type}
};


(:~ treat as extension
:)
declare function mt:base-ext($filepath as xs:string)
{
  let $ext:=file:name($filepath)=&gt;substring-after(".")
  let $types:=map{"vue":".html","sch":".xml"}
  return ($types($ext),$ext)=&gt;head()
};

(:~
: map of keys:all mimetypes, values: extensions  as array
:)
declare function mt:types(){
fold-left($mt:lines,
         map{},
         function($acc,$line){
              let $p:=tokenize ($line,"=")
              return map:merge(($acc,map{tail($p):head($p)}),map { 'duplicates': 'combine' })
             })
 }; </xqdoc:body></xqdoc:module><xqdoc:imports/><xqdoc:namespaces><xqdoc:namespace prefix="mt" uri="quodatum.data.mimetype"/><xqdoc:namespace prefix="MediaType" uri="java:org.basex.util.http.MediaType"/><xqdoc:namespace prefix="basex" uri="http://basex.org"/></xqdoc:namespaces><xqdoc:variables><xqdoc:variable><xqdoc:name>mt:lines</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="basex:lazy"/></xqdoc:annotations><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:variable></xqdoc:variables><xqdoc:functions><xqdoc:function arity="1"><xqdoc:name>mt:fetch-fn</xqdoc:name><xqdoc:signature>declare function mt:fetch-fn($treat as xs:string) as function(*)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>treat</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>function(*)</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/fetch</xqdoc:uri><xqdoc:name>text</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/fetch</xqdoc:uri><xqdoc:name>text</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/fetch</xqdoc:uri><xqdoc:name>binary</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>$</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function mt:fetch-fn($treat as xs:string)
as function(*)
{
     switch  ($treat) 
     case "text"
          return fetch:text(?)
     case "xml" 
          return fetch:text(?)
     default 
          return fetch:binary(?)
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>get mediatype and dataformat as map</xqdoc:description><xqdoc:return>e.g. {type:"application/xml","treat-as":"xml"}</xqdoc:return></xqdoc:comment><xqdoc:name>mt:type</xqdoc:name><xqdoc:signature>declare function mt:type($filepath as xs:string) as map(*)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>filepath</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>map(*)</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>quodatum.data.mimetype</xqdoc:uri><xqdoc:name>base-ext</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>java:org.basex.util.http.MediaType</xqdoc:uri><xqdoc:name>get</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>java:org.basex.util.http.MediaType</xqdoc:uri><xqdoc:name>isXML</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>java:org.basex.util.http.MediaType</xqdoc:uri><xqdoc:name>isText</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>java:org.basex.util.http.MediaType</xqdoc:uri><xqdoc:name>isXQuery</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>java:org.basex.util.http.MediaType</xqdoc:uri><xqdoc:name>type</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>filepath</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>f</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>a</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>a</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>a</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>a</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>a</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>type</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function mt:type($filepath as xs:string)
as map(*)
{
let $f:="a." || mt:base-ext($filepath)
let $a:=MediaType:get($f)
let $type:= if($a="application/sparql-query") then 
                 "text"
            else if(MediaType:isXML($a)) then 
                 "xml"
            else if(MediaType:isText($a) or MediaType:isXQuery($a))then
                "text"
            else
               "binary"
 return map{"type": MediaType:type($a) ,
            "treat-as": $type}
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>treat as extension</xqdoc:description></xqdoc:comment><xqdoc:name>mt:base-ext</xqdoc:name><xqdoc:signature>declare function mt:base-ext($filepath as xs:string) as item()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>filepath</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://expath.org/ns/file</xqdoc:uri><xqdoc:name>name</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="4"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>substring-after</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="3"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>head</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>filepath</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>types</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>ext</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>ext</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function mt:base-ext($filepath as xs:string)
{
  let $ext:=file:name($filepath)=&gt;substring-after(".")
  let $types:=map{"vue":".html","sch":".xml"}
  return ($types($ext),$ext)=&gt;head()
}</xqdoc:body></xqdoc:function><xqdoc:function arity="0"><xqdoc:comment><xqdoc:description>map of keys:all mimetypes, values: extensions  as array</xqdoc:description></xqdoc:comment><xqdoc:name>mt:types</xqdoc:name><xqdoc:signature>declare function mt:types() as item()*</xqdoc:signature><xqdoc:return><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="3"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>fold-left</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>tokenize</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://www.w3.org/2005/xpath-functions/map</xqdoc:uri><xqdoc:name>merge</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>tail</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>head</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>quodatum.data.mimetype</xqdoc:uri><xqdoc:name>lines</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>line</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>acc</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>p</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>p</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function mt:types(){
fold-left($mt:lines,
         map{},
         function($acc,$line){
              let $p:=tokenize ($line,"=")
              return map:merge(($acc,map{tail($p):head($p)}),map { 'duplicates': 'combine' })
             })
 }</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>