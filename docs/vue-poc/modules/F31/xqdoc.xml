<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2019-05-29T22:37:23.991+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="main"><xqdoc:uri>tx-newapp.xq</xqdoc:uri><xqdoc:comment><xqdoc:description>create new app</xqdoc:description><xqdoc:author>andy bunce</xqdoc:author><xqdoc:since>july 2018</xqdoc:since></xqdoc:comment><xqdoc:body>(:~ 
: create new app
: @author andy bunce
: @since july 2018
:)

(:~ 
 : name of the app to create
 : @default myapp
 :)
declare variable $name as xs:string  external :="myapp";


(:~
: generate new app code with given name
:)
declare function local:new($name as xs:string)
as xs:base64Binary
{
    let $archive:=file:read-binary(fn:resolve-uri('./data/vuetif.zip'))
   let $contents := archive:extract-binary($archive)
   let $entries:= archive:entries($archive)
   (: update paths :)
   let $entries:=$entries!fn:replace(.,'vuetif',$name)
   let $contents:=$contents!local:update-extract(.,'[Vv]uetif',$name)

   return archive:create($entries,$contents)
};

(:~ 
 : test for text
 : @see http://stackoverflow.com/questions/2644938/how-to-tell-binary-from-text-files-in-linux
 :) 
declare function local:is-text($b as xs:base64Binary )
as xs:boolean{
    fn:empty(bin:find($b, 0,bin:hex("00")))
};

(:~ 
 : if context is text replace string else return unchanged
 :) 
declare function local:update-extract($extract as xs:base64Binary,
                                $from as xs:string,
                                $to as xs:string )
as xs:base64Binary{
  if(local:is-text($extract))
  then try{
  (: escape chars etc :)
    let $t:=convert:binary-to-string($extract)
    let $t:=fn:replace($t,$from,$to)
    return convert:string-to-base64($t)
    } catch * {
    $extract
    }
  else 
    $extract
};
 
update:output(&lt;json type="object"&gt;&lt;msg&gt; { $name }.&lt;/msg&gt;&lt;/json&gt;)  </xqdoc:body></xqdoc:module><xqdoc:imports/><xqdoc:namespaces><xqdoc:namespace prefix="local" uri="http://www.w3.org/2005/xquery-local-functions"/><xqdoc:namespace prefix="local" uri="http://www.w3.org/2005/xquery-local-functions"/></xqdoc:namespaces><xqdoc:variables><xqdoc:variable><xqdoc:name>name</xqdoc:name><xqdoc:comment><xqdoc:description>name of the app to create</xqdoc:description><xqdoc:custom tag="default">myapp</xqdoc:custom></xqdoc:comment><xqdoc:type>xs:string</xqdoc:type></xqdoc:variable></xqdoc:variables><xqdoc:functions><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>generate new app code with given name</xqdoc:description></xqdoc:comment><xqdoc:name>local:new</xqdoc:name><xqdoc:signature>declare function local:new($name as xs:string) as xs:base64Binary</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://expath.org/ns/file</xqdoc:uri><xqdoc:name>read-binary</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>resolve-uri</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/archive</xqdoc:uri><xqdoc:name>extract-binary</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/archive</xqdoc:uri><xqdoc:name>entries</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="3"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>replace</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="3"><xqdoc:uri>http://www.w3.org/2005/xquery-local-functions</xqdoc:uri><xqdoc:name>update-extract</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://basex.org/modules/archive</xqdoc:uri><xqdoc:name>create</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>archive</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>archive</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>entries</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>name</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>contents</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>name</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>entries</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>contents</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function local:new($name as xs:string)
as xs:base64Binary
{
    let $archive:=file:read-binary(fn:resolve-uri('./data/vuetif.zip'))
   let $contents := archive:extract-binary($archive)
   let $entries:= archive:entries($archive)
   (: update paths :)
   let $entries:=$entries!fn:replace(.,'vuetif',$name)
   let $contents:=$contents!local:update-extract(.,'[Vv]uetif',$name)

   return archive:create($entries,$contents)
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>test for text</xqdoc:description><xqdoc:see>http://stackoverflow.com/questions/2644938/how-to-tell-binary-from-text-files-in-linux</xqdoc:see></xqdoc:comment><xqdoc:name>local:is-text</xqdoc:name><xqdoc:signature>declare function local:is-text($b as xs:base64Binary) as xs:boolean</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>b</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>empty</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="3"><xqdoc:uri>http://expath.org/ns/binary</xqdoc:uri><xqdoc:name>find</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://expath.org/ns/binary</xqdoc:uri><xqdoc:name>hex</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>b</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function local:is-text($b as xs:base64Binary )
as xs:boolean{
    fn:empty(bin:find($b, 0,bin:hex("00")))
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>if context is text replace string else return unchanged</xqdoc:description></xqdoc:comment><xqdoc:name>local:update-extract</xqdoc:name><xqdoc:signature>declare function local:update-extract($extract as xs:base64Binary, $from as xs:string, $to as xs:string) as xs:base64Binary</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>extract</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>from</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>to</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xquery-local-functions</xqdoc:uri><xqdoc:name>is-text</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/convert</xqdoc:uri><xqdoc:name>binary-to-string</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="3"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>replace</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/convert</xqdoc:uri><xqdoc:name>string-to-base64</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>extract</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>extract</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>t</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>from</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>$</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>t</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>extract</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>extract</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function local:update-extract($extract as xs:base64Binary,
                                $from as xs:string,
                                $to as xs:string )
as xs:base64Binary{
  if(local:is-text($extract))
  then try{
  (: escape chars etc :)
    let $t:=convert:binary-to-string($extract)
    let $t:=fn:replace($t,$from,$to)
    return convert:string-to-base64($t)
    } catch * {
    $extract
    }
  else 
    $extract
}</xqdoc:body></xqdoc:function><xqdoc:function arity="0"><xqdoc:comment><xqdoc:description>pseudo main function</xqdoc:description></xqdoc:comment><xqdoc:name>local:xqDoc-main</xqdoc:name><xqdoc:signature>local:xqDoc-main()</xqdoc:signature><xqdoc:body>update:output(&lt;json type="object"&gt;&lt;msg&gt; { $name }.&lt;/msg&gt;&lt;/json&gt;)</xqdoc:body><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>name</xqdoc:name></xqdoc:ref-variable><xqdoc:body>update:output(&lt;json type="object"&gt;&lt;msg&gt; { $name }.&lt;/msg&gt;&lt;/json&gt;)</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>