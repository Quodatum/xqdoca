<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2019-06-05T22:41:22.335+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>webutils.xqm</xqdoc:name><xqdoc:comment><xqdoc:description>web utils</xqdoc:description><xqdoc:author>andy bunce</xqdoc:author><xqdoc:since>oct 2012</xqdoc:since><xqdoc:custom tag="__source">lib/webutils.xqm</xqdoc:custom></xqdoc:comment><xqdoc:body>(:~ 
: web utils
: @author andy bunce
: @since oct 2012
:)

module namespace qweb = 'quodatum.web.utils4';
declare default function namespace 'quodatum.web.utils4'; 
import module namespace request = "http://exquery.org/ns/request";
declare namespace rest = 'http://exquery.org/ns/restxq';

(:~ map of available dice parameters :)
declare function dice(){
    let $fld:=function($n){
                        request:parameter($n)!map:entry($n,request:parameter($n))
                           }
    return map:merge(("start","limit","sort","fields")!$fld(.))
};

declare function status($code,$reason){
   &lt;rest:response&gt;            
       &lt;http:response status="{$code}" reason="{$reason}"/&gt;
   &lt;/rest:response&gt;
};

(:~
: REST created http://restpatterns.org/HTTP_Status_Codes/401_-_Unauthorized
:)
declare function http-auth($auth-scheme,$response){
   (
   &lt;rest:response&gt;            
       &lt;http:response status="401" &gt;
	       &lt;http:header name="WWW-Authenticate" value="{$auth-scheme}"/&gt;
	   &lt;/http:response&gt;
   &lt;/rest:response&gt;,
   $response
   )
};

(:~
: REST created http://restpatterns.org/HTTP_Status_Codes/201_-_Created
:)
declare function http-created($location,$response){
   (
   &lt;rest:response&gt;            
       &lt;http:response status="201" &gt;
	       &lt;http:header name="Location" value="{$location}"/&gt;
	   &lt;/http:response&gt;
   &lt;/rest:response&gt;,
   $response
   )
};


(:~ CORS header with download option :) 
declare function headers($attachment,$response){
(&lt;rest:response&gt;
    &lt;http:response&gt;
        &lt;http:header name="Access-Control-Allow-Origin" value="*"/&gt;
    {if($attachment)
    then &lt;http:header name="Content-Disposition" value='attachment;filename="{$attachment}"'/&gt;
    else ()}
    &lt;/http:response&gt;
&lt;/rest:response&gt;, $response)
};

(:~ download as zip file :) 
declare function zip-download($zipname,$data){
    (download-response("raw",$zipname), $data)
};

(:~ create cookie :) 
declare function cookie($name,$value){
   let $val:=``[`{ $name }`=`{ $value }`]``
   return &lt;http:header name="Set-Cookie" value="{ $val }"/&gt; 
};

(:~ headers for download  :) 
declare function method($method as xs:string){
&lt;rest:response&gt;
    &lt;output:serialization-parameters&gt;
        &lt;output:method value="{$method}"/&gt;
    &lt;/output:serialization-parameters&gt;
&lt;/rest:response&gt;
};

(:~ headers for download  :) 
declare function download-response($method,$filename){

&lt;rest:response&gt;
    &lt;output:serialization-parameters&gt;
        &lt;output:method value="{$method}"/&gt;
    &lt;/output:serialization-parameters&gt;
   &lt;http:response&gt;
       &lt;http:header name="Content-Disposition" value='attachment;filename="{$filename}"'/&gt; 
    &lt;/http:response&gt;
&lt;/rest:response&gt;
};

(:~
 : transform xml to json serialable xml driven by @type="array" and convention.
 : all namespaces are removed
 :)
declare function fixup($n){fixup($n,"object")}; 
declare function fixup($n,$type)
{
let $n:=strip-ns($n)
let $a:=&lt;json type="{$type}"&gt;{$n/*}&lt;/json&gt;
return copy $c := $a
modify (
            (: for nodes with no @type and have children set @type="object" :)
            for $type in $c//*[fn:not(@type)and *]
            return insert node attribute {'type'}{'object'} into $type,
            (: for node with @type="array" and children rename children to "_" :)
            for $n in $c//*[@type="array"]/*
            return rename node $n as "_"
        )
return $c
};

declare function strip-ns($n as node()) as node() {
  if($n instance of element()) then (
    element { fn:local-name($n) } {
      $n/@*,
      $n/node()/strip-ns(.)
    }
  ) else if($n instance of document-node()) then (
    document { $n/node() }
  ) else (
    $n
  )
};

(:~ todo use basex mime :)
declare function svg-response(){
    web:response-header(map { 'media-type': "image/svg+xml",
                              'method':"xml"})
};
 
declare function json-response(){
    web:response-header(map { 'media-type': "application/json",
                              'method':"json"})
};</xqdoc:body></xqdoc:module><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>http://exquery.org/ns/request</xqdoc:uri></xqdoc:import></xqdoc:imports><xqdoc:namespaces><xqdoc:namespace prefix="qweb" uri="quodatum.web.utils4"/><xqdoc:namespace prefix="request" uri="http://exquery.org/ns/request"/><xqdoc:namespace prefix="rest" uri="http://exquery.org/ns/restxq"/></xqdoc:namespaces><xqdoc:variables/><xqdoc:functions><xqdoc:function arity="0"><xqdoc:comment><xqdoc:description>map of available dice parameters</xqdoc:description></xqdoc:comment><xqdoc:name>dice</xqdoc:name><xqdoc:signature>declare function dice() as item()*</xqdoc:signature><xqdoc:return><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://exquery.org/ns/request</xqdoc:uri><xqdoc:name>parameter</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://www.w3.org/2005/xpath-functions/map</xqdoc:uri><xqdoc:name>entry</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://exquery.org/ns/request</xqdoc:uri><xqdoc:name>parameter</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions/map</xqdoc:uri><xqdoc:name>merge</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>n</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>n</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>n</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>fld</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function dice(){
    let $fld:=function($n){
                        request:parameter($n)!map:entry($n,request:parameter($n))
                           }
    return map:merge(("start","limit","sort","fields")!$fld(.))
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>status</xqdoc:name><xqdoc:signature>declare function status($code as item()*, $reason as item()*) as item()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>code</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>reason</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element()</xqdoc:type></xqdoc:return><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>code</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>reason</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function status($code,$reason){
   &lt;rest:response&gt;            
       &lt;http:response status="{$code}" reason="{$reason}"/&gt;
   &lt;/rest:response&gt;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>REST created http://restpatterns.org/HTTP_Status_Codes/401_-_Unauthorized</xqdoc:description></xqdoc:comment><xqdoc:name>http-auth</xqdoc:name><xqdoc:signature>declare function http-auth($auth-scheme as item()*, $response as item()*) as item()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>auth-scheme</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>response</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:return><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>auth-scheme</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>response</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function http-auth($auth-scheme,$response){
   (
   &lt;rest:response&gt;            
       &lt;http:response status="401" &gt;
	       &lt;http:header name="WWW-Authenticate" value="{$auth-scheme}"/&gt;
	   &lt;/http:response&gt;
   &lt;/rest:response&gt;,
   $response
   )
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>REST created http://restpatterns.org/HTTP_Status_Codes/201_-_Created</xqdoc:description></xqdoc:comment><xqdoc:name>http-created</xqdoc:name><xqdoc:signature>declare function http-created($location as item()*, $response as item()*) as item()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>location</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>response</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:return><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>location</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>response</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function http-created($location,$response){
   (
   &lt;rest:response&gt;            
       &lt;http:response status="201" &gt;
	       &lt;http:header name="Location" value="{$location}"/&gt;
	   &lt;/http:response&gt;
   &lt;/rest:response&gt;,
   $response
   )
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>CORS header with download option</xqdoc:description></xqdoc:comment><xqdoc:name>headers</xqdoc:name><xqdoc:signature>declare function headers($attachment as item()*, $response as item()*) as item()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>attachment</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>response</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:return><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>attachment</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>attachment</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>response</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function headers($attachment,$response){
(&lt;rest:response&gt;
    &lt;http:response&gt;
        &lt;http:header name="Access-Control-Allow-Origin" value="*"/&gt;
    {if($attachment)
    then &lt;http:header name="Content-Disposition" value='attachment;filename="{$attachment}"'/&gt;
    else ()}
    &lt;/http:response&gt;
&lt;/rest:response&gt;, $response)
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>download as zip file</xqdoc:description></xqdoc:comment><xqdoc:name>zip-download</xqdoc:name><xqdoc:signature>declare function zip-download($zipname as item()*, $data as item()*) as item()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>zipname</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>data</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>download-response</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>zipname</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>data</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function zip-download($zipname,$data){
    (download-response("raw",$zipname), $data)
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>create cookie</xqdoc:description></xqdoc:comment><xqdoc:name>cookie</xqdoc:name><xqdoc:signature>declare function cookie($name as item()*, $value as item()*) as item()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>value</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:return><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>name</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>value</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>val</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function cookie($name,$value){
   let $val:=``[`{ $name }`=`{ $value }`]``
   return &lt;http:header name="Set-Cookie" value="{ $val }"/&gt; 
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>headers for download</xqdoc:description></xqdoc:comment><xqdoc:name>method</xqdoc:name><xqdoc:signature>declare function method($method as xs:string) as item()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>method</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element()</xqdoc:type></xqdoc:return><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>method</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function method($method as xs:string){
&lt;rest:response&gt;
    &lt;output:serialization-parameters&gt;
        &lt;output:method value="{$method}"/&gt;
    &lt;/output:serialization-parameters&gt;
&lt;/rest:response&gt;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>headers for download</xqdoc:description></xqdoc:comment><xqdoc:name>download-response</xqdoc:name><xqdoc:signature>declare function download-response($method as item()*, $filename as item()*) as item()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>method</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>filename</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element()</xqdoc:type></xqdoc:return><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>method</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>filename</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function download-response($method,$filename){

&lt;rest:response&gt;
    &lt;output:serialization-parameters&gt;
        &lt;output:method value="{$method}"/&gt;
    &lt;/output:serialization-parameters&gt;
   &lt;http:response&gt;
       &lt;http:header name="Content-Disposition" value='attachment;filename="{$filename}"'/&gt; 
    &lt;/http:response&gt;
&lt;/rest:response&gt;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>transform xml to json serialable xml driven by @type="array" and convention.
all namespaces are removed</xqdoc:description></xqdoc:comment><xqdoc:name>fixup</xqdoc:name><xqdoc:signature>declare function fixup($n as item()*) as item()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>n</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>fixup</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>n</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function fixup($n){fixup($n,"object")}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>fixup</xqdoc:name><xqdoc:signature>declare function fixup($n as item()*, $type as item()*) as item()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>n</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>type</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>strip-ns</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>not</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>n</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>type</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>n</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>a</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>c</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>type</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>c</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>n</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>c</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function fixup($n,$type)
{
let $n:=strip-ns($n)
let $a:=&lt;json type="{$type}"&gt;{$n/*}&lt;/json&gt;
return copy $c := $a
modify (
            (: for nodes with no @type and have children set @type="object" :)
            for $type in $c//*[fn:not(@type)and *]
            return insert node attribute {'type'}{'object'} into $type,
            (: for node with @type="array" and children rename children to "_" :)
            for $n in $c//*[@type="array"]/*
            return rename node $n as "_"
        )
return $c
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:name>strip-ns</xqdoc:name><xqdoc:signature>declare function strip-ns($n as node()) as node()</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>n</xqdoc:name><xqdoc:type>node()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>node()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>local-name</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>strip-ns</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>n</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>n</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>n</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>n</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>n</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>n</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum.web.utils4</xqdoc:uri><xqdoc:name>n</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function strip-ns($n as node()) as node() {
  if($n instance of element()) then (
    element { fn:local-name($n) } {
      $n/@*,
      $n/node()/strip-ns(.)
    }
  ) else if($n instance of document-node()) then (
    document { $n/node() }
  ) else (
    $n
  )
}</xqdoc:body></xqdoc:function><xqdoc:function arity="0"><xqdoc:comment><xqdoc:description>todo use basex mime</xqdoc:description></xqdoc:comment><xqdoc:name>svg-response</xqdoc:name><xqdoc:signature>declare function svg-response() as item()*</xqdoc:signature><xqdoc:return><xqdoc:type>element()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/web</xqdoc:uri><xqdoc:name>response-header</xqdoc:name></xqdoc:invoked><xqdoc:body>function svg-response(){
    web:response-header(map { 'media-type': "image/svg+xml",
                              'method':"xml"})
}</xqdoc:body></xqdoc:function><xqdoc:function arity="0"><xqdoc:name>json-response</xqdoc:name><xqdoc:signature>declare function json-response() as item()*</xqdoc:signature><xqdoc:return><xqdoc:type>element()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/web</xqdoc:uri><xqdoc:name>response-header</xqdoc:name></xqdoc:invoked><xqdoc:body>function json-response(){
    web:response-header(map { 'media-type': "application/json",
                              'method':"json"})
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>