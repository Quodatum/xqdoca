<XQuery>(:~
 : support tree view
 : @author apb
 : @exampletag some value
 :)
<LibraryModule><ModuleDecl><TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>j</NCName> <TOKEN>=</TOKEN> <StringLiteral>'quodatum.test.components'</StringLiteral><TOKEN>;</TOKEN></ModuleDecl>

(:~
 : @return sequence of json arrary items for each item 
 :)
<Prolog><AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>j:tax</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>items</QName></Param><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>_</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType>
<EnclosedExpr><TOKEN>{</TOKEN>
 <FLWORExpr><ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>a</QName> <TOKEN>in</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>items</QName></VarRef></ForBinding></ForClause>
<ReturnClause><TOKEN>return</TOKEN> <DirElemConstructor><TOKEN>&lt;</TOKEN><QName>_</QName><DirAttributeList><S> </S><QName>type</QName><TOKEN>=</TOKEN><DirAttributeValue><TOKEN>"</TOKEN><QuotAttrContentChar>o</QuotAttrContentChar><QuotAttrContentChar>b</QuotAttrContentChar><QuotAttrContentChar>j</QuotAttrContentChar><QuotAttrContentChar>e</QuotAttrContentChar><QuotAttrContentChar>c</QuotAttrContentChar><QuotAttrContentChar>t</QuotAttrContentChar><TOKEN>"</TOKEN></DirAttributeValue></DirAttributeList><TOKEN>&gt;</TOKEN><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>id</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>a</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>id</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr><TOKEN>&lt;/</TOKEN><QName>id</QName><TOKEN>&gt;</TOKEN></DirElemConstructor><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>label</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>a</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>label</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr><TOKEN>&lt;/</TOKEN><QName>label</QName><TOKEN>&gt;</TOKEN></DirElemConstructor><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><EnclosedExpr><TOKEN>{</TOKEN><IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>a</QName></VarRef><TOKEN>/</TOKEN><AxisStep><TOKEN>item</TOKEN><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN><TOKEN>then</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN>
       <Expr><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>children</QName><DirAttributeList><S> </S><QName>type</QName><TOKEN>=</TOKEN><DirAttributeValue><TOKEN>"</TOKEN><QuotAttrContentChar>a</QuotAttrContentChar><QuotAttrContentChar>r</QuotAttrContentChar><QuotAttrContentChar>r</QuotAttrContentChar><QuotAttrContentChar>a</QuotAttrContentChar><QuotAttrContentChar>y</QuotAttrContentChar><TOKEN>"</TOKEN></DirAttributeValue></DirAttributeList><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN><FunctionCall><QName>j:tax</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>a</QName></VarRef><TOKEN>/</TOKEN><AxisStep><TOKEN>item</TOKEN><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>}</TOKEN></EnclosedExpr><TOKEN>&lt;/</TOKEN><QName>children</QName><TOKEN>&gt;</TOKEN></DirElemConstructor>
       <TOKEN>,</TOKEN><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>icon</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><TOKEN>&lt;/</TOKEN><QName>icon</QName><TOKEN>&gt;</TOKEN></DirElemConstructor></Expr>
      <TOKEN>)</TOKEN></ParenthesizedExpr> <TOKEN>else</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN>
        <DirElemConstructor><TOKEN>&lt;</TOKEN><QName>icon</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><ElementContentChar>f</ElementContentChar><ElementContentChar>a</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar>f</ElementContentChar><ElementContentChar>a</ElementContentChar><ElementContentChar>-</ElementContentChar><ElementContentChar>t</ElementContentChar><ElementContentChar>a</ElementContentChar><ElementContentChar>g</ElementContentChar><TOKEN>&lt;/</TOKEN><QName>icon</QName><TOKEN>&gt;</TOKEN></DirElemConstructor>
      <TOKEN>)</TOKEN></ParenthesizedExpr></IfExpr><TOKEN>}</TOKEN></EnclosedExpr><ElementContentChar>
</ElementContentChar><TOKEN>&lt;/</TOKEN><QName>_</QName><TOKEN>&gt;</TOKEN></DirElemConstructor></ReturnClause></FLWORExpr> 
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>



(:~
 :  tree
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN>  
<Annotation><TOKEN>%</TOKEN><QName>rest:GET</QName></Annotation> <Annotation><TOKEN>%</TOKEN><QName>rest:path</QName><TOKEN>(</TOKEN><StringLiteral>"/vue-poc/api/components/tree"</StringLiteral><TOKEN>)</TOKEN></Annotation>
<Annotation><TOKEN>%</TOKEN><QName>output:method</QName><TOKEN>(</TOKEN><StringLiteral>"json"</StringLiteral><TOKEN>)</TOKEN></Annotation>   
<FunctionDecl><TOKEN>function</TOKEN> <QName>j:tree</QName><TOKEN>(</TOKEN><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>json</QName><TOKEN>)</TOKEN></ElementTest>
<EnclosedExpr><TOKEN>{</TOKEN>
<FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>d</QName><TOKEN>:=</TOKEN><RelativePathExpr><FunctionCall><QName>doc</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>resolve-uri</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"balisage-taxonomy.xml"</StringLiteral><TOKEN>,</TOKEN><FunctionCall><QName>static-base-uri</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>/</TOKEN><AxisStep><QName>tax</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><TOKEN>item</TOKEN>
<PredicateList/></AxisStep></RelativePathExpr></LetBinding></LetClause><ReturnClause><TOKEN>return</TOKEN>
<DirElemConstructor><TOKEN>&lt;</TOKEN><QName>json</QName><DirAttributeList><S> </S><QName>type</QName><TOKEN>=</TOKEN><DirAttributeValue><TOKEN>"</TOKEN><QuotAttrContentChar>a</QuotAttrContentChar><QuotAttrContentChar>r</QuotAttrContentChar><QuotAttrContentChar>r</QuotAttrContentChar><QuotAttrContentChar>a</QuotAttrContentChar><QuotAttrContentChar>y</QuotAttrContentChar><TOKEN>"</TOKEN></DirAttributeValue></DirAttributeList><TOKEN>&gt;</TOKEN><ElementContentChar>
</ElementContentChar><EnclosedExpr><TOKEN>{</TOKEN><FunctionCall><QName>j:tax</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>d</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>}</TOKEN></EnclosedExpr><ElementContentChar>
</ElementContentChar><TOKEN>&lt;/</TOKEN><QName>json</QName><TOKEN>&gt;</TOKEN></DirElemConstructor></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN></Prolog></LibraryModule>

<EOF/></XQuery>