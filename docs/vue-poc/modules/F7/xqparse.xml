<XQuery>(:~
 : vue-poc thumbnail api.
 :
 : @author Andy Bunce may-2017
 :)
<LibraryModule><ModuleDecl><TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>vue-api</NCName> <TOKEN>=</TOKEN> <StringLiteral>'quodatum:vue.api.eval'</StringLiteral><TOKEN>;</TOKEN></ModuleDecl>
<Prolog><ModuleImport><TOKEN>import</TOKEN> <TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>rest</NCName> <TOKEN>=</TOKEN> <StringLiteral>"http://exquery.org/ns/restxq"</StringLiteral></ModuleImport><TOKEN>;</TOKEN>
<ModuleImport><TOKEN>import</TOKEN> <TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>util</NCName> <TOKEN>=</TOKEN> <StringLiteral>'vue-poc/util'</StringLiteral> <TOKEN>at</TOKEN> <StringLiteral>"../../lib/util.xqm"</StringLiteral></ModuleImport><TOKEN>;</TOKEN>
<ModuleImport><TOKEN>import</TOKEN> <TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>ufile</NCName> <TOKEN>=</TOKEN> <StringLiteral>'vue-poc/file'</StringLiteral> <TOKEN>at</TOKEN> <StringLiteral>"../../lib/file.xqm"</StringLiteral></ModuleImport><TOKEN>;</TOKEN>

<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>vue-api:db</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration><TOKEN>:=</TOKEN><StringLiteral>"vue-poc"</StringLiteral></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>vue-api:id</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>last-id</QName><TOKEN>)</TOKEN></ElementTest></TypeDeclaration><TOKEN>:=</TOKEN><RelativePathExpr><FunctionCall><QName>db:open</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"vue-poc"</StringLiteral><TOKEN>,</TOKEN><StringLiteral>"/state.xml"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>/</TOKEN><AxisStep><QName>state</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>last-id</QName><PredicateList/></AxisStep></RelativePathExpr></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~
 : eval
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN>
<Annotation><TOKEN>%</TOKEN><QName>updating</QName></Annotation>
<Annotation><TOKEN>%</TOKEN><QName>rest:POST</QName></Annotation> <Annotation><TOKEN>%</TOKEN><QName>rest:path</QName><TOKEN>(</TOKEN><StringLiteral>"/vue-poc/api/eval/execute"</StringLiteral><TOKEN>)</TOKEN></Annotation>
<Annotation><TOKEN>%</TOKEN><QName>rest:form-param</QName><TOKEN>(</TOKEN><StringLiteral>"xq"</StringLiteral><TOKEN>,</TOKEN> <StringLiteral>"{$xq}"</StringLiteral><TOKEN>)</TOKEN></Annotation>
<Annotation><TOKEN>%</TOKEN><QName>output:method</QName><TOKEN>(</TOKEN><StringLiteral>"json"</StringLiteral><TOKEN>)</TOKEN></Annotation>   
<FunctionDecl><TOKEN>function</TOKEN> <QName>vue-api:eval</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>xq</QName></Param> <TOKEN>)</TOKEN>   
<EnclosedExpr><TOKEN>{</TOKEN>
 <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>r</QName><TOKEN>:=</TOKEN><FunctionCall><QName>util:query</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xq</QName></VarRef><TOKEN>,</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ParenthesizedExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
 <ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>vue-api:response</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>r</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xq</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~
 : return id and return
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN>
<Annotation><TOKEN>%</TOKEN><QName>updating</QName></Annotation> 
<FunctionDecl><TOKEN>function</TOKEN> <QName>vue-api:response</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>r</QName></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>query</QName></Param></ParamList><TOKEN>)</TOKEN>
<EnclosedExpr><TOKEN>{</TOKEN>
 <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>id</QName><TOKEN>:=</TOKEN><AdditiveExpr><VarRef><TOKEN>$</TOKEN><QName>vue-api:id</QName></VarRef> <TOKEN>+</TOKEN> <IntegerLiteral>1</IntegerLiteral></AdditiveExpr></LetBinding></LetClause>
 <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>out</QName><TOKEN>:=</TOKEN> <DirElemConstructor><TOKEN>&lt;</TOKEN><QName>json</QName><DirAttributeList><S>   </S><QName>type</QName><TOKEN>=</TOKEN><DirAttributeValue><TOKEN>"</TOKEN><QuotAttrContentChar>o</QuotAttrContentChar><QuotAttrContentChar>b</QuotAttrContentChar><QuotAttrContentChar>j</QuotAttrContentChar><QuotAttrContentChar>e</QuotAttrContentChar><QuotAttrContentChar>c</QuotAttrContentChar><QuotAttrContentChar>t</QuotAttrContentChar><TOKEN>"</TOKEN></DirAttributeValue><S> </S></DirAttributeList><TOKEN>&gt;</TOKEN><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>id</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>id</QName></VarRef> <TOKEN>}</TOKEN></EnclosedExpr><TOKEN>&lt;/</TOKEN><QName>id</QName><TOKEN>&gt;</TOKEN></DirElemConstructor><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>job</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>r</QName></VarRef> <TOKEN>}</TOKEN></EnclosedExpr><TOKEN>&lt;/</TOKEN><QName>job</QName><TOKEN>&gt;</TOKEN></DirElemConstructor><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>dateTime</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <FunctionCall><QName>current-dateTime</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall> <TOKEN>}</TOKEN></EnclosedExpr><TOKEN>&lt;/</TOKEN><QName>dateTime</QName><TOKEN>&gt;</TOKEN></DirElemConstructor><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><TOKEN>&lt;/</TOKEN><QName>json</QName><TOKEN>&gt;</TOKEN></DirElemConstructor></LetBinding></LetClause>
 <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>jobrun</QName><TOKEN>:=</TOKEN><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>jobrun</QName><DirAttributeList><S> </S><QName>id</QName><TOKEN>=</TOKEN><DirAttributeValue><TOKEN>"</TOKEN><EnclosedExpr><TOKEN>{</TOKEN><VarRef><TOKEN>$</TOKEN><QName>id</QName></VarRef><TOKEN>}</TOKEN></EnclosedExpr><TOKEN>"</TOKEN></DirAttributeValue><S> </S></DirAttributeList><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>out</QName></VarRef> <TOKEN>}</TOKEN></EnclosedExpr><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>query</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN><VarRef><TOKEN>$</TOKEN><QName>query</QName></VarRef><TOKEN>}</TOKEN></EnclosedExpr><TOKEN>&lt;/</TOKEN><QName>query</QName><TOKEN>&gt;</TOKEN></DirElemConstructor><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><TOKEN>&lt;/</TOKEN><QName>jobrun</QName><TOKEN>&gt;</TOKEN></DirElemConstructor></LetBinding></LetClause>
  <ReturnClause><TOKEN>return</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN>
           <Expr><ReplaceExpr><TOKEN>replace</TOKEN> <TOKEN>value</TOKEN> <TOKEN>of</TOKEN> <TOKEN>node</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>vue-api:id</QName></VarRef> <TOKEN>with</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>id</QName></VarRef></ReplaceExpr><TOKEN>,</TOKEN>
           <FunctionCall><QName>db:replace</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>vue-api:db</QName></VarRef><TOKEN>,</TOKEN><StringConcatExpr><StringLiteral>"/jobruns/"</StringLiteral> <TOKEN>||</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>id</QName></VarRef> <TOKEN>||</TOKEN> <StringLiteral>".xml"</StringLiteral></StringConcatExpr><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>jobrun</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN>
           <FunctionCall><QName>update:output</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>out</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></Expr>
          <TOKEN>)</TOKEN></ParenthesizedExpr></ReturnClause></FLWORExpr>          
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~
 : submit a simple job
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN>
<Annotation><TOKEN>%</TOKEN><QName>updating</QName></Annotation>
<Annotation><TOKEN>%</TOKEN><QName>rest:POST</QName></Annotation> <Annotation><TOKEN>%</TOKEN><QName>rest:path</QName><TOKEN>(</TOKEN><StringLiteral>"/vue-poc/api/eval/submit"</StringLiteral><TOKEN>)</TOKEN></Annotation>
<Annotation><TOKEN>%</TOKEN><QName>rest:form-param</QName><TOKEN>(</TOKEN><StringLiteral>"xq"</StringLiteral><TOKEN>,</TOKEN> <StringLiteral>"{$xq}"</StringLiteral><TOKEN>)</TOKEN></Annotation>
<Annotation><TOKEN>%</TOKEN><QName>output:method</QName><TOKEN>(</TOKEN><StringLiteral>"json"</StringLiteral><TOKEN>)</TOKEN></Annotation>   
<FunctionDecl><TOKEN>function</TOKEN> <QName>vue-api:submit</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>xq</QName></Param> <TOKEN>)</TOKEN>   
<EnclosedExpr><TOKEN>{</TOKEN>
 <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>bindings</QName><TOKEN>:=</TOKEN><MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN><TOKEN>}</TOKEN></MapConstructor></LetBinding></LetClause>
 <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>opts</QName><TOKEN>:=</TOKEN><MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN><MapConstructorEntry><StringLiteral>"cache"</StringLiteral><TOKEN>:</TOKEN><FunctionCall><QName>true</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></MapConstructorEntry><TOKEN>}</TOKEN></MapConstructor></LetBinding></LetClause>
 <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>r</QName><TOKEN>:=</TOKEN><FunctionCall><QName>jobs:eval</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xq</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>bindings</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>opts</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
 <ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>vue-api:response</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>r</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xq</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>


(:~
 : query plan
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN>
<Annotation><TOKEN>%</TOKEN><QName>rest:POST</QName></Annotation> <Annotation><TOKEN>%</TOKEN><QName>rest:path</QName><TOKEN>(</TOKEN><StringLiteral>"/vue-poc/api/eval/plan"</StringLiteral><TOKEN>)</TOKEN></Annotation>
<Annotation><TOKEN>%</TOKEN><QName>rest:form-param</QName><TOKEN>(</TOKEN><StringLiteral>"xq"</StringLiteral><TOKEN>,</TOKEN> <StringLiteral>"{$xq}"</StringLiteral><TOKEN>)</TOKEN></Annotation>
<Annotation><TOKEN>%</TOKEN><QName>output:method</QName><TOKEN>(</TOKEN><StringLiteral>"json"</StringLiteral><TOKEN>)</TOKEN></Annotation>   
<FunctionDecl><TOKEN>function</TOKEN> <QName>vue-api:plan</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>xq</QName></Param> <TOKEN>)</TOKEN>   
<EnclosedExpr><TOKEN>{</TOKEN>
 <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>x</QName><TOKEN>:=</TOKEN><FunctionCall><QName>fn:trace</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xq</QName></VarRef><TOKEN>,</TOKEN><StringLiteral>"task: "</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
 <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>r</QName><TOKEN>:=</TOKEN><FunctionCall><QName>xquery:parse</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xq</QName></VarRef><TOKEN>,</TOKEN><MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN><MapConstructorEntry><StringLiteral>"compile"</StringLiteral><TOKEN>:</TOKEN><FunctionCall><QName>true</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></MapConstructorEntry><TOKEN>,</TOKEN><MapConstructorEntry><StringLiteral>"plan"</StringLiteral><TOKEN>:</TOKEN><FunctionCall><QName>true</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></MapConstructorEntry><TOKEN>}</TOKEN></MapConstructor><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
 <ReturnClause><TOKEN>return</TOKEN> <DirElemConstructor><TOKEN>&lt;</TOKEN><QName>json</QName><DirAttributeList><S>   </S><QName>type</QName><TOKEN>=</TOKEN><DirAttributeValue><TOKEN>"</TOKEN><QuotAttrContentChar>o</QuotAttrContentChar><QuotAttrContentChar>b</QuotAttrContentChar><QuotAttrContentChar>j</QuotAttrContentChar><QuotAttrContentChar>e</QuotAttrContentChar><QuotAttrContentChar>c</QuotAttrContentChar><QuotAttrContentChar>t</QuotAttrContentChar><TOKEN>"</TOKEN></DirAttributeValue><S> </S></DirAttributeList><TOKEN>&gt;</TOKEN><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>result</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <FunctionCall><QName>serialize</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>r</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall> <TOKEN>}</TOKEN></EnclosedExpr><TOKEN>&lt;/</TOKEN><QName>result</QName><TOKEN>&gt;</TOKEN></DirElemConstructor><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><TOKEN>&lt;/</TOKEN><QName>json</QName><TOKEN>&gt;</TOKEN></DirElemConstructor></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>


(:~
 : submit a simple job from path 
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN>
<Annotation><TOKEN>%</TOKEN><QName>rest:POST</QName></Annotation> <Annotation><TOKEN>%</TOKEN><QName>rest:path</QName><TOKEN>(</TOKEN><StringLiteral>"/vue-poc/api/eval/invoke"</StringLiteral><TOKEN>)</TOKEN></Annotation>
<Annotation><TOKEN>%</TOKEN><QName>rest:form-param</QName><TOKEN>(</TOKEN><StringLiteral>"path"</StringLiteral><TOKEN>,</TOKEN> <StringLiteral>"{$path}"</StringLiteral><TOKEN>)</TOKEN></Annotation>
<Annotation><TOKEN>%</TOKEN><QName>output:method</QName><TOKEN>(</TOKEN><StringLiteral>"json"</StringLiteral><TOKEN>)</TOKEN></Annotation>
<Annotation><TOKEN>%</TOKEN><QName>updating</QName></Annotation>    
<FunctionDecl><TOKEN>function</TOKEN> <QName>vue-api:invoke</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>path</QName></Param> <TOKEN>)</TOKEN>   
<EnclosedExpr><TOKEN>{</TOKEN>
 <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>path</QName><TOKEN>:=</TOKEN><FunctionCall><QName>ufile:web</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>path</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
 <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>xq</QName><TOKEN>:=</TOKEN><FunctionCall><QName>fetch:text</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>path</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
 <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>bindings</QName><TOKEN>:=</TOKEN><MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN><TOKEN>}</TOKEN></MapConstructor></LetBinding></LetClause>
 <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>opts</QName><TOKEN>:=</TOKEN><MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN><MapConstructorEntry><StringLiteral>"base-uri"</StringLiteral><TOKEN>:</TOKEN><VarRef><TOKEN>$</TOKEN><QName>path</QName></VarRef></MapConstructorEntry><TOKEN>,</TOKEN><MapConstructorEntry><StringLiteral>"cache"</StringLiteral><TOKEN>:</TOKEN><FunctionCall><QName>true</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></MapConstructorEntry><TOKEN>}</TOKEN></MapConstructor></LetBinding></LetClause>
 <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>r</QName><TOKEN>:=</TOKEN><FunctionCall><QName>jobs:eval</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xq</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>bindings</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>opts</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>

 <ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>update:output</QName><ArgumentList><TOKEN>(</TOKEN>
 <DirElemConstructor><TOKEN>&lt;</TOKEN><QName>json</QName><DirAttributeList><S>   </S><QName>type</QName><TOKEN>=</TOKEN><DirAttributeValue><TOKEN>"</TOKEN><QuotAttrContentChar>o</QuotAttrContentChar><QuotAttrContentChar>b</QuotAttrContentChar><QuotAttrContentChar>j</QuotAttrContentChar><QuotAttrContentChar>e</QuotAttrContentChar><QuotAttrContentChar>c</QuotAttrContentChar><QuotAttrContentChar>t</QuotAttrContentChar><TOKEN>"</TOKEN></DirAttributeValue><S> </S></DirAttributeList><TOKEN>&gt;</TOKEN><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>job</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN><VarRef><TOKEN>$</TOKEN><QName>r</QName></VarRef><TOKEN>}</TOKEN></EnclosedExpr><TOKEN>&lt;/</TOKEN><QName>job</QName><TOKEN>&gt;</TOKEN></DirElemConstructor><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><TOKEN>&lt;/</TOKEN><QName>json</QName><TOKEN>&gt;</TOKEN></DirElemConstructor>
  <TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>
(:~
 : list available imports
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN>
<Annotation><TOKEN>%</TOKEN><QName>rest:GET</QName></Annotation> <Annotation><TOKEN>%</TOKEN><QName>rest:path</QName><TOKEN>(</TOKEN><StringLiteral>"/vue-poc/api/eval/imports"</StringLiteral><TOKEN>)</TOKEN></Annotation>
<Annotation><TOKEN>%</TOKEN><QName>output:method</QName><TOKEN>(</TOKEN><StringLiteral>"json"</StringLiteral><TOKEN>)</TOKEN></Annotation>   
<FunctionDecl><TOKEN>function</TOKEN> <QName>vue-api:imports</QName><TOKEN>(</TOKEN> <TOKEN>)</TOKEN>   
<EnclosedExpr><TOKEN>{</TOKEN>
<FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>n</QName><TOKEN>:=</TOKEN><StringLiteral>'import module namespace fw="quodatum:file.walker";'</StringLiteral></LetBinding></LetClause>
 <ReturnClause><TOKEN>return</TOKEN> <DirElemConstructor><TOKEN>&lt;</TOKEN><QName>json</QName><DirAttributeList><S>   </S><QName>type</QName><TOKEN>=</TOKEN><DirAttributeValue><TOKEN>"</TOKEN><QuotAttrContentChar>a</QuotAttrContentChar><QuotAttrContentChar>r</QuotAttrContentChar><QuotAttrContentChar>r</QuotAttrContentChar><QuotAttrContentChar>a</QuotAttrContentChar><QuotAttrContentChar>y</QuotAttrContentChar><TOKEN>"</TOKEN></DirAttributeValue><S> </S></DirAttributeList><TOKEN>&gt;</TOKEN><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>_</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN><VarRef><TOKEN>$</TOKEN><QName>n</QName></VarRef><TOKEN>}</TOKEN></EnclosedExpr><TOKEN>&lt;/</TOKEN><QName>_</QName><TOKEN>&gt;</TOKEN></DirElemConstructor><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><TOKEN>&lt;/</TOKEN><QName>json</QName><TOKEN>&gt;</TOKEN></DirElemConstructor></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ 
 : get result for job with $id
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> 
<Annotation><TOKEN>%</TOKEN><QName>rest:POST</QName></Annotation> <Annotation><TOKEN>%</TOKEN><QName>rest:path</QName><TOKEN>(</TOKEN><StringLiteral>'/vue-poc/api/eval/result/{$id}'</StringLiteral><TOKEN>)</TOKEN></Annotation> 
<Annotation><TOKEN>%</TOKEN><QName>output:method</QName><TOKEN>(</TOKEN><StringLiteral>"json"</StringLiteral><TOKEN>)</TOKEN></Annotation> 
<FunctionDecl><TOKEN>function</TOKEN> <QName>vue-api:result</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>id</QName></Param><TOKEN>)</TOKEN> 
<EnclosedExpr><TOKEN>{</TOKEN>
  <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>r</QName><TOKEN>:=</TOKEN><FunctionCall><QName>jobs:result</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>id</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
   <ReturnClause><TOKEN>return</TOKEN> <DirElemConstructor><TOKEN>&lt;</TOKEN><QName>json</QName><DirAttributeList><S>   </S><QName>type</QName><TOKEN>=</TOKEN><DirAttributeValue><TOKEN>"</TOKEN><QuotAttrContentChar>o</QuotAttrContentChar><QuotAttrContentChar>b</QuotAttrContentChar><QuotAttrContentChar>j</QuotAttrContentChar><QuotAttrContentChar>e</QuotAttrContentChar><QuotAttrContentChar>c</QuotAttrContentChar><QuotAttrContentChar>t</QuotAttrContentChar><TOKEN>"</TOKEN></DirAttributeValue><S> </S></DirAttributeList><TOKEN>&gt;</TOKEN><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>result</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN><FunctionCall><QName>util:display</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>r</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>}</TOKEN></EnclosedExpr><TOKEN>&lt;/</TOKEN><QName>result</QName><TOKEN>&gt;</TOKEN></DirElemConstructor><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><TOKEN>&lt;/</TOKEN><QName>json</QName><TOKEN>&gt;</TOKEN></DirElemConstructor></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN></Prolog></LibraryModule><EOF/></XQuery>