<XQuery>(:~
 : wrapper for https://github.com/digitalfondue/jfiveparse A java html5 compliant parser 
 :)

<LibraryModule><ModuleDecl><TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>html5</NCName><TOKEN>=</TOKEN><StringLiteral>"text.html5"</StringLiteral><TOKEN>;</TOKEN></ModuleDecl>
<Prolog><NamespaceDecl><TOKEN>declare</TOKEN> <TOKEN>namespace</TOKEN> <NCName>Document</NCName><TOKEN>=</TOKEN><StringLiteral>"java:ch.digitalfondue.jfiveparse.Document"</StringLiteral></NamespaceDecl><TOKEN>;</TOKEN>
<NamespaceDecl><TOKEN>declare</TOKEN> <TOKEN>namespace</TOKEN> <NCName>Element</NCName><TOKEN>=</TOKEN><StringLiteral>"java:ch.digitalfondue.jfiveparse.Element"</StringLiteral></NamespaceDecl><TOKEN>;</TOKEN>
<NamespaceDecl><TOKEN>declare</TOKEN> <TOKEN>namespace</TOKEN> <NCName>Node</NCName><TOKEN>=</TOKEN><StringLiteral>"java:ch.digitalfondue.jfiveparse.Node"</StringLiteral></NamespaceDecl><TOKEN>;</TOKEN>
<NamespaceDecl><TOKEN>declare</TOKEN> <TOKEN>namespace</TOKEN> <NCName>Parser</NCName><TOKEN>=</TOKEN><StringLiteral>"java:ch.digitalfondue.jfiveparse.Parser"</StringLiteral></NamespaceDecl><TOKEN>;</TOKEN>
<NamespaceDecl><TOKEN>declare</TOKEN> <TOKEN>namespace</TOKEN> <NCName>Selector</NCName><TOKEN>=</TOKEN><StringLiteral>"java:ch.digitalfondue.jfiveparse.Selector"</StringLiteral></NamespaceDecl><TOKEN>;</TOKEN>
<NamespaceDecl><TOKEN>declare</TOKEN> <TOKEN>namespace</TOKEN> <NCName>Option</NCName><TOKEN>=</TOKEN><StringLiteral>"java:ch.digitalfondue.jfiveparse.Option"</StringLiteral></NamespaceDecl><TOKEN>;</TOKEN>
<NamespaceDecl><TOKEN>declare</TOKEN> <TOKEN>namespace</TOKEN> <NCName>EnumSet</NCName><TOKEN>=</TOKEN><StringLiteral>"java:java.util.EnumSet"</StringLiteral></NamespaceDecl><TOKEN>;</TOKEN>
<NamespaceDecl><TOKEN>declare</TOKEN> <TOKEN>namespace</TOKEN> <NCName>list</NCName><TOKEN>=</TOKEN><StringLiteral>"java:java.util.ArrayList"</StringLiteral></NamespaceDecl><TOKEN>;</TOKEN>

<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>html5:opt</QName><TOKEN>:=</TOKEN><FunctionCall><QName>EnumSet:of</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>Option:valueOf</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"HIDE_EMPTY_ATTRIBUTE_VALUE"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>
(:~
 : parse html text string into jfiveparse.Document 
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>html5:doc</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><TOKEN>text</TOKEN> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>)</TOKEN>
<EnclosedExpr><TOKEN>{</TOKEN>
  <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>p</QName><TOKEN>:=</TOKEN><FunctionCall><QName>Parser:new</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
  <ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>Parser:parse</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>p</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><TOKEN>text</TOKEN></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ 
 : apply function $fn to each jfiveparse.Node
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>html5:for-each</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>nodes</QName></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>fn</QName> <TypeDeclaration><TOKEN>as</TOKEN> <AnyFunctionTest><TOKEN>function</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></AnyFunctionTest></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>
<EnclosedExpr><TOKEN>{</TOKEN>
  <FLWORExpr><ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>index</QName> <TOKEN>in</TOKEN> <RangeExpr><IntegerLiteral>0</IntegerLiteral> <TOKEN>to</TOKEN> <AdditiveExpr><FunctionCall><QName>list:size</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>nodes</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>-</TOKEN><IntegerLiteral>1</IntegerLiteral></AdditiveExpr></RangeExpr></ForBinding></ForClause>
  <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>a</QName><TOKEN>:=</TOKEN><FunctionCall><QName>list:get</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>nodes</QName></VarRef><TOKEN>,</TOKEN><FunctionCall><QName>xs:int</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>index</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
  <ReturnClause><TOKEN>return</TOKEN> <PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>fn</QName></VarRef><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>a</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></PostfixExpr></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ 
 : first element with given name 
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>html5:getElementFirstByTagName</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>doc</QName></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>tag</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>
<EnclosedExpr><TOKEN>{</TOKEN>
 <ArrowExpr><FunctionCall><QName>Document:getElementsByTagName</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>doc</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>tag</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
 <TOKEN>=&gt;</TOKEN><QName>list:get</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>xs:int</QName><ArgumentList><TOKEN>(</TOKEN><IntegerLiteral>0</IntegerLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></ArrowExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ 
 : get attribute from node 
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>html5:getAttribute</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><TOKEN>node</TOKEN></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>atname</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <QName>xs:string</QName>
<EnclosedExpr><TOKEN>{</TOKEN>
 <FunctionCall><QName>Element:getAttribute</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><TOKEN>node</TOKEN></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>atname</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ 
 : get html from node 
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>html5:getInnerHTML</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><TOKEN>node</TOKEN></Param><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <QName>xs:string</QName>
<EnclosedExpr><TOKEN>{</TOKEN>
 <FunctionCall><QName>Node:getInnerHTML</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><TOKEN>node</TOKEN></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>html5:opt</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>
(:~ 
 : @return matcher for given element and attribute with value
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>html5:selector</QName><TOKEN>(</TOKEN><TOKEN>)</TOKEN>
<EnclosedExpr><TOKEN>{</TOKEN>
  <ArrowExpr><FunctionCall><QName>Selector:select</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
  <TOKEN>=&gt;</TOKEN><QName>Selector:element</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"script"</StringLiteral><TOKEN>)</TOKEN></ArgumentList>
  <TOKEN>=&gt;</TOKEN><QName>Selector:attrValEq</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"type"</StringLiteral><TOKEN>,</TOKEN> <StringLiteral>"text/x-template"</StringLiteral><TOKEN>)</TOKEN></ArgumentList>
  <TOKEN>=&gt;</TOKEN><QName>Selector:toMatcher</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></ArrowExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ 
 :write file
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>html5:write-text</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><TOKEN>text</TOKEN> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>file</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>
<EnclosedExpr><TOKEN>{</TOKEN>
<FunctionCall><QName>file:write-text</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>file</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><TOKEN>text</TOKEN></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN></Prolog></LibraryModule><EOF/></XQuery>