<XQuery><Module><VersionDecl><TOKEN>xquery</TOKEN> <TOKEN>version</TOKEN> <StringLiteral>"3.1"</StringLiteral><TOKEN>;</TOKEN></VersionDecl>
(:~
 : async ..
 : scheduled, queued, running, cached
 :)
<LibraryModule><ModuleDecl><TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN>  <NCName>qipe</NCName><TOKEN>=</TOKEN><StringLiteral>'http://quodatum.com/ns/pipeline'</StringLiteral><TOKEN>;</TOKEN></ModuleDecl>


(:~ submit a pipeline :)
<Prolog><AnnotatedDecl><TOKEN>declare</TOKEN> 
<Annotation><TOKEN>%</TOKEN><QName>updating</QName></Annotation>
<FunctionDecl><TOKEN>function</TOKEN> <QName>qipe:submit</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><TOKEN>item</TOKEN> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>qipe:pipeline</QName><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN>
<EnclosedExpr><TOKEN>{</TOKEN>
  <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>dbid</QName><TOKEN>:=</TOKEN><FunctionCall><QName>qipe:id</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
  <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>id</QName><TOKEN>:=</TOKEN><AdditiveExpr><VarRef><TOKEN>$</TOKEN><QName>dbid</QName></VarRef> <TOKEN>+</TOKEN> <IntegerLiteral>0</IntegerLiteral></AdditiveExpr></LetBinding></LetClause>
  <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>pipe</QName><TOKEN>:=</TOKEN><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>qipe:run</QName><DirAttributeList><S> </S><QName>id</QName><TOKEN>=</TOKEN><DirAttributeValue><TOKEN>"</TOKEN><EnclosedExpr><TOKEN>{</TOKEN><VarRef><TOKEN>$</TOKEN><QName>id</QName></VarRef><TOKEN>}</TOKEN></EnclosedExpr><TOKEN>"</TOKEN></DirAttributeValue><S> </S><QName>state</QName><TOKEN>=</TOKEN><DirAttributeValue><TOKEN>"</TOKEN><QuotAttrContentChar>q</QuotAttrContentChar><QuotAttrContentChar>u</QuotAttrContentChar><QuotAttrContentChar>e</QuotAttrContentChar><QuotAttrContentChar>u</QuotAttrContentChar><QuotAttrContentChar>e</QuotAttrContentChar><QuotAttrContentChar>d</QuotAttrContentChar><TOKEN>"</TOKEN></DirAttributeValue><S> </S><QName>step</QName><TOKEN>=</TOKEN><DirAttributeValue><TOKEN>"</TOKEN><QuotAttrContentChar>1</QuotAttrContentChar><TOKEN>"</TOKEN></DirAttributeValue><S> 
           </S><QName>base-uri</QName><TOKEN>=</TOKEN><DirAttributeValue><TOKEN>"</TOKEN><EnclosedExpr><TOKEN>{</TOKEN><FunctionCall><QName>base-uri</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><TOKEN>item</TOKEN></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>}</TOKEN></EnclosedExpr><TOKEN>"</TOKEN></DirAttributeValue></DirAttributeList><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> 
    <VarRef><TOKEN>$</TOKEN><TOKEN>item</TOKEN></VarRef> 
   <TOKEN>}</TOKEN></EnclosedExpr><TOKEN>&lt;/</TOKEN><QName>qipe:run</QName><TOKEN>&gt;</TOKEN></DirElemConstructor></LetBinding></LetClause>
  <ReturnClause><TOKEN>return</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN>
        <Expr><FunctionCall><QName>db:replace</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"!ASYNC"</StringLiteral><TOKEN>,</TOKEN><StringConstructor><TOKEN>``[</TOKEN><StringConstructorContent><StringConstructorChars>run/</StringConstructorChars><StringConstructorInterpolation><TOKEN>`{</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>id</QName></VarRef> <TOKEN>}`</TOKEN></StringConstructorInterpolation><StringConstructorChars>.xml</StringConstructorChars></StringConstructorContent><TOKEN>]``</TOKEN></StringConstructor><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>pipe</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN>
        <ReplaceExpr><TOKEN>replace</TOKEN> <TOKEN>value</TOKEN> <TOKEN>of</TOKEN> <TOKEN>node</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>dbid</QName></VarRef> <TOKEN>with</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN><AdditiveExpr><VarRef><TOKEN>$</TOKEN><QName>dbid</QName></VarRef> <TOKEN>+</TOKEN><IntegerLiteral>1</IntegerLiteral></AdditiveExpr><TOKEN>)</TOKEN></ParenthesizedExpr></ReplaceExpr></Expr>
        <TOKEN>)</TOKEN></ParenthesizedExpr></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ next id :)
<AnnotatedDecl><TOKEN>declare</TOKEN> 
<FunctionDecl><TOKEN>function</TOKEN> <QName>qipe:id</QName><TOKEN>(</TOKEN><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <AnyKindTest><TOKEN>node</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></AnyKindTest><EnclosedExpr><TOKEN>{</TOKEN>
   <RelativePathExpr><FunctionCall><QName>db:open</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"!ASYNC"</StringLiteral><TOKEN>,</TOKEN><StringLiteral>"/state.xml"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>/</TOKEN><AxisStep><QName>state</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>id</QName>
<PredicateList/></AxisStep></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

<AnnotatedDecl><TOKEN>declare</TOKEN> 
<FunctionDecl><TOKEN>function</TOKEN> <QName>qipe:get</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>id</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>qipe:run</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType>
<EnclosedExpr><TOKEN>{</TOKEN>
   <RelativePathExpr><FunctionCall><QName>collection</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"!ASYNC/run"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>/</TOKEN><AxisStep><QName>qipe:run</QName><Predicate><TOKEN>[</TOKEN><ComparisonExpr><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>id</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>=</TOKEN><VarRef><TOKEN>$</TOKEN><QName>id</QName></VarRef></ComparisonExpr><TOKEN>]</TOKEN></Predicate></AxisStep></RelativePathExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

<AnnotatedDecl><TOKEN>declare</TOKEN>
<Annotation><TOKEN>%</TOKEN><QName>updating</QName></Annotation> 
<FunctionDecl><TOKEN>function</TOKEN> <QName>qipe:run-step</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>id</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>)</TOKEN>
 <EnclosedExpr><TOKEN>{</TOKEN>
   <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>run</QName><TOKEN>:=</TOKEN><FunctionCall><QName>qipe:get</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>id</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
   <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>step</QName><TOKEN>:=</TOKEN> <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><ComparisonExpr><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>run</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>state</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>=</TOKEN><StringLiteral>"queued"</StringLiteral></ComparisonExpr><TOKEN>)</TOKEN> <TOKEN>then</TOKEN> 
                    <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>run</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>step</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>number</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr>
               <TOKEN>else</TOKEN> <FunctionCall><QName>error</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></IfExpr></LetBinding></LetClause>
   <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>base-uri</QName><TOKEN>:=</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>run</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>base-uri</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr></LetBinding></LetClause>

   <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>task</QName><TOKEN>:=</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>run</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>qipe:pipeline</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><Wildcard>*</Wildcard><Predicate><TOKEN>[</TOKEN><ComparisonExpr><FunctionCall><QName>position</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>=</TOKEN><VarRef><TOKEN>$</TOKEN><QName>step</QName></VarRef></ComparisonExpr><TOKEN>]</TOKEN></Predicate></AxisStep></RelativePathExpr></LetBinding></LetClause>
   <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>xq</QName><TOKEN>:=</TOKEN><FunctionCall><QName>resolve-uri</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>task</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>href</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>base-uri</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
   <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>opts</QName><TOKEN>:=</TOKEN><MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
                <MapConstructorEntry><StringLiteral>"id"</StringLiteral><TOKEN>:</TOKEN> <StringConstructor><TOKEN>``[</TOKEN><StringConstructorContent><StringConstructorChars>pipe.</StringConstructorChars><StringConstructorInterpolation><TOKEN>`{</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>run</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>id</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>}`</TOKEN></StringConstructorInterpolation><StringConstructorChars>.</StringConstructorChars><StringConstructorInterpolation><TOKEN>`{</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>step</QName></VarRef> <TOKEN>}`</TOKEN></StringConstructorInterpolation><StringConstructorChars/></StringConstructorContent><TOKEN>]``</TOKEN></StringConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
                <MapConstructorEntry><StringLiteral>"cache"</StringLiteral><TOKEN>:</TOKEN> <FunctionCall><QName>true</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></MapConstructorEntry>
                <TOKEN>}</TOKEN></MapConstructor></LetBinding></LetClause>
   <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>bindings</QName><TOKEN>:=</TOKEN><FunctionCall><QName>map:merge</QName><ArgumentList><TOKEN>(</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>task</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>qipe:with-param</QName><PredicateList/></AxisStep><TOKEN>!</TOKEN><FunctionCall><QName>map:entry</QName><ArgumentList><TOKEN>(</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>,</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr> <TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
   <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>job</QName><TOKEN>:=</TOKEN> <FunctionCall><QName>jobs:invoke</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xq</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>bindings</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>opts</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
   <ReturnClause><TOKEN>return</TOKEN>  <ReplaceExpr><TOKEN>replace</TOKEN> <TOKEN>value</TOKEN> <TOKEN>of</TOKEN> <TOKEN>node</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>run</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>state</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>with</TOKEN> <StringLiteral>"running"</StringLiteral></ReplaceExpr></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ names of pipeline jobs with results :)
<AnnotatedDecl><TOKEN>declare</TOKEN> 
<FunctionDecl><TOKEN>function</TOKEN> <QName>qipe:done-jobs</QName><TOKEN>(</TOKEN><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <SequenceType><QName>xs:string</QName><TOKEN>*</TOKEN></SequenceType>
<EnclosedExpr><TOKEN>{</TOKEN>
 <RelativePathExpr><PostfixExpr><FunctionCall><QName>jobs:list</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><Predicate><TOKEN>[</TOKEN><FunctionCall><QName>starts-with</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>,</TOKEN><StringLiteral>"pipe."</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>]</TOKEN></Predicate></PostfixExpr><TOKEN>!</TOKEN><PostfixExpr><TOKEN>.</TOKEN><Predicate><TOKEN>[</TOKEN><ComparisonExpr><RelativePathExpr><FunctionCall><QName>jobs:list-details</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>state</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>=</TOKEN><StringLiteral>"cached"</StringLiteral></ComparisonExpr><TOKEN>]</TOKEN></Predicate></PostfixExpr></RelativePathExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

<AnnotatedDecl><TOKEN>declare</TOKEN> 
<FunctionDecl><TOKEN>function</TOKEN> <QName>qipe:queued</QName><TOKEN>(</TOKEN><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <SequenceType><QName>xs:string</QName><TOKEN>*</TOKEN></SequenceType>
<EnclosedExpr><TOKEN>{</TOKEN>
  <RelativePathExpr><FunctionCall><QName>collection</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"!ASYNC/run"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>/</TOKEN><AxisStep><QName>qipe:run</QName><Predicate><TOKEN>[</TOKEN><ComparisonExpr><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>state</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>=</TOKEN><StringLiteral>"queued"</StringLiteral></ComparisonExpr><TOKEN>]</TOKEN></Predicate></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>id</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(: update run using results of job
:)
<AnnotatedDecl><TOKEN>declare</TOKEN> 
<Annotation><TOKEN>%</TOKEN><QName>updating</QName></Annotation>
<FunctionDecl><TOKEN>function</TOKEN> <QName>qipe:update</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>jobid</QName></Param><TOKEN>)</TOKEN><EnclosedExpr><TOKEN>{</TOKEN>
<FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>p</QName><TOKEN>:=</TOKEN><FunctionCall><QName>tokenize</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>jobid</QName></VarRef><TOKEN>,</TOKEN><StringLiteral>"\."</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
<LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>run</QName><TOKEN>:=</TOKEN><FunctionCall><QName>qipe:get</QName><ArgumentList><TOKEN>(</TOKEN><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>p</QName></VarRef><Predicate><TOKEN>[</TOKEN><IntegerLiteral>2</IntegerLiteral><TOKEN>]</TOKEN></Predicate></PostfixExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
<LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>step</QName><TOKEN>:=</TOKEN><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>p</QName></VarRef><Predicate><TOKEN>[</TOKEN><IntegerLiteral>3</IntegerLiteral><TOKEN>]</TOKEN></Predicate></PostfixExpr></LetBinding></LetClause>

<ReturnClause><TOKEN>return</TOKEN> <TryCatchExpr><TryClause><TOKEN>try</TOKEN><EnclosedExpr><TOKEN>{</TOKEN>
       <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>result</QName><TOKEN>:=</TOKEN><FunctionCall><QName>jobs:result</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>jobid</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
       <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>step</QName><TOKEN>:=</TOKEN><AdditiveExpr><VarRef><TOKEN>$</TOKEN><QName>step</QName></VarRef><TOKEN>+</TOKEN><IntegerLiteral>1</IntegerLiteral></AdditiveExpr></LetBinding></LetClause> (: TODO all done :)
       <ReturnClause><TOKEN>return</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN><Expr><ReplaceExpr><TOKEN>replace</TOKEN> <TOKEN>value</TOKEN> <TOKEN>of</TOKEN> <TOKEN>node</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>run</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>step</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>with</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN><AdditiveExpr><VarRef><TOKEN>$</TOKEN><QName>step</QName></VarRef> <TOKEN>+</TOKEN><IntegerLiteral>1</IntegerLiteral></AdditiveExpr><TOKEN>)</TOKEN></ParenthesizedExpr></ReplaceExpr><TOKEN>,</TOKEN>
               <ReplaceExpr><TOKEN>replace</TOKEN> <TOKEN>value</TOKEN> <TOKEN>of</TOKEN> <TOKEN>node</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>run</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>state</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>with</TOKEN> <StringLiteral>"queued"</StringLiteral></ReplaceExpr></Expr><TOKEN>)</TOKEN></ParenthesizedExpr></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></TryClause><CatchClause><TOKEN>catch</TOKEN> <Wildcard>*</Wildcard> <EnclosedExpr><TOKEN>{</TOKEN>
    <ParenthesizedExpr><TOKEN>(</TOKEN><Expr><InsertExpr><TOKEN>insert</TOKEN> <TOKEN>node</TOKEN> <DirElemConstructor><TOKEN>&lt;</TOKEN><QName>error</QName><DirAttributeList><S> </S><QName>code</QName><TOKEN>=</TOKEN><DirAttributeValue><TOKEN>"</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>err:code</QName></VarRef> <TOKEN>}</TOKEN></EnclosedExpr><TOKEN>"</TOKEN></DirAttributeValue></DirAttributeList><TOKEN>&gt;</TOKEN><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>description</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>err:description</QName></VarRef> <TOKEN>}</TOKEN></EnclosedExpr><TOKEN>&lt;/</TOKEN><QName>description</QName><TOKEN>&gt;</TOKEN></DirElemConstructor><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><TOKEN>&lt;/</TOKEN><QName>error</QName><TOKEN>&gt;</TOKEN></DirElemConstructor>
     <TOKEN>into</TOKEN>   <VarRef><TOKEN>$</TOKEN><QName>run</QName></VarRef></InsertExpr><TOKEN>,</TOKEN>
    <ReplaceExpr><TOKEN>replace</TOKEN> <TOKEN>value</TOKEN> <TOKEN>of</TOKEN> <TOKEN>node</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>run</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>state</QName></AbbrevForwardStep> <PredicateList/></AxisStep></RelativePathExpr><TOKEN>with</TOKEN> <StringLiteral>"error"</StringLiteral></ReplaceExpr></Expr><TOKEN>)</TOKEN></ParenthesizedExpr>
<TOKEN>}</TOKEN></EnclosedExpr></CatchClause></TryCatchExpr></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

<AnnotatedDecl><TOKEN>declare</TOKEN> 
<FunctionDecl><TOKEN>function</TOKEN> <QName>qipe:list-details</QName><TOKEN>(</TOKEN><TOKEN>)</TOKEN>
<EnclosedExpr><TOKEN>{</TOKEN>
  <RelativePathExpr><FunctionCall><QName>collection</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"!ASYNC/run"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>/</TOKEN><AxisStep><QName>qipe:run</QName><PredicateList/></AxisStep><TOKEN>!</TOKEN><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>run</QName><DirAttributeList><S> </S><QName>id</QName><TOKEN>=</TOKEN><DirAttributeValue><TOKEN>"</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>id</QName></AbbrevForwardStep> <PredicateList/></AxisStep><TOKEN>}</TOKEN></EnclosedExpr><TOKEN>"</TOKEN></DirAttributeValue><S> </S><QName>state</QName><TOKEN>=</TOKEN><DirAttributeValue><TOKEN>"</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>state</QName></AbbrevForwardStep> <PredicateList/></AxisStep><TOKEN>}</TOKEN></EnclosedExpr><TOKEN>"</TOKEN></DirAttributeValue></DirAttributeList><TOKEN>/&gt;</TOKEN></DirElemConstructor></RelativePathExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN> 

(: periodic task to update :)
<AnnotatedDecl><TOKEN>declare</TOKEN> 
<Annotation><TOKEN>%</TOKEN><QName>updating</QName></Annotation>
<FunctionDecl><TOKEN>function</TOKEN> <QName>qipe:tick</QName><TOKEN>(</TOKEN><TOKEN>)</TOKEN>
<EnclosedExpr><TOKEN>{</TOKEN>
 <ParenthesizedExpr><TOKEN>(</TOKEN><Expr><RelativePathExpr><FunctionCall><QName>qipe:queued</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><FunctionCall><QName>qipe:run-step</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>,</TOKEN>
 <RelativePathExpr><FunctionCall><QName>qipe:done-jobs</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN><FunctionCall><QName>qipe:update</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr></Expr> <TOKEN>)</TOKEN></ParenthesizedExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN></Prolog></LibraryModule></Module>
<EOF/></XQuery>