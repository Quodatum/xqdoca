<XQuery>(:~
 : Global constants and functions.
 :
 : @author Christian Gr√ºn, BaseX Team, 2014-16
 :)
<LibraryModule><ModuleDecl><TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>cons</NCName> <TOKEN>=</TOKEN> <StringLiteral>'vue-poc/cons'</StringLiteral><TOKEN>;</TOKEN></ModuleDecl>

<Prolog><ModuleImport><TOKEN>import</TOKEN> <TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>Request</NCName> <TOKEN>=</TOKEN> <StringLiteral>'http://exquery.org/ns/request'</StringLiteral></ModuleImport><TOKEN>;</TOKEN>
<ModuleImport><TOKEN>import</TOKEN> <TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>Session</NCName> <TOKEN>=</TOKEN> <StringLiteral>'http://basex.org/modules/session'</StringLiteral></ModuleImport><TOKEN>;</TOKEN>

(:~ Session key. :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>cons:SESSION-KEY</QName> <TOKEN>:=</TOKEN> <StringLiteral>"vue-poc"</StringLiteral></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>
(:~ Current session. :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>cons:SESSION-VALUE</QName> <TOKEN>:=</TOKEN> <FunctionCall><QName>Session:get</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>cons:SESSION-KEY</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ Directory for DBA files. :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>cons:DBA-DIR</QName> <TOKEN>:=</TOKEN> <StringConcatExpr><FunctionCall><QName>file:temp-dir</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall> <TOKEN>||</TOKEN> <StringLiteral>'vue-poc/'</StringLiteral></StringConcatExpr></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>
(:~ Configuration file. :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>cons:DBA-SETTINGS-FILE</QName> <TOKEN>:=</TOKEN> <StringConcatExpr><VarRef><TOKEN>$</TOKEN><QName>cons:DBA-DIR</QName></VarRef> <TOKEN>||</TOKEN> <StringLiteral>'poc-settings.xml'</StringLiteral></StringConcatExpr></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ Permissions. :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>cons:PERMISSIONS</QName> <TOKEN>:=</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN><Expr><StringLiteral>'none'</StringLiteral><TOKEN>,</TOKEN> <StringLiteral>'read'</StringLiteral><TOKEN>,</TOKEN> <StringLiteral>'write'</StringLiteral><TOKEN>,</TOKEN> <StringLiteral>'create'</StringLiteral><TOKEN>,</TOKEN> <StringLiteral>'admin'</StringLiteral></Expr><TOKEN>)</TOKEN></ParenthesizedExpr></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ Maximum length of XML characters. :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>cons:K-MAXCHARS</QName> <TOKEN>:=</TOKEN> <StringLiteral>'maxchars'</StringLiteral></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>
(:~ Maximum number of table entries. :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>cons:K-MAXROWS</QName> <TOKEN>:=</TOKEN> <StringLiteral>'maxrows'</StringLiteral></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>
(:~ Query timeout. :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>cons:K-TIMEOUT</QName> <TOKEN>:=</TOKEN> <StringLiteral>'timeout'</StringLiteral></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>
(:~ Maximal memory consumption. :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>cons:K-MEMORY</QName> <TOKEN>:=</TOKEN> <StringLiteral>'memory'</StringLiteral></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>
(:~ Permission when running queries. :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>cons:K-PERMISSION</QName> <TOKEN>:=</TOKEN> <StringLiteral>'permission'</StringLiteral></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ Configuration. :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>cons:OPTION</QName> <TOKEN>:=</TOKEN>
  <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>defaults</QName> <TOKEN>:=</TOKEN> <MapConstructor><TOKEN>map</TOKEN> <TOKEN>{</TOKEN>
    <MapConstructorEntry><StringLiteral>'maxchars'</StringLiteral><TOKEN>:</TOKEN> <IntegerLiteral>100000</IntegerLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
    <MapConstructorEntry><StringLiteral>'maxrows'</StringLiteral><TOKEN>:</TOKEN> <IntegerLiteral>100</IntegerLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
    <MapConstructorEntry><StringLiteral>'timeout'</StringLiteral><TOKEN>:</TOKEN> <IntegerLiteral>10</IntegerLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
    <MapConstructorEntry><StringLiteral>'memory'</StringLiteral><TOKEN>:</TOKEN> <IntegerLiteral>500</IntegerLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
    <MapConstructorEntry><StringLiteral>'permission'</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>'admin'</StringLiteral></MapConstructorEntry>
  <TOKEN>}</TOKEN></MapConstructor></LetBinding></LetClause>
  <ReturnClause><TOKEN>return</TOKEN> <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><FunctionCall><QName>file:exists</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>cons:DBA-SETTINGS-FILE</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN> <TOKEN>then</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN>
    <TryCatchExpr><TryClause><TOKEN>try</TOKEN> <EnclosedExpr><TOKEN>{</TOKEN>
      (: merge defaults with options from settings file :)
      <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>configs</QName> <TOKEN>:=</TOKEN> <RelativePathExpr><FunctionCall><QName>fetch:xml</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>cons:DBA-SETTINGS-FILE</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>/</TOKEN><AxisStep><QName>config</QName>
      <PredicateList/></AxisStep></RelativePathExpr></LetBinding></LetClause><ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>map:merge</QName><ArgumentList><TOKEN>(</TOKEN>
        <FunctionCall><QName>map:for-each</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>defaults</QName></VarRef><TOKEN>,</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>key</QName></Param><TOKEN>,</TOKEN> <Param><TOKEN>$</TOKEN><QName>value</QName></Param></ParamList><TOKEN>)</TOKEN> <EnclosedExpr><TOKEN>{</TOKEN>
          <FunctionCall><QName>map:entry</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>key</QName></VarRef><TOKEN>,</TOKEN>
            <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>config</QName> <TOKEN>:=</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>configs</QName></VarRef><TOKEN>/</TOKEN><AxisStep><Wildcard>*</Wildcard><Predicate><TOKEN>[</TOKEN><ComparisonExpr><FunctionCall><QName>name</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall> <TOKEN>=</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>key</QName></VarRef></ComparisonExpr><TOKEN>]</TOKEN></Predicate></AxisStep></RelativePathExpr></LetBinding></LetClause>
            <ReturnClause><TOKEN>return</TOKEN> <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>config</QName></VarRef><TOKEN>)</TOKEN> <TOKEN>then</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN>
              <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><InstanceofExpr><VarRef><TOKEN>$</TOKEN><QName>value</QName></VarRef> <TOKEN>instance</TOKEN> <TOKEN>of</TOKEN> <QName>xs:numeric</QName></InstanceofExpr><TOKEN>)</TOKEN> <TOKEN>then</TOKEN> <FunctionCall><QName>xs:integer</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>config</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall> <TOKEN>else</TOKEN> <FunctionCall><QName>xs:string</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>config</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></IfExpr>
            <TOKEN>)</TOKEN></ParenthesizedExpr> <TOKEN>else</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN>
              <VarRef><TOKEN>$</TOKEN><QName>value</QName></VarRef>
            <TOKEN>)</TOKEN></ParenthesizedExpr></IfExpr></ReturnClause></FLWORExpr>
          <TOKEN>)</TOKEN></ArgumentList></FunctionCall>
        <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
      <TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr>
    <TOKEN>}</TOKEN></EnclosedExpr></TryClause> <CatchClause><TOKEN>catch</TOKEN> <Wildcard>*</Wildcard> <EnclosedExpr><TOKEN>{</TOKEN>
      (: use defaults if an error occurs while parsing the configuration file :)
      <VarRef><TOKEN>$</TOKEN><QName>defaults</QName></VarRef>
    <TOKEN>}</TOKEN></EnclosedExpr></CatchClause></TryCatchExpr>
  <TOKEN>)</TOKEN></ParenthesizedExpr> <TOKEN>else</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN>
    <VarRef><TOKEN>$</TOKEN><QName>defaults</QName></VarRef>
  <TOKEN>)</TOKEN></ParenthesizedExpr></IfExpr></ReturnClause></FLWORExpr></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~
 : Checks if the current client is logged in. If not, raises an error.
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>cons:check</QName><TOKEN>(</TOKEN>
<TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><TOKEN>empty-sequence</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
  <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>cons:SESSION-VALUE</QName></VarRef><TOKEN>)</TOKEN> <TOKEN>then</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ParenthesizedExpr> <TOKEN>else</TOKEN>
    <FunctionCall><QName>error</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>xs:QName</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>'basex:login'</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN> <StringLiteral>'Please log in again.'</StringLiteral><TOKEN>,</TOKEN> <FunctionCall><QName>Request:path</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall></IfExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~
 : Convenience function for redirecting to another page from update operations.
 : @param  $url     URL
 : @param  $params  query parameters
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <Annotation><TOKEN>%</TOKEN><QName>updating</QName></Annotation> <FunctionDecl><TOKEN>function</TOKEN> <QName>cons:redirect</QName><TOKEN>(</TOKEN>
  <ParamList><Param><TOKEN>$</TOKEN><QName>url</QName>     <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>,</TOKEN>
  <Param><TOKEN>$</TOKEN><QName>params</QName>  <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param></ParamList>
<TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><TOKEN>empty-sequence</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
  <FunctionCall><QName>update:output</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>web:redirect</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>url</QName></VarRef><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>params</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN></Prolog></LibraryModule>
<EOF/></XQuery>