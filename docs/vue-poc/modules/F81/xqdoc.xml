<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2019-06-05T22:41:22.335+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>quodatum:vue.poc</xqdoc:uri><xqdoc:name>app.xqm</xqdoc:name><xqdoc:comment><xqdoc:description>vue-poc application.</xqdoc:description><xqdoc:author>Andy Bunce may-2017</xqdoc:author><xqdoc:custom tag="__source">app.xqm</xqdoc:custom></xqdoc:comment><xqdoc:body>(:~
 : vue-poc application.
 :
 : @author Andy Bunce may-2017
 :)
module namespace vue-poc = 'quodatum:vue.poc';
import module namespace rest = "http://exquery.org/ns/restxq";

declare variable $vue-poc:index:=resolve-uri ('static/' || "app.html",fn:static-base-uri() );

(:~
 : Redirects to the start page.
 :)
declare
%rest:path("/vue-poc")
function vue-poc:redirect() 
as element(rest:response) 
{
  admin:write-log("Start","VUEPOC"),
  rest:init(),
  web:redirect("/vue-poc/ui")
};

(:~ display home page :) 
declare 
%rest:GET %rest:path("/vue-poc/ui")
function vue-poc:main()
{
  vue-poc:get-file("app.html")
};

(:~
 : Returns a file.
 : @param  $file  file or unknown path
 : @return rest response and binary file
 :)
declare
%rest:path("/vue-poc/ui/{$file=.+}")
function vue-poc:file(
  $file as xs:string
) as item()+ 
{
   vue-poc:get-file($file)
};


(:~
 : Returns a file.
 : @param  $file  file or unknown path
 : @return rest binary data
 :)
declare function vue-poc:get-file( $file as xs:string) 
as item()+ 
{
  let $path := resolve-uri( 'static/' || $file,static-base-uri())
  let $path:= if(file:exists($path))then $path else ($vue-poc:index,prof:dump($path," Not found"))
  let $content-type:= vue-poc:content-type($path)
  return (
    web:response-header(
                     map { 'media-type': $content-type },
                     map { 'Cache-Control': 'max-age=3600,public' }
                     ),
    file:read-binary($path)
  )
};

(:~ 
 : content type for path 
 :)
declare function vue-poc:content-type($path as xs:string) 
as xs:string
{
 let $ct:=web:content-type($path)
 return if($ct = "text/ecmascript") then "text/javascript" else $ct
};

(:~ unused
 :)
declare function vue-poc:get-filex($file)
{
  let $path := resolve-uri( 'static/' || $file,static-base-uri())
  return 
    
    try{
    (web:response-header(map { 'media-type': web:content-type($path) }),
    fetch:binary($path))
    }catch * {
      (web:response-header(map { 'media-type': web:content-type($vue-poc:index) }),
    fetch:binary($vue-poc:index))
    }
};
</xqdoc:body></xqdoc:module><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>http://exquery.org/ns/restxq</xqdoc:uri></xqdoc:import></xqdoc:imports><xqdoc:namespaces><xqdoc:namespace prefix="vue-poc" uri="quodatum:vue.poc"/><xqdoc:namespace prefix="rest" uri="http://exquery.org/ns/restxq"/></xqdoc:namespaces><xqdoc:variables><xqdoc:variable><xqdoc:name>vue-poc:index</xqdoc:name><xqdoc:type occurrence="?">xs:anyURI</xqdoc:type></xqdoc:variable></xqdoc:variables><xqdoc:functions><xqdoc:function arity="0"><xqdoc:comment><xqdoc:description>Redirects to the start page.</xqdoc:description></xqdoc:comment><xqdoc:name>vue-poc:redirect</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/vue-poc</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>declare %rest:path("/vue-poc") function vue-poc:redirect() as element(rest:response)</xqdoc:signature><xqdoc:return><xqdoc:type>element(rest:response)</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>http://basex.org/modules/admin</xqdoc:uri><xqdoc:name>write-log</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://exquery.org/ns/restxq</xqdoc:uri><xqdoc:name>init</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/web</xqdoc:uri><xqdoc:name>redirect</xqdoc:name></xqdoc:invoked><xqdoc:body>function vue-poc:redirect() 
as element(rest:response) 
{
  admin:write-log("Start","VUEPOC"),
  rest:init(),
  web:redirect("/vue-poc/ui")
}</xqdoc:body></xqdoc:function><xqdoc:function arity="0"><xqdoc:comment><xqdoc:description>display home page</xqdoc:description></xqdoc:comment><xqdoc:name>vue-poc:main</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:GET"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/vue-poc/ui</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>declare %rest:GET %rest:path("/vue-poc/ui") function vue-poc:main() as item()*</xqdoc:signature><xqdoc:return><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>quodatum:vue.poc</xqdoc:uri><xqdoc:name>get-file</xqdoc:name></xqdoc:invoked><xqdoc:body>function vue-poc:main()
{
  vue-poc:get-file("app.html")
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>Returns a file.</xqdoc:description><xqdoc:param>$file  file or unknown path</xqdoc:param><xqdoc:return>rest response and binary file</xqdoc:return></xqdoc:comment><xqdoc:name>vue-poc:file</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/vue-poc/ui/{$file=.+}</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>declare %rest:path("/vue-poc/ui/{$file=.+}") function vue-poc:file($file as xs:string) as item()+</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>file</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="+">item()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>quodatum:vue.poc</xqdoc:uri><xqdoc:name>get-file</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>file</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function vue-poc:file(
  $file as xs:string
) as item()+ 
{
   vue-poc:get-file($file)
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>Returns a file.</xqdoc:description><xqdoc:param>$file  file or unknown path</xqdoc:param><xqdoc:return>rest binary data</xqdoc:return></xqdoc:comment><xqdoc:name>vue-poc:get-file</xqdoc:name><xqdoc:signature>declare function vue-poc:get-file($file as xs:string) as item()+</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>file</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="+">item()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>resolve-uri</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>static-base-uri</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://expath.org/ns/file</xqdoc:uri><xqdoc:name>exists</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://basex.org/modules/prof</xqdoc:uri><xqdoc:name>dump</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>quodatum:vue.poc</xqdoc:uri><xqdoc:name>content-type</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://basex.org/modules/web</xqdoc:uri><xqdoc:name>response-header</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://expath.org/ns/file</xqdoc:uri><xqdoc:name>read-binary</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>file</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>path</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>path</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum:vue.poc</xqdoc:uri><xqdoc:name>index</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>path</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>path</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>content-type</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>path</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function vue-poc:get-file( $file as xs:string) 
as item()+ 
{
  let $path := resolve-uri( 'static/' || $file,static-base-uri())
  let $path:= if(file:exists($path))then $path else ($vue-poc:index,prof:dump($path," Not found"))
  let $content-type:= vue-poc:content-type($path)
  return (
    web:response-header(
                     map { 'media-type': $content-type },
                     map { 'Cache-Control': 'max-age=3600,public' }
                     ),
    file:read-binary($path)
  )
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>content type for path</xqdoc:description></xqdoc:comment><xqdoc:name>vue-poc:content-type</xqdoc:name><xqdoc:signature>declare function vue-poc:content-type($path as xs:string) as xs:string</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>path</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/web</xqdoc:uri><xqdoc:name>content-type</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>path</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>ct</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>ct</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function vue-poc:content-type($path as xs:string) 
as xs:string
{
 let $ct:=web:content-type($path)
 return if($ct = "text/ecmascript") then "text/javascript" else $ct
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>unused</xqdoc:description></xqdoc:comment><xqdoc:name>vue-poc:get-filex</xqdoc:name><xqdoc:signature>declare function vue-poc:get-filex($file as item()*) as item()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>file</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>resolve-uri</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>static-base-uri</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/web</xqdoc:uri><xqdoc:name>response-header</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/web</xqdoc:uri><xqdoc:name>content-type</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/fetch</xqdoc:uri><xqdoc:name>binary</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/web</xqdoc:uri><xqdoc:name>response-header</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/web</xqdoc:uri><xqdoc:name>content-type</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/fetch</xqdoc:uri><xqdoc:name>binary</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>file</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>path</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>path</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum:vue.poc</xqdoc:uri><xqdoc:name>index</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>quodatum:vue.poc</xqdoc:uri><xqdoc:name>index</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function vue-poc:get-filex($file)
{
  let $path := resolve-uri( 'static/' || $file,static-base-uri())
  return 
    
    try{
    (web:response-header(map { 'media-type': web:content-type($path) }),
    fetch:binary($path))
    }catch * {
      (web:response-header(map { 'media-type': web:content-type($vue-poc:index) }),
    fetch:binary($vue-poc:index))
    }
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>