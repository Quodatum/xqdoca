<XQuery><Module><VersionDecl><TOKEN>xquery</TOKEN> <TOKEN>version</TOKEN> <StringLiteral>"3.1"</StringLiteral><TOKEN>;</TOKEN></VersionDecl>
(:
 : Copyright (c) 2019 Quodatum Ltd
 :
 : Licensed under the Apache License, Version 2.0 (the "License");
 : you may not use this file except in compliance with the License.
 : You may obtain a copy of the License at
 :
 :     http://www.apache.org/licenses/LICENSE-2.0
 :
 : Unless required by applicable law or agreed to in writing, software
 : distributed under the License is distributed on an "AS IS" BASIS,
 : WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 : See the License for the specific language governing permissions and
 : limitations under the License.
 :)
 
 (:~
 : &lt;h1&gt;xqdoc-parser.xqm&lt;/h1&gt;
 : &lt;p&gt;generate and Analyse XQuery parse tree&lt;/p&gt;
 :
 : @author Andy Bunce
 : @version 0.1
 :)
 

<LibraryModule><ModuleDecl><TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>xqp</NCName> <TOKEN>=</TOKEN> <StringLiteral>'quodatum:xqdoca.parser'</StringLiteral><TOKEN>;</TOKEN></ModuleDecl>

<Prolog><ModuleImport><TOKEN>import</TOKEN> <TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>xp</NCName><TOKEN>=</TOKEN><StringLiteral>"expkg-zone58:text.parse"</StringLiteral></ModuleImport><TOKEN>;</TOKEN>
<ModuleImport><TOKEN>import</TOKEN> <TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>xqn</NCName> <TOKEN>=</TOKEN> <StringLiteral>'quodatum:xqdoca.namespaces'</StringLiteral> <TOKEN>at</TOKEN> <StringLiteral>"xqdoc-namespace.xqm"</StringLiteral></ModuleImport><TOKEN>;</TOKEN>
<NamespaceDecl><TOKEN>declare</TOKEN> <TOKEN>namespace</TOKEN> <NCName>xqdoc</NCName><TOKEN>=</TOKEN><StringLiteral>"http://www.xqdoc.org/1.0"</StringLiteral></NamespaceDecl><TOKEN>;</TOKEN>



(:~ xparser defaults :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>xqp:xparse_opts</QName><TOKEN>:=</TOKEN><MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
  <MapConstructorEntry><StringLiteral>"basex"</StringLiteral><TOKEN>:</TOKEN>  <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> <MapConstructorEntry><StringLiteral>"lang"</StringLiteral><TOKEN>:</TOKEN><StringLiteral>"xquery"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN> <MapConstructorEntry><StringLiteral>"version"</StringLiteral><TOKEN>:</TOKEN><StringLiteral>"3.1 basex"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>  <MapConstructorEntry><StringLiteral>"flatten"</StringLiteral><TOKEN>:</TOKEN><FunctionCall><QName>true</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry>
<TOKEN>}</TOKEN></MapConstructor></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>

 (:~  Enrich trapping errors
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqp:enrich-catch</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>xqdoc</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>xqdoc:xqdoc</QName><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>,</TOKEN>
                                  <Param><TOKEN>$</TOKEN><QName>xqparse</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>,</TOKEN>
                                  <Param><TOKEN>$</TOKEN><QName>prefixes</QName></Param></ParamList><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>xqdoc:xqdoc</QName><TOKEN>)</TOKEN></ElementTest>
<EnclosedExpr><TOKEN>{</TOKEN>
<TryCatchExpr><TryClause><TOKEN>try</TOKEN><EnclosedExpr><TOKEN>{</TOKEN>
      <FunctionCall><QName>xqp:enrich</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xqdoc</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xqparse</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>prefixes</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall> 
    <TOKEN>}</TOKEN></EnclosedExpr></TryClause>   <CatchClause><TOKEN>catch</TOKEN> <Wildcard>*</Wildcard> <EnclosedExpr><TOKEN>{</TOKEN> 
      <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>_</QName><TOKEN>:=</TOKEN> <FunctionCall><QName>trace</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>err:description</QName></VarRef> <TOKEN>,</TOKEN><StringLiteral>"Enrich error: "</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
      <ReturnClause><TOKEN>return</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>xqdoc</QName></VarRef></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></CatchClause></TryCatchExpr> 
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>
                                    
(:~  Enrich BaseX built-in xqDoc by
 : adding function source and X-ref info
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqp:enrich</QName><TOKEN>(</TOKEN>
                     <ParamList><Param><TOKEN>$</TOKEN><QName>xqdoc</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>xqdoc:xqdoc</QName><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>,</TOKEN>
                     <Param><TOKEN>$</TOKEN><QName>xqparse</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>XQuery</QName><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>,</TOKEN>
                     <Param><TOKEN>$</TOKEN><QName>prefixes</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>xqdoc:xqdoc</QName><TOKEN>)</TOKEN></ElementTest>
<EnclosedExpr><TOKEN>{</TOKEN>
 
   (: add xqDoc-main for main modules :)
  <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>body</QName><TOKEN>:=</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>xqparse</QName></VarRef><TOKEN>//</TOKEN><AxisStep><QName>MainModule</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><Wildcard>*</Wildcard><Predicate><TOKEN>[</TOKEN><IntegerLiteral>2</IntegerLiteral><TOKEN>]</TOKEN></Predicate></AxisStep></RelativePathExpr></LetBinding></LetClause>
  <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>xqdoc</QName><TOKEN>:=</TOKEN> <TransformWithExpr><VarRef><TOKEN>$</TOKEN><QName>xqdoc</QName></VarRef> <TOKEN>transform</TOKEN> <TOKEN>with</TOKEN> <TOKEN>{</TOKEN>
               
                       <IfExpr><TOKEN>if</TOKEN> <TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>body</QName></VarRef><TOKEN>)</TOKEN> <TOKEN>then</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN>
                         <Expr><InsertExpr><TOKEN>insert</TOKEN> <TOKEN>node</TOKEN> <FunctionCall><QName>xqp:main</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>body</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall> <InsertExprTargetChoice><TOKEN>as</TOKEN> <TOKEN>last</TOKEN> <TOKEN>into</TOKEN></InsertExprTargetChoice> <AxisStep><QName>xqdoc:functions</QName><PredicateList/></AxisStep></InsertExpr><TOKEN>,</TOKEN>
                         <InsertExpr><TOKEN>insert</TOKEN> <TOKEN>node</TOKEN> <DirElemConstructor><TOKEN>&lt;</TOKEN><QName>xqdoc:namespace</QName><DirAttributeList><S> </S><QName>prefix</QName><TOKEN>=</TOKEN><DirAttributeValue><TOKEN>"</TOKEN><QuotAttrContentChar>l</QuotAttrContentChar><QuotAttrContentChar>o</QuotAttrContentChar><QuotAttrContentChar>c</QuotAttrContentChar><QuotAttrContentChar>a</QuotAttrContentChar><QuotAttrContentChar>l</QuotAttrContentChar><TOKEN>"</TOKEN></DirAttributeValue><S> </S><QName>uri</QName><TOKEN>=</TOKEN><DirAttributeValue><TOKEN>"</TOKEN><QuotAttrContentChar>h</QuotAttrContentChar><QuotAttrContentChar>t</QuotAttrContentChar><QuotAttrContentChar>t</QuotAttrContentChar><QuotAttrContentChar>p</QuotAttrContentChar><QuotAttrContentChar>:</QuotAttrContentChar><QuotAttrContentChar>/</QuotAttrContentChar><QuotAttrContentChar>/</QuotAttrContentChar><QuotAttrContentChar>w</QuotAttrContentChar><QuotAttrContentChar>w</QuotAttrContentChar><QuotAttrContentChar>w</QuotAttrContentChar><QuotAttrContentChar>.</QuotAttrContentChar><QuotAttrContentChar>w</QuotAttrContentChar><QuotAttrContentChar>3</QuotAttrContentChar><QuotAttrContentChar>.</QuotAttrContentChar><QuotAttrContentChar>o</QuotAttrContentChar><QuotAttrContentChar>r</QuotAttrContentChar><QuotAttrContentChar>g</QuotAttrContentChar><QuotAttrContentChar>/</QuotAttrContentChar><QuotAttrContentChar>2</QuotAttrContentChar><QuotAttrContentChar>0</QuotAttrContentChar><QuotAttrContentChar>0</QuotAttrContentChar><QuotAttrContentChar>5</QuotAttrContentChar><QuotAttrContentChar>/</QuotAttrContentChar><QuotAttrContentChar>x</QuotAttrContentChar><QuotAttrContentChar>q</QuotAttrContentChar><QuotAttrContentChar>u</QuotAttrContentChar><QuotAttrContentChar>e</QuotAttrContentChar><QuotAttrContentChar>r</QuotAttrContentChar><QuotAttrContentChar>y</QuotAttrContentChar><QuotAttrContentChar>-</QuotAttrContentChar><QuotAttrContentChar>l</QuotAttrContentChar><QuotAttrContentChar>o</QuotAttrContentChar><QuotAttrContentChar>c</QuotAttrContentChar><QuotAttrContentChar>a</QuotAttrContentChar><QuotAttrContentChar>l</QuotAttrContentChar><QuotAttrContentChar>-</QuotAttrContentChar><QuotAttrContentChar>f</QuotAttrContentChar><QuotAttrContentChar>u</QuotAttrContentChar><QuotAttrContentChar>n</QuotAttrContentChar><QuotAttrContentChar>c</QuotAttrContentChar><QuotAttrContentChar>t</QuotAttrContentChar><QuotAttrContentChar>i</QuotAttrContentChar><QuotAttrContentChar>o</QuotAttrContentChar><QuotAttrContentChar>n</QuotAttrContentChar><QuotAttrContentChar>s</QuotAttrContentChar><TOKEN>"</TOKEN></DirAttributeValue></DirAttributeList><TOKEN>/&gt;</TOKEN></DirElemConstructor>
                                <TOKEN>into</TOKEN> <AxisStep><QName>xqdoc:namespaces</QName>
                              <PredicateList/></AxisStep></InsertExpr></Expr><TOKEN>)</TOKEN></ParenthesizedExpr>
                       <TOKEN>else</TOKEN>
                       <ParenthesizedExpr><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ParenthesizedExpr></IfExpr>
              <TOKEN>}</TOKEN></TransformWithExpr></LetBinding></LetClause>
              
  (: swap imports and namespaces basex err :) 
   <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>xqdoc</QName><TOKEN>:=</TOKEN> <TransformWithExpr><VarRef><TOKEN>$</TOKEN><QName>xqdoc</QName></VarRef> <TOKEN>transform</TOKEN> <TOKEN>with</TOKEN> <TOKEN>{</TOKEN>
                <Expr><ReplaceExpr><TOKEN>replace</TOKEN> <TOKEN>node</TOKEN> <AxisStep><QName>xqdoc:namespaces</QName> <PredicateList/></AxisStep><TOKEN>with</TOKEN> <AxisStep><QName>xqdoc:imports</QName><PredicateList/></AxisStep></ReplaceExpr><TOKEN>,</TOKEN>
                <ReplaceExpr><TOKEN>replace</TOKEN> <TOKEN>node</TOKEN> <AxisStep><QName>xqdoc:imports</QName> <PredicateList/></AxisStep><TOKEN>with</TOKEN> <AxisStep><QName>xqdoc:namespaces</QName>
              <PredicateList/></AxisStep></ReplaceExpr></Expr><TOKEN>}</TOKEN></TransformWithExpr></LetBinding></LetClause>          
 
    (: default function namespace? :)
    <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>def-fn</QName><TOKEN>:=</TOKEN> <FunctionCall><QName>xqp:default-fn-uri</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xqparse</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
                   
     <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>fmap</QName><TOKEN>:=</TOKEN><FunctionCall><QName>map:merge</QName><ArgumentList><TOKEN>(</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN>
                <Expr><FunctionCall><QName>xqp:funmap</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xqparse</QName></VarRef><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>prefixes</QName></VarRef><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>def-fn</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN>
                <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>body</QName></VarRef><TOKEN>)</TOKEN> <TOKEN>then</TOKEN> <FunctionCall><QName>map:entry</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"Q{http://www.w3.org/2005/xquery-local-functions}xqDoc-main#0"</StringLiteral><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>body</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall> <TOKEN>else</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ParenthesizedExpr></IfExpr></Expr>
         <TOKEN>)</TOKEN></ParenthesizedExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>                       
   (: insert function source :)
  <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>xqdoc</QName><TOKEN>:=</TOKEN> <TransformWithExpr><VarRef><TOKEN>$</TOKEN><QName>xqdoc</QName></VarRef> <TOKEN>transform</TOKEN> <TOKEN>with</TOKEN> <TOKEN>{</TOKEN>
    <FLWORExpr><ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>f</QName> <TOKEN>in</TOKEN> <RelativePathExpr><TOKEN>.</TOKEN><TOKEN>/</TOKEN><AxisStep><QName>xqdoc:functions</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>xqdoc:function</QName>
  
    <PredicateList/></AxisStep></RelativePathExpr></ForBinding></ForClause><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>name</QName><TOKEN>:=</TOKEN><FunctionCall><QName>xqn:qmap</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>f</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>xqdoc:name</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>prefixes</QName></VarRef><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>def-fn</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
    <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>key</QName><TOKEN>:=</TOKEN><FunctionCall><QName>concat</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"Q{"</StringLiteral><TOKEN>,</TOKEN><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>name</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>uri</NCName></Lookup></PostfixExpr><TOKEN>,</TOKEN><StringLiteral>"}"</StringLiteral><TOKEN>,</TOKEN><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>name</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>name</NCName></Lookup></PostfixExpr><TOKEN>,</TOKEN><StringLiteral>"#"</StringLiteral><TOKEN>,</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>f</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>arity</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
    <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>parse</QName><TOKEN>:=</TOKEN> <FunctionCall><QName>map:get</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>fmap</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>key</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
    <ReturnClause><TOKEN>return</TOKEN> <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><FunctionCall><QName>map:contains</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>fmap</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>key</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN><TOKEN>then</TOKEN>
                   <ParenthesizedExpr><TOKEN>(</TOKEN>   
                    <Expr><InsertExpr><TOKEN>insert</TOKEN> <TOKEN>node</TOKEN> <FunctionCall><QName>xqp:references</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>parse</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>prefixes</QName></VarRef><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>def-fn</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall> <TOKEN>into</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>f</QName></VarRef></InsertExpr><TOKEN>,</TOKEN>
                    <InsertExpr><TOKEN>insert</TOKEN> <TOKEN>node</TOKEN> <DirElemConstructor><TOKEN>&lt;</TOKEN><QName>xqdoc:body</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>parse</QName></VarRef><TOKEN>/</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>}</TOKEN></EnclosedExpr><TOKEN>&lt;/</TOKEN><QName>xqdoc:body</QName><TOKEN>&gt;</TOKEN></DirElemConstructor> <TOKEN>into</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>f</QName></VarRef></InsertExpr></Expr>
                  <TOKEN>)</TOKEN></ParenthesizedExpr>
               <TOKEN>else</TOKEN>
                  <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>a</QName><TOKEN>:=</TOKEN><FunctionCall><QName>trace</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>map:keys</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>fmap</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN><StringLiteral>"FMAP: "</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
                  <ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>error</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>xs:QName</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"xqp:enrich"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN><StringConcatExpr><StringLiteral>"key not found "</StringLiteral> <TOKEN>||</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>key</QName></VarRef></StringConcatExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr></IfExpr></ReturnClause></FLWORExpr>  
  <TOKEN>}</TOKEN></TransformWithExpr></LetBinding></LetClause>
 
  <ReturnClause><TOKEN>return</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>xqdoc</QName></VarRef></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ default function namespace
 : NOTE if parse failed will return "http://www.w3.org/2005/xpath-functions"
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqp:default-fn-uri</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>xqparse</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <QName>xs:string</QName>
<EnclosedExpr><TOKEN>{</TOKEN>
  <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>def-fn</QName><TOKEN>:=</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>xqparse</QName></VarRef><TOKEN>/</TOKEN><AxisStep><Wildcard>*</Wildcard><PredicateList/></AxisStep><TOKEN>//</TOKEN><AxisStep><QName>Prolog</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>DefaultNamespaceDecl</QName>
  <PredicateList/></AxisStep></RelativePathExpr></LetBinding></LetClause><ReturnClause><TOKEN>return</TOKEN> <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN> <FunctionCall><TOKEN>empty</TOKEN><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>def-fn</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall> <TOKEN>)</TOKEN> <TOKEN>then</TOKEN>
                    <StringLiteral>"http://www.w3.org/2005/xpath-functions"</StringLiteral>
                  <TOKEN>else</TOKEN>
                   <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>def-fn</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>StringLiteral</QName><PredicateList/></AxisStep><TOKEN>!</TOKEN><FunctionCall><QName>substring</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>,</TOKEN><IntegerLiteral>2</IntegerLiteral><TOKEN>,</TOKEN><AdditiveExpr><FunctionCall><QName>string-length</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>-</TOKEN><IntegerLiteral>2</IntegerLiteral></AdditiveExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr></IfExpr></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ scan tree below $e for references
 : @param $expand function to map prefixes to namespaces
 : @return sequence of xqdoc:invoked and xqdoc:var-refences elements
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqp:references</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>e</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>prefixes</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param><TOKEN>,</TOKEN> <Param><TOKEN>$</TOKEN><QName>def-fn</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType>
<EnclosedExpr><TOKEN>{</TOKEN>
  <Expr><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>//</TOKEN><AxisStep><QName>FunctionCall</QName><PredicateList/></AxisStep><TOKEN>!</TOKEN><FunctionCall><QName>xqp:invoke-fn</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>prefixes</QName></VarRef><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>def-fn</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>,</TOKEN>
  <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>//</TOKEN><AxisStep><QName>ArrowExpr</QName><PredicateList/></AxisStep><TOKEN>!</TOKEN><FunctionCall><QName>xqp:invoke-arrow</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>prefixes</QName></VarRef><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>def-fn</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>,</TOKEN>
  <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>//</TOKEN><AxisStep><QName>VarRef</QName><PredicateList/></AxisStep><TOKEN>!</TOKEN><FunctionCall><QName>xqp:ref-variable</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>prefixes</QName></VarRef><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>def-fn</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr></Expr> 
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>


(:~  build invoked nodes for function call
 : @param $e is FunctionCall or ArrowExpr 
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqp:invoke-fn</QName><TOKEN>(</TOKEN>
                 <ParamList><Param><TOKEN>$</TOKEN><QName>e</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>FunctionCall</QName><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>,</TOKEN>
                 <Param><TOKEN>$</TOKEN><QName>prefixes</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param><TOKEN>,</TOKEN>
                 <Param><TOKEN>$</TOKEN><QName>def-fn</QName></Param></ParamList><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>xqdoc:invoked</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType>
<EnclosedExpr><TOKEN>{</TOKEN>
<FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>commas</QName><TOKEN>:=</TOKEN><FunctionCall><TOKEN>count</TOKEN><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>ArgumentList</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>TOKEN</QName><Predicate><TOKEN>[</TOKEN><ComparisonExpr><TOKEN>.</TOKEN><TOKEN>=</TOKEN><StringLiteral>","</StringLiteral></ComparisonExpr><TOKEN>]</TOKEN></Predicate></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
<LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>hasarg</QName><TOKEN>:=</TOKEN><FunctionCall><QName>boolean</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>ArgumentList</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><Wildcard>*</Wildcard><Predicate><TOKEN>[</TOKEN><FunctionCall><QName>not</QName><ArgumentList><TOKEN>(</TOKEN><AxisStep><QName>TOKEN</QName><PredicateList/></AxisStep><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>]</TOKEN></Predicate></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
<LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>arity</QName><TOKEN>:=</TOKEN> <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>hasarg</QName></VarRef><TOKEN>)</TOKEN> <TOKEN>then</TOKEN> <AdditiveExpr><IntegerLiteral>1</IntegerLiteral><TOKEN>+</TOKEN><VarRef><TOKEN>$</TOKEN><QName>commas</QName></VarRef></AdditiveExpr> <TOKEN>else</TOKEN> <IntegerLiteral>0</IntegerLiteral></IfExpr></LetBinding></LetClause>
<LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>arity</QName><TOKEN>:=</TOKEN> <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><ComparisonExpr><FunctionCall><QName>name</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>=</TOKEN><StringLiteral>"ArrowExpr"</StringLiteral></ComparisonExpr><TOKEN>)</TOKEN> <TOKEN>then</TOKEN> <AdditiveExpr><VarRef><TOKEN>$</TOKEN><QName>arity</QName></VarRef> <TOKEN>+</TOKEN><IntegerLiteral>1</IntegerLiteral></AdditiveExpr> <TOKEN>else</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>arity</QName></VarRef></IfExpr></LetBinding></LetClause>
<LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>fname</QName><TOKEN>:=</TOKEN> <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>QName</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN> <TOKEN>then</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>QName</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr> <TOKEN>else</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>TOKEN</QName><Predicate><TOKEN>[</TOKEN><IntegerLiteral>1</IntegerLiteral><TOKEN>]</TOKEN></Predicate></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr></IfExpr></LetBinding></LetClause> 
<LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>qname</QName><TOKEN>:=</TOKEN><FunctionCall><QName>xqn:qmap</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>fname</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>prefixes</QName></VarRef><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>def-fn</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
 <ReturnClause><TOKEN>return</TOKEN> <DirElemConstructor><TOKEN>&lt;</TOKEN><QName>xqdoc:invoked</QName><DirAttributeList><S> </S><QName>arity</QName><TOKEN>=</TOKEN><DirAttributeValue><TOKEN>"</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>arity</QName></VarRef> <TOKEN>}</TOKEN></EnclosedExpr><TOKEN>"</TOKEN></DirAttributeValue></DirAttributeList><TOKEN>&gt;</TOKEN><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>xqdoc:uri</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>qname</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>uri</NCName></Lookup></PostfixExpr> <TOKEN>}</TOKEN></EnclosedExpr><TOKEN>&lt;/</TOKEN><QName>xqdoc:uri</QName><TOKEN>&gt;</TOKEN></DirElemConstructor><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>xqdoc:name</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>qname</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>name</NCName></Lookup></PostfixExpr> <TOKEN>}</TOKEN></EnclosedExpr><TOKEN>&lt;/</TOKEN><QName>xqdoc:name</QName><TOKEN>&gt;</TOKEN></DirElemConstructor><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><TOKEN>&lt;/</TOKEN><QName>xqdoc:invoked</QName><TOKEN>&gt;</TOKEN></DirElemConstructor></ReturnClause></FLWORExpr>   
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>
(:~  build invoked nodes for arrow expression
 : @param $e is FunctionCall or ArrowExpr 
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqp:invoke-arrow</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>e</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>ArrowExpr</QName><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>,</TOKEN>
                                  <Param><TOKEN>$</TOKEN><QName>prefixes</QName> <TypeDeclaration><TOKEN>as</TOKEN> <AnyFunctionTest><TOKEN>function</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></AnyFunctionTest></TypeDeclaration></Param><TOKEN>,</TOKEN>
                                  <Param><TOKEN>$</TOKEN><QName>def-fn</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>xqdoc:invoked</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>*</TOKEN></SequenceType>
<EnclosedExpr><TOKEN>{</TOKEN>
<FLWORExpr><ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>arrow</QName> <TOKEN>in</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>TOKEN</QName><Predicate><TOKEN>[</TOKEN><ComparisonExpr><TOKEN>.</TOKEN> <TOKEN>=</TOKEN> <StringLiteral>"=&amp;gt;"</StringLiteral></ComparisonExpr><TOKEN>]</TOKEN></Predicate></AxisStep></RelativePathExpr></ForBinding></ForClause>
<LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>fname</QName><TOKEN>:=</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>arrow</QName></VarRef><TOKEN>/</TOKEN><AxisStep><ForwardStep><ForwardAxis><TOKEN>following-sibling</TOKEN><TOKEN>::</TOKEN></ForwardAxis><Wildcard>*</Wildcard></ForwardStep><Predicate><TOKEN>[</TOKEN><IntegerLiteral>1</IntegerLiteral><TOKEN>]</TOKEN></Predicate></AxisStep></RelativePathExpr></LetBinding></LetClause>
<LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>arglist</QName><TOKEN>:=</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>arrow</QName></VarRef><TOKEN>/</TOKEN><AxisStep><ForwardStep><ForwardAxis><TOKEN>following-sibling</TOKEN><TOKEN>::</TOKEN></ForwardAxis><Wildcard>*</Wildcard></ForwardStep><Predicate><TOKEN>[</TOKEN><IntegerLiteral>2</IntegerLiteral><TOKEN>]</TOKEN></Predicate></AxisStep></RelativePathExpr></LetBinding></LetClause>
<LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>arity</QName><TOKEN>:=</TOKEN><AdditiveExpr><IntegerLiteral>1</IntegerLiteral><TOKEN>+</TOKEN><FunctionCall><TOKEN>count</TOKEN><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>arglist</QName></VarRef><TOKEN>/</TOKEN><AxisStep><Wildcard>*</Wildcard><Predicate><TOKEN>[</TOKEN><FunctionCall><QName>not</QName><ArgumentList><TOKEN>(</TOKEN><AxisStep><QName>TOKEN</QName><PredicateList/></AxisStep><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>]</TOKEN></Predicate></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></AdditiveExpr></LetBinding></LetClause>
<LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>qname</QName><TOKEN>:=</TOKEN><FunctionCall><QName>xqn:qmap</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>fname</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>prefixes</QName></VarRef><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>def-fn</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
 <ReturnClause><TOKEN>return</TOKEN> <DirElemConstructor><TOKEN>&lt;</TOKEN><QName>xqdoc:invoked</QName><DirAttributeList><S> </S><QName>arity</QName><TOKEN>=</TOKEN><DirAttributeValue><TOKEN>"</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>arity</QName></VarRef> <TOKEN>}</TOKEN></EnclosedExpr><TOKEN>"</TOKEN></DirAttributeValue></DirAttributeList><TOKEN>&gt;</TOKEN><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>xqdoc:uri</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>qname</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>uri</NCName></Lookup></PostfixExpr> <TOKEN>}</TOKEN></EnclosedExpr><TOKEN>&lt;/</TOKEN><QName>xqdoc:uri</QName><TOKEN>&gt;</TOKEN></DirElemConstructor><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>xqdoc:name</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>qname</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>name</NCName></Lookup></PostfixExpr> <TOKEN>}</TOKEN></EnclosedExpr><TOKEN>&lt;/</TOKEN><QName>xqdoc:name</QName><TOKEN>&gt;</TOKEN></DirElemConstructor><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><TOKEN>&lt;/</TOKEN><QName>xqdoc:invoked</QName><TOKEN>&gt;</TOKEN></DirElemConstructor></ReturnClause></FLWORExpr>   
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~  build invoked nodes for function call
 : @param $e is variable reference @@TODO
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqp:ref-variable</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>e</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>prefixes</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param><TOKEN>,</TOKEN> <Param><TOKEN>$</TOKEN><QName>def-fn</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>xqdoc:ref-variable</QName><TOKEN>)</TOKEN></ElementTest>
<EnclosedExpr><TOKEN>{</TOKEN>

<FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>fname</QName><TOKEN>:=</TOKEN> <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>QName</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN> <TOKEN>then</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>QName</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr> <TOKEN>else</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>TOKEN</QName><Predicate><TOKEN>[</TOKEN><IntegerLiteral>1</IntegerLiteral><TOKEN>]</TOKEN></Predicate></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr></IfExpr></LetBinding></LetClause> 
<LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>qname</QName><TOKEN>:=</TOKEN><FunctionCall><QName>xqn:qmap</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>fname</QName></VarRef><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>prefixes</QName></VarRef><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>def-fn</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
 <ReturnClause><TOKEN>return</TOKEN> <DirElemConstructor><TOKEN>&lt;</TOKEN><QName>xqdoc:ref-variable</QName><S> </S><TOKEN>&gt;</TOKEN><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>xqdoc:uri</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>qname</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>uri</NCName></Lookup></PostfixExpr> <TOKEN>}</TOKEN></EnclosedExpr><TOKEN>&lt;/</TOKEN><QName>xqdoc:uri</QName><TOKEN>&gt;</TOKEN></DirElemConstructor><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>xqdoc:name</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>qname</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>name</NCName></Lookup></PostfixExpr> <TOKEN>}</TOKEN></EnclosedExpr><TOKEN>&lt;/</TOKEN><QName>xqdoc:name</QName><TOKEN>&gt;</TOKEN></DirElemConstructor><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><TOKEN>&lt;/</TOKEN><QName>xqdoc:ref-variable</QName><TOKEN>&gt;</TOKEN></DirElemConstructor></ReturnClause></FLWORExpr>   
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>



(:~ 
 : extract set of namespace declarations from XQuery parse descendants to map{prefix-&gt;uri}
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqp:namespaces</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>n</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType>
<EnclosedExpr><TOKEN>{</TOKEN>
<ArrowExpr><ParenthesizedExpr><TOKEN>(</TOKEN>
  <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>n</QName></VarRef><TOKEN>//</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN><UnionExpr><AxisStep><QName>ModuleDecl</QName><PredicateList/></AxisStep><TOKEN>|</TOKEN><AxisStep><QName>ModuleImport</QName><PredicateList/></AxisStep><TOKEN>|</TOKEN><AxisStep><QName>NamespaceDecl</QName><PredicateList/></AxisStep></UnionExpr><TOKEN>)</TOKEN></ParenthesizedExpr>
  <TOKEN>!</TOKEN><FunctionCall><QName>map:entry</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><AxisStep><QName>NCName</QName><Predicate><TOKEN>[</TOKEN><IntegerLiteral>1</IntegerLiteral><TOKEN>]</TOKEN></Predicate></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>,</TOKEN><RelativePathExpr><AxisStep><QName>StringLiteral</QName><Predicate><TOKEN>[</TOKEN><IntegerLiteral>1</IntegerLiteral><TOKEN>]</TOKEN></Predicate></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>substring</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>,</TOKEN><IntegerLiteral>2</IntegerLiteral><TOKEN>,</TOKEN><AdditiveExpr><FunctionCall><QName>string-length</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>-</TOKEN><IntegerLiteral>2</IntegerLiteral></AdditiveExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr>
<TOKEN>)</TOKEN></ParenthesizedExpr><TOKEN>=&gt;</TOKEN><QName>map:merge</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></ArrowExpr>  
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>



(:~  map of known namespaces including static :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqp:prefixes</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>e</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>platform</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType>
<EnclosedExpr><TOKEN>{</TOKEN><ArrowExpr><ParenthesizedExpr><TOKEN>(</TOKEN>
  <Expr><FunctionCall><QName>xqp:namespaces</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN>
 <FunctionCall><QName>xqn:static-prefix-map</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>platform</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></Expr>
<TOKEN>)</TOKEN></ParenthesizedExpr> <TOKEN>=&gt;</TOKEN><QName>map:merge</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></ArrowExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~  map of function declarations
 : @result map where keys are Qname with # arity items are xqParse trees
 : @param $def-fn default function namespace
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqp:funmap</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>e</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>XQuery</QName><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>prefixes</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>def-fn</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType>
<EnclosedExpr><TOKEN>{</TOKEN>
 <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>items</QName><TOKEN>:=</TOKEN><FLWORExpr><ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>f</QName> <TOKEN>in</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>e</QName></VarRef><TOKEN>//</TOKEN><AxisStep><QName>FunctionDecl</QName>
             <PredicateList/></AxisStep></RelativePathExpr></ForBinding></ForClause><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>name</QName><TOKEN>:=</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>f</QName></VarRef><TOKEN>/</TOKEN><AxisStep><Wildcard>*</Wildcard><Predicate><TOKEN>[</TOKEN><IntegerLiteral>2</IntegerLiteral><TOKEN>]</TOKEN></Predicate></AxisStep></RelativePathExpr></LetBinding></LetClause>
             <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>name</QName><TOKEN>:=</TOKEN><IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><OrExpr><InstanceofExpr><VarRef><TOKEN>$</TOKEN><QName>name</QName></VarRef> <TOKEN>instance</TOKEN> <TOKEN>of</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>QName</QName><TOKEN>)</TOKEN></ElementTest></InstanceofExpr>
                        <TOKEN>or</TOKEN> <InstanceofExpr><VarRef><TOKEN>$</TOKEN><QName>name</QName></VarRef> <TOKEN>instance</TOKEN> <TOKEN>of</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>TOKEN</QName><TOKEN>)</TOKEN></ElementTest></InstanceofExpr></OrExpr><TOKEN>)</TOKEN> <TOKEN>then</TOKEN>
                              <FunctionCall><QName>xqn:qmap</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>name</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>prefixes</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>def-fn</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
                        <TOKEN>else</TOKEN> <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><InstanceofExpr><VarRef><TOKEN>$</TOKEN><QName>name</QName></VarRef> <TOKEN>instance</TOKEN> <TOKEN>of</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>URIQualifiedName</QName><TOKEN>)</TOKEN></ElementTest></InstanceofExpr><TOKEN>)</TOKEN> <TOKEN>then</TOKEN>
                                <FunctionCall><QName>xqn:uriqname</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>name</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
                        <TOKEN>else</TOKEN> 
                             <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>_</QName><TOKEN>:=</TOKEN><FunctionCall><QName>trace</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>name</QName></VarRef><TOKEN>,</TOKEN><StringLiteral>"name"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
                             <ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>error</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>xs:QName</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"xqp:funmap"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN> <StringLiteral>"bad name: "</StringLiteral><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>name</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr></IfExpr></IfExpr></LetBinding></LetClause>
             <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>arity</QName><TOKEN>:=</TOKEN><FunctionCall><TOKEN>count</TOKEN><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>f</QName></VarRef><TOKEN>/</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN><UnionExpr><AxisStep><QName>Param</QName><PredicateList/></AxisStep><TOKEN>|</TOKEN><RelativePathExpr><AxisStep><QName>ParamList</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>Param</QName><PredicateList/></AxisStep></RelativePathExpr></UnionExpr><TOKEN>)</TOKEN></ParenthesizedExpr></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
             <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>key</QName><TOKEN>:=</TOKEN><FunctionCall><QName>concat</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"Q{"</StringLiteral><TOKEN>,</TOKEN><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>name</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>uri</NCName></Lookup></PostfixExpr><TOKEN>,</TOKEN><StringLiteral>"}"</StringLiteral><TOKEN>,</TOKEN><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>name</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>name</NCName></Lookup></PostfixExpr><TOKEN>,</TOKEN><StringLiteral>"#"</StringLiteral><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>arity</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
             <ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>map:entry</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>key</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>f</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr></LetBinding></LetClause>
 <ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>map:merge</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>items</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>


(:~  create dummy function for main modules
 :)
 <AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqp:main</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>body</QName> <TypeDeclaration><TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType></TypeDeclaration></Param><TOKEN>)</TOKEN>
 <TOKEN>as</TOKEN> <SequenceType><ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>xqdoc:function</QName><TOKEN>)</TOKEN></ElementTest><TOKEN>?</TOKEN></SequenceType>
 <EnclosedExpr><TOKEN>{</TOKEN>
   <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>body</QName></VarRef><TOKEN>)</TOKEN> <TOKEN>then</TOKEN>
        <DirElemConstructor><TOKEN>&lt;</TOKEN><QName>xqdoc:function</QName><DirAttributeList><S> </S><QName>arity</QName><TOKEN>=</TOKEN><DirAttributeValue><TOKEN>"</TOKEN><QuotAttrContentChar>0</QuotAttrContentChar><TOKEN>"</TOKEN></DirAttributeValue></DirAttributeList><TOKEN>&gt;</TOKEN><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>xqdoc:comment</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>xqdoc:description</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><ElementContentChar>p</ElementContentChar><ElementContentChar>s</ElementContentChar><ElementContentChar>e</ElementContentChar><ElementContentChar>u</ElementContentChar><ElementContentChar>d</ElementContentChar><ElementContentChar>o</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar>m</ElementContentChar><ElementContentChar>a</ElementContentChar><ElementContentChar>i</ElementContentChar><ElementContentChar>n</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar>f</ElementContentChar><ElementContentChar>u</ElementContentChar><ElementContentChar>n</ElementContentChar><ElementContentChar>c</ElementContentChar><ElementContentChar>t</ElementContentChar><ElementContentChar>i</ElementContentChar><ElementContentChar>o</ElementContentChar><ElementContentChar>n</ElementContentChar><TOKEN>&lt;/</TOKEN><QName>xqdoc:description</QName><TOKEN>&gt;</TOKEN></DirElemConstructor><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><TOKEN>&lt;/</TOKEN><QName>xqdoc:comment</QName><TOKEN>&gt;</TOKEN></DirElemConstructor><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>xqdoc:name</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><ElementContentChar>l</ElementContentChar><ElementContentChar>o</ElementContentChar><ElementContentChar>c</ElementContentChar><ElementContentChar>a</ElementContentChar><ElementContentChar>l</ElementContentChar><ElementContentChar>:</ElementContentChar><ElementContentChar>x</ElementContentChar><ElementContentChar>q</ElementContentChar><ElementContentChar>D</ElementContentChar><ElementContentChar>o</ElementContentChar><ElementContentChar>c</ElementContentChar><ElementContentChar>-</ElementContentChar><ElementContentChar>m</ElementContentChar><ElementContentChar>a</ElementContentChar><ElementContentChar>i</ElementContentChar><ElementContentChar>n</ElementContentChar><TOKEN>&lt;/</TOKEN><QName>xqdoc:name</QName><TOKEN>&gt;</TOKEN></DirElemConstructor><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>xqdoc:signature</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><ElementContentChar>l</ElementContentChar><ElementContentChar>o</ElementContentChar><ElementContentChar>c</ElementContentChar><ElementContentChar>a</ElementContentChar><ElementContentChar>l</ElementContentChar><ElementContentChar>:</ElementContentChar><ElementContentChar>x</ElementContentChar><ElementContentChar>q</ElementContentChar><ElementContentChar>D</ElementContentChar><ElementContentChar>o</ElementContentChar><ElementContentChar>c</ElementContentChar><ElementContentChar>-</ElementContentChar><ElementContentChar>m</ElementContentChar><ElementContentChar>a</ElementContentChar><ElementContentChar>i</ElementContentChar><ElementContentChar>n</ElementContentChar><ElementContentChar>(</ElementContentChar><ElementContentChar>)</ElementContentChar><TOKEN>&lt;/</TOKEN><QName>xqdoc:signature</QName><TOKEN>&gt;</TOKEN></DirElemConstructor><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><DirElemConstructor><TOKEN>&lt;</TOKEN><QName>xqdoc:body</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>body</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>}</TOKEN></EnclosedExpr><TOKEN>&lt;/</TOKEN><QName>xqdoc:body</QName><TOKEN>&gt;</TOKEN></DirElemConstructor><ElementContentChar>
</ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><ElementContentChar> </ElementContentChar><TOKEN>&lt;/</TOKEN><QName>xqdoc:function</QName><TOKEN>&gt;</TOKEN></DirElemConstructor>
   <TOKEN>else</TOKEN>
    <ParenthesizedExpr><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ParenthesizedExpr></IfExpr>
 <TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>
 (:~ 
 : all namespaces in xqdoc as map{prefix.. uri}
  :)
<AnnotatedDecl><TOKEN>declare</TOKEN> 
<Annotation><TOKEN>%</TOKEN><QName>private</QName></Annotation> 
<FunctionDecl><TOKEN>function</TOKEN> <QName>xqp:namespaces-xqdoc</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>xqdoc</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>xqdoc:xqdoc</QName><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType>
<EnclosedExpr><TOKEN>{</TOKEN>
  <ArrowExpr><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>xqdoc</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>xqdoc:namespaces</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>xqdoc:namespace</QName>
  <PredicateList/></AxisStep><TOKEN>!</TOKEN><FunctionCall><QName>map:entry</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>prefix</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>uri</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr>
  <TOKEN>=&gt;</TOKEN><QName>map:merge</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></ArrowExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ parse XQuery 
 : result is &lt;XQuery&gt; or &lt;ERROR&gt;
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqp:parse</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>xq</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>platform</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></ElementTest>
<EnclosedExpr><TOKEN>{</TOKEN>  
  <FunctionCall><QName>xp:parse</QName><ArgumentList><TOKEN>(</TOKEN><StringConcatExpr><VarRef><TOKEN>$</TOKEN><QName>xq</QName></VarRef> <TOKEN>||</TOKEN> <StringLiteral>""</StringLiteral></StringConcatExpr><TOKEN>,</TOKEN><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>xqp:xparse_opts</QName></VarRef><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>platform</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></PostfixExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall> 
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN></Prolog></LibraryModule></Module>

<EOF/></XQuery>