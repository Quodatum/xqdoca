<XQuery><Module><VersionDecl><TOKEN>xquery</TOKEN> <TOKEN>version</TOKEN> <StringLiteral>"3.1"</StringLiteral><TOKEN>;</TOKEN></VersionDecl>
(:~
 : rewrite code  
 :
 : @author Andy Bunce
 : @version 0.1
 :)
 
<LibraryModule><ModuleDecl><TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>_</NCName> <TOKEN>=</TOKEN> <StringLiteral>'quodatum:xqdoca.generator.rename'</StringLiteral><TOKEN>;</TOKEN></ModuleDecl>
<Prolog><NamespaceDecl><TOKEN>declare</TOKEN> <TOKEN>namespace</TOKEN> <NCName>xqdoca</NCName><TOKEN>=</TOKEN><StringLiteral>"https://github.com/Quodatum/xqdoca"</StringLiteral></NamespaceDecl><TOKEN>;</TOKEN>
(:~ 
 : code rewritting
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> 
<Annotation><TOKEN>%</TOKEN><QName>xqdoca:module</QName><TOKEN>(</TOKEN><StringLiteral>"refactor"</StringLiteral><TOKEN>,</TOKEN><StringLiteral>"simple code change examples."</StringLiteral><TOKEN>)</TOKEN></Annotation>
<Annotation><TOKEN>%</TOKEN><QName>xqdoca:output</QName><TOKEN>(</TOKEN><StringLiteral>"rename.xqm"</StringLiteral><TOKEN>,</TOKEN><StringLiteral>"text"</StringLiteral><TOKEN>)</TOKEN></Annotation> 
<FunctionDecl><TOKEN>function</TOKEN> <QName>_:rename</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>file</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param><TOKEN>,</TOKEN> 
                  <Param><TOKEN>$</TOKEN><QName>model</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param><TOKEN>,</TOKEN>
                  <Param><TOKEN>$</TOKEN><QName>opts</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param></ParamList>
                  <TOKEN>)</TOKEN>                    
<EnclosedExpr><TOKEN>{</TOKEN>


  <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>parse</QName><TOKEN>:=</TOKEN><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>file</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>xqparse</NCName></Lookup></PostfixExpr></LetBinding></LetClause> 
  
  (: change function names that are called :)
  <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>parse</QName> <TOKEN>:=</TOKEN> <TransformWithExpr><VarRef><TOKEN>$</TOKEN><QName>parse</QName></VarRef> <TOKEN>transform</TOKEN> <TOKEN>with</TOKEN> <TOKEN>{</TOKEN>
    <RelativePathExpr><TOKEN>.</TOKEN><TOKEN>//</TOKEN><AxisStep><QName>FunctionCall</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>QName</QName>
    <PredicateList/></AxisStep><TOKEN>!</TOKEN><PostfixExpr><TOKEN>.</TOKEN><Predicate><TOKEN>[</TOKEN><FunctionCall><QName>contains</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>,</TOKEN><StringLiteral>":"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>]</TOKEN></Predicate></PostfixExpr>
    <TOKEN>!</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN> <ReplaceExpr><TOKEN>replace</TOKEN> <TOKEN>value</TOKEN> <TOKEN>of</TOKEN> <TOKEN>node</TOKEN> <TOKEN>.</TOKEN> <TOKEN>with</TOKEN> <StringConcatExpr><TOKEN>.</TOKEN> <TOKEN>||</TOKEN> <StringLiteral>"-XQDOCA"</StringLiteral></StringConcatExpr></ReplaceExpr><TOKEN>)</TOKEN></ParenthesizedExpr></RelativePathExpr>
  <TOKEN>}</TOKEN></TransformWithExpr></LetBinding></LetClause>
  (: add an import :)
    <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>i</QName><TOKEN>:=</TOKEN><StringConstructor><TOKEN>``[</TOKEN><StringConstructorChars>;
import module namespace xqd = 'quodatum:xqdoca.model' at '../main/lib/model.xqm'</StringConstructorChars><TOKEN>]``</TOKEN></StringConstructor></LetBinding></LetClause>
   <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>parse</QName> <TOKEN>:=</TOKEN> <TransformWithExpr><VarRef><TOKEN>$</TOKEN><QName>parse</QName></VarRef> <TOKEN>transform</TOKEN> <TOKEN>with</TOKEN> <TOKEN>{</TOKEN>
    <RelativePathExpr><TOKEN>.</TOKEN><TOKEN>//</TOKEN><AxisStep><QName>ModuleImport</QName><Predicate><TOKEN>[</TOKEN><FunctionCall><QName>not</QName><ArgumentList><TOKEN>(</TOKEN><AxisStep><ForwardStep><ForwardAxis><TOKEN>following-sibling</TOKEN><TOKEN>::</TOKEN></ForwardAxis><QName>ModuleImport</QName></ForwardStep><PredicateList/></AxisStep><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>]</TOKEN></Predicate></AxisStep><TOKEN>!</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN><InsertExpr><TOKEN>insert</TOKEN> <TOKEN>node</TOKEN> <DirElemConstructor><TOKEN>&lt;</TOKEN><QName>ModuleImport</QName><DirAttributeList/><TOKEN>&gt;</TOKEN><EnclosedExpr><TOKEN>{</TOKEN><VarRef><TOKEN>$</TOKEN><QName>i</QName></VarRef><TOKEN>}</TOKEN></EnclosedExpr><TOKEN>&lt;/</TOKEN><QName>ModuleImport</QName><TOKEN>&gt;</TOKEN></DirElemConstructor> <TOKEN>after</TOKEN> <TOKEN>.</TOKEN></InsertExpr><TOKEN>)</TOKEN></ParenthesizedExpr></RelativePathExpr>
  <TOKEN>}</TOKEN></TransformWithExpr></LetBinding></LetClause>
  (: change name of function :)
   <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>parse</QName> <TOKEN>:=</TOKEN> <TransformWithExpr><VarRef><TOKEN>$</TOKEN><QName>parse</QName></VarRef> <TOKEN>transform</TOKEN> <TOKEN>with</TOKEN> <TOKEN>{</TOKEN>
    <RelativePathExpr><PostfixExpr><ParenthesizedExpr><TOKEN>(</TOKEN><RelativePathExpr><TOKEN>.</TOKEN><TOKEN>//</TOKEN><AxisStep><QName>FunctionDecl</QName><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ParenthesizedExpr><Predicate><TOKEN>[</TOKEN><IntegerLiteral>1</IntegerLiteral><TOKEN>]</TOKEN></Predicate></PostfixExpr><TOKEN>!</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN><ReplaceExpr><TOKEN>replace</TOKEN> <TOKEN>value</TOKEN> <TOKEN>of</TOKEN> <TOKEN>node</TOKEN> <AxisStep><QName>QName</QName><Predicate><TOKEN>[</TOKEN><IntegerLiteral>1</IntegerLiteral><TOKEN>]</TOKEN></Predicate></AxisStep> <TOKEN>with</TOKEN> <FunctionCall><QName>concat</QName><ArgumentList><TOKEN>(</TOKEN><AxisStep><QName>QName</QName><Predicate><TOKEN>[</TOKEN><IntegerLiteral>1</IntegerLiteral><TOKEN>]</TOKEN></Predicate></AxisStep><TOKEN>,</TOKEN><StringLiteral>"-XQDOCA"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReplaceExpr><TOKEN>)</TOKEN></ParenthesizedExpr></RelativePathExpr>
  <TOKEN>}</TOKEN></TransformWithExpr></LetBinding></LetClause>
  <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>result</QName><TOKEN>:=</TOKEN><StringConcatExpr><StringConstructor><TOKEN>``[</TOKEN><StringConstructorChars>(:  xqDocA added a comment :)
</StringConstructorChars><TOKEN>]``</TOKEN></StringConstructor> <TOKEN>||</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>parse</QName></VarRef></StringConcatExpr></LetBinding></LetClause>
  <ReturnClause><TOKEN>return</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>result</QName></VarRef></ReturnClause></FLWORExpr>
  <TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN></Prolog></LibraryModule></Module>
<EOF/></XQuery>