<XQuery><Module><VersionDecl><TOKEN>xquery</TOKEN> <TOKEN>version</TOKEN> <StringLiteral>"3.1"</StringLiteral><Separator><TOKEN>;</TOKEN></Separator></VersionDecl>&#xD;
(:~&#xD;
 : &lt;p&gt;Render to o/p xqdoc and xqparse XML files&lt;/p&gt;&#xD;
 : @copyright (c) 2019-2026 Quodatum Ltd&#xD;
 : @author Andy Bunce, Quodatum, License: Apache-2.0&#xD;
 :)&#xD;
 &#xD;
<LibraryModule><ModuleDecl><TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName><NCName>_</NCName></NCName> <TOKEN>=</TOKEN> <URILiteral><StringLiteral>'quodatum:xqdoca.generator.simple'</StringLiteral></URILiteral><Separator><TOKEN>;</TOKEN></Separator></ModuleDecl>&#xD;
<Prolog><NamespaceDecl><TOKEN>declare</TOKEN> <TOKEN>namespace</TOKEN> <NCName><NCName>xqdoca</NCName></NCName><TOKEN>=</TOKEN><URILiteral><StringLiteral>"https://github.com/Quodatum/xqdoca"</StringLiteral></URILiteral></NamespaceDecl><Separator><TOKEN>;</TOKEN></Separator>&#xD;
&#xD;
<AnnotatedDecl><TOKEN>declare</TOKEN>&#xD;
<Annotation><TOKEN>%</TOKEN><EQName><QName><FunctionName><QName>xqdoca:module</QName></FunctionName></QName></EQName><TOKEN>(</TOKEN><Literal><StringLiteral>"xqdoc"</StringLiteral></Literal><TOKEN>,</TOKEN><Literal><StringLiteral>"xqDoc xml file from the source module"</StringLiteral></Literal><TOKEN>)</TOKEN></Annotation>&#xD;
<Annotation><TOKEN>%</TOKEN><EQName><QName><FunctionName><QName>xqdoca:output</QName></FunctionName></QName></EQName><TOKEN>(</TOKEN><Literal><StringLiteral>"xqdoc.xml"</StringLiteral></Literal><TOKEN>,</TOKEN><Literal><StringLiteral>"xml"</StringLiteral></Literal><TOKEN>)</TOKEN></Annotation> &#xD;
<FunctionDecl><TOKEN>function</TOKEN> <EQName><QName><FunctionName><QName>_:xqdoc</QName></FunctionName></QName></EQName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><EQName><QName><FunctionName><QName>file</QName></FunctionName></QName></EQName> <TypeDeclaration><TOKEN>as</TOKEN> <SequenceType><ItemType><MapTest><AnyMapTest><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></AnyMapTest></MapTest></ItemType></SequenceType></TypeDeclaration></Param><TOKEN>,</TOKEN> &#xD;
                 <Param><TOKEN>$</TOKEN><EQName><QName><FunctionName><QName>model</QName></FunctionName></QName></EQName> <TypeDeclaration><TOKEN>as</TOKEN> <SequenceType><ItemType><MapTest><AnyMapTest><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></AnyMapTest></MapTest></ItemType></SequenceType></TypeDeclaration></Param><TOKEN>,</TOKEN>&#xD;
                 <Param><TOKEN>$</TOKEN><EQName><QName><FunctionName><QName>opts</QName></FunctionName></QName></EQName> <TypeDeclaration><TOKEN>as</TOKEN> <SequenceType><ItemType><MapTest><AnyMapTest><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></AnyMapTest></MapTest></ItemType></SequenceType></TypeDeclaration></Param></ParamList>&#xD;
                 <TOKEN>)</TOKEN>&#xD;
<FunctionBody><EnclosedExpr><TOKEN>{</TOKEN>&#xD;
  <Expr><ExprSingle><OrExpr><AndExpr><ComparisonExpr><FTContainsExpr><StringConcatExpr><RangeExpr><AdditiveExpr><MultiplicativeExpr><UnionExpr><IntersectExceptExpr><InstanceofExpr><TreatExpr><CastableExpr><CastExpr><TransformWithExpr><BasexUpdate1Expr><BasexUpdateExpr><ArrowExpr><UnaryExpr><ValueExpr><SimpleMapExpr><PathExpr><RelativePathExpr><StepExpr><PostfixExpr><PrimaryExpr><VarRef><TOKEN>$</TOKEN><VarName><EQName><QName><FunctionName><QName>file</QName></FunctionName></QName></EQName></VarName></VarRef></PrimaryExpr><Lookup><TOKEN>?</TOKEN><KeySpecifier><NCName><NCName>xqdoc</NCName></NCName></KeySpecifier></Lookup></PostfixExpr></StepExpr></RelativePathExpr></PathExpr></SimpleMapExpr></ValueExpr></UnaryExpr></ArrowExpr></BasexUpdateExpr></BasexUpdate1Expr></TransformWithExpr></CastExpr></CastableExpr></TreatExpr></InstanceofExpr></IntersectExceptExpr></UnionExpr></MultiplicativeExpr></AdditiveExpr></RangeExpr></StringConcatExpr></FTContainsExpr></ComparisonExpr></AndExpr></OrExpr></ExprSingle></Expr>&#xD;
<TOKEN>}</TOKEN></EnclosedExpr></FunctionBody></FunctionDecl></AnnotatedDecl><Separator><TOKEN>;</TOKEN></Separator>&#xD;
&#xD;
<AnnotatedDecl><TOKEN>declare</TOKEN>&#xD;
<Annotation><TOKEN>%</TOKEN><EQName><QName><FunctionName><QName>xqdoca:module</QName></FunctionName></QName></EQName><TOKEN>(</TOKEN><Literal><StringLiteral>"xqparse"</StringLiteral></Literal><TOKEN>,</TOKEN><Literal><StringLiteral>"xqparse xml file from the source module"</StringLiteral></Literal><TOKEN>)</TOKEN></Annotation>&#xD;
<Annotation><TOKEN>%</TOKEN><EQName><QName><FunctionName><QName>xqdoca:output</QName></FunctionName></QName></EQName><TOKEN>(</TOKEN><Literal><StringLiteral>"xqparse.xml"</StringLiteral></Literal><TOKEN>,</TOKEN><Literal><StringLiteral>"xml"</StringLiteral></Literal><TOKEN>)</TOKEN></Annotation> &#xD;
<FunctionDecl><TOKEN>function</TOKEN> <EQName><QName><FunctionName><QName>_:xqparse</QName></FunctionName></QName></EQName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><EQName><QName><FunctionName><QName>file</QName></FunctionName></QName></EQName> <TypeDeclaration><TOKEN>as</TOKEN> <SequenceType><ItemType><MapTest><AnyMapTest><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></AnyMapTest></MapTest></ItemType></SequenceType></TypeDeclaration></Param><TOKEN>,</TOKEN>&#xD;
                   <Param><TOKEN>$</TOKEN><EQName><QName><FunctionName><QName>model</QName></FunctionName></QName></EQName> <TypeDeclaration><TOKEN>as</TOKEN> <SequenceType><ItemType><MapTest><AnyMapTest><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></AnyMapTest></MapTest></ItemType></SequenceType></TypeDeclaration></Param><TOKEN>,</TOKEN>&#xD;
                   <Param><TOKEN>$</TOKEN><EQName><QName><FunctionName><QName>opts</QName></FunctionName></QName></EQName> <TypeDeclaration><TOKEN>as</TOKEN> <SequenceType><ItemType><MapTest><AnyMapTest><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></AnyMapTest></MapTest></ItemType></SequenceType></TypeDeclaration></Param></ParamList>&#xD;
                   <TOKEN>)</TOKEN>&#xD;
<FunctionBody><EnclosedExpr><TOKEN>{</TOKEN>&#xD;
  <Expr><ExprSingle><OrExpr><AndExpr><ComparisonExpr><FTContainsExpr><StringConcatExpr><RangeExpr><AdditiveExpr><MultiplicativeExpr><UnionExpr><IntersectExceptExpr><InstanceofExpr><TreatExpr><CastableExpr><CastExpr><TransformWithExpr><BasexUpdate1Expr><BasexUpdateExpr><ArrowExpr><UnaryExpr><ValueExpr><SimpleMapExpr><PathExpr><RelativePathExpr><StepExpr><PostfixExpr><PrimaryExpr><VarRef><TOKEN>$</TOKEN><VarName><EQName><QName><FunctionName><QName>file</QName></FunctionName></QName></EQName></VarName></VarRef></PrimaryExpr><Lookup><TOKEN>?</TOKEN><KeySpecifier><NCName><NCName>xqparse</NCName></NCName></KeySpecifier></Lookup></PostfixExpr></StepExpr></RelativePathExpr></PathExpr></SimpleMapExpr></ValueExpr></UnaryExpr></ArrowExpr></BasexUpdateExpr></BasexUpdate1Expr></TransformWithExpr></CastExpr></CastableExpr></TreatExpr></InstanceofExpr></IntersectExceptExpr></UnionExpr></MultiplicativeExpr></AdditiveExpr></RangeExpr></StringConcatExpr></FTContainsExpr></ComparisonExpr></AndExpr></OrExpr></ExprSingle></Expr>&#xD;
<TOKEN>}</TOKEN></EnclosedExpr></FunctionBody></FunctionDecl></AnnotatedDecl><Separator><TOKEN>;</TOKEN></Separator></Prolog></LibraryModule></Module><EOF/></XQuery>