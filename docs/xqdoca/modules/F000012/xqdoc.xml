<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2025-05-17T18:35:19.705+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>quodatum:xqdoca.generator.rest</xqdoc:uri><xqdoc:name>_</xqdoc:name><xqdoc:comment><xqdoc:description><p>Generate HTML describing the rest interface</p></xqdoc:description><xqdoc:author>Andy Bunce, Quodatum, License: Apache-2.0</xqdoc:author><xqdoc:custom tag="copyright">(c) 2019-2026 Quodatum Ltd</xqdoc:custom></xqdoc:comment><xqdoc:body>xquery version "3.1";&#xD;
(:~&#xD;
  &lt;p&gt;Generate HTML describing the rest interface&lt;/p&gt; &#xD;
  @copyright (c) 2019-2026 Quodatum Ltd&#xD;
  @author Andy Bunce, Quodatum, License: Apache-2.0&#xD;
 :)&#xD;
&#xD;
module namespace _ = 'quodatum:xqdoca.generator.rest';&#xD;
&#xD;
import module namespace tree = 'quodatum:data.tree' at "../lib/tree.xqm";&#xD;
import module namespace xqd = 'quodatum:xqdoca.model' at "../lib/model.xqm";&#xD;
import module namespace page = 'quodatum:xqdoca.page'  at "../lib/xqdoc-page.xqm";&#xD;
import module namespace xqa = 'quodatum:xqdoca.model.annotations' at "../lib/annotations.xqm";&#xD;
declare namespace xqdoc="http://www.xqdoc.org/1.0";&#xD;
declare namespace xqdoca="https://github.com/Quodatum/xqdoca";&#xD;
&#xD;
&#xD;
(:~&#xD;
 : rest interface html for page. &#xD;
 :)&#xD;
declare &#xD;
%xqdoca:global("restxq","Summary of REST interface")&#xD;
%xqdoca:output("restxq.html","xhtml") &#xD;
function _:restxq($model,$opts)&#xD;
{&#xD;
let $annots as map(*)*:= xqd:rxq-paths($model)&#xD;
&#xD;
let $tree:=$annots?uri&#xD;
let $tree:=tree:build($tree)=&gt;tree:flatten()&#xD;
&#xD;
let $sections:=(&#xD;
           _:summary($model, $opts, $tree),&#xD;
&#xD;
           &lt;section id="rest"&gt;&#xD;
             &lt;h2&gt;Rest interface paths&lt;/h2&gt;&#xD;
             {$annots!_:path-report(.,(2,position()))}&#xD;
           &lt;/section&gt;&#xD;
        )&#xD;
let $body:= &lt;div&gt;&#xD;
              &lt;h1&gt;&#xD;
                 Project &lt;span class="badge badge-info"&gt;&#xD;
                      { $opts?project }&#xD;
                  &lt;/span&gt;&#xD;
                  &amp;#160;RestXQ documentation &#xD;
              &lt;/h1&gt;&#xD;
            {_:toc($opts,$tree,$annots)}&#xD;
            { $sections }&#xD;
           &lt;/div&gt;&#xD;
return  page:wrap($body,$opts)&#xD;
};&#xD;
&#xD;
&#xD;
declare function _:summary($model,$opts, $tree as element(directory)?)&#xD;
as element(section)&#xD;
{&#xD;
     &lt;section id="summary"&gt;&#xD;
        &lt;h2&gt;Summary&lt;/h2&gt; &#xD;
        {if(exists($tree))&#xD;
        then &#xD;
        &lt;div&gt;    &#xD;
        &lt;p&gt;This document provides details of the RestXQ annotations. These provide mappings from Web endpoints to XQuery code.&lt;/p&gt;&#xD;
         &lt;dl&gt;&#xD;
            &lt;dt&gt;Base path&lt;/dt&gt;&#xD;
            &lt;dd&gt;{ tree:base($tree) }&lt;/dd&gt;&#xD;
        &lt;/dl&gt;&#xD;
        &lt;/div&gt; &#xD;
        else &#xD;
        &lt;p&gt;No RESTXQ usage&lt;/p&gt;}&#xD;
        { page:related-links("global","restxq",$opts) }&#xD;
     &lt;/section&gt;&#xD;
};&#xD;
&#xD;
&#xD;
(:~  html for a path&#xD;
 :   $anot={uri:.., methods:{METHOD:annotation}, function:..}&#xD;
 :)          &#xD;
declare function _:path-report($anot as map(*),$pos)&#xD;
as element(div)&#xD;
{&#xD;
 let $methods as map(*) :=$anot?methods &#xD;
 return &lt;div class="div3"&gt;&#xD;
       &lt;h3&gt;&lt;a id="{ page:id($anot?uri) }"/&gt;{page:section($pos) } { $anot?uri }&#xD;
       &lt;div style="float:right;"&gt;&lt;a href="#{ page:id($anot?uri) }"&gt;#&lt;/a&gt;&lt;/div&gt;&lt;/h3&gt;&#xD;
       &#xD;
       {&#xD;
       for $method in map:keys($methods)&#xD;
       let $amap:=$methods?($method)&#xD;
       return _:method($method,$amap,$anot)&#xD;
       }&#xD;
   &lt;/div&gt;&#xD;
};&#xD;
&#xD;
(:~  method entry :)&#xD;
declare function _:method($method as xs:string,$amap as map(*),$rep as map(*))&#xD;
as element(div)&#xD;
{&#xD;
  let $annots:=$amap?xqdoc//xqdoc:annotation&#xD;
  &#xD;
  return &lt;div&gt;&#xD;
    &lt;h4&gt;&#xD;
        &lt;a id="{ $rep?uri}#{ $method}"/&gt;&#xD;
        &lt;a href="#{ $rep?uri}#{ $method}"&gt;{ page:badge-method($method)}&lt;/a&gt; &amp;#160;&#xD;
         { $rep?uri }&#xD;
         &lt;div style="float:right"&gt;&#xD;
         { xqa:badges($annots, $amap?file, page:badge#3) }&#xD;
       &lt;/div&gt; &#xD;
    &lt;/h4&gt;&#xD;
    &lt;dl&gt;&#xD;
    &lt;dt&gt;Description&lt;/dt&gt;&#xD;
    &lt;dd&gt;&lt;p&gt;{$amap?description}&lt;/p&gt;&#xD;
      {  page:link-function2($amap?uri, $amap?name, $amap?file, false())  }&#xD;
    &lt;/dd&gt;&#xD;
    {_:outputs($annots,$amap)}&#xD;
    { _:url-params($rep?uri,$amap) }&#xD;
    { _:params($annots,"query-param","Query parameters",$amap) }&#xD;
    { _:params($annots,"form-param","Form parameters",$amap) }&#xD;
    { _:params($annots,"header-param","Header parameters",$amap) }&#xD;
    &lt;/dl&gt;&#xD;
    { _:annotations($annots) }&#xD;
  &lt;/div&gt;&#xD;
};&#xD;
&#xD;
(:~  output form :)&#xD;
declare function _:url-params($url as xs:string, &#xD;
                           $amap as map(*))&#xD;
as element(*)*&#xD;
{&#xD;
  let $names:=xqa:extract-restxq($url)!substring-before(. || "=","=")&#xD;
  let $function:=$amap?annot/../..&#xD;
  return if(exists($names))&#xD;
         then&#xD;
            (&lt;dt&gt;Url parameters&lt;/dt&gt;,&#xD;
            &lt;dd&gt;&#xD;
            &lt;table class="data"&gt;&#xD;
              &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&#xD;
              &lt;tbody&gt;{ &#xD;
              for $name  in $names&#xD;
              let $desc:=page:comment-for($name,$function/xqdoc:parameters)&#xD;
              return &lt;tr&gt;&lt;td&gt;{$name}&lt;/td&gt;&lt;td&gt;{$desc}&lt;/td&gt;&lt;/tr&gt;&#xD;
            }&#xD;
              &lt;/tbody&gt;&#xD;
            &lt;/table&gt;&#xD;
            &lt;/dd&gt;)&#xD;
          else&#xD;
          ()&#xD;
};&#xD;
(:~  output form :)&#xD;
declare function _:outputs($annots as element(xqdoc:annotation)*, &#xD;
                           $amap as map(*))&#xD;
as element(*)*&#xD;
{&#xD;
  let $ns:=$amap?file?namespaces&#xD;
  let $p:=filter($annots,xqa:is-rest(?,"produces",$ns))&#xD;
  let $s:=filter($annots, xqa:is-out(?,"method",$ns))&#xD;
  return if ($p or $s)then&#xD;
       (&lt;dt&gt;Output&lt;/dt&gt;,&#xD;
        &lt;dd&gt;{if($s)then&#xD;
           &lt;div&gt;Serialization: {$s/xqdoc:literal/string()}&lt;/div&gt;&#xD;
          else&#xD;
            ()&#xD;
        }{if($p)then&#xD;
           &lt;div&gt;Produces: { $p/xqdoc:literal/string()}&lt;/div&gt;&#xD;
          else&#xD;
            ()&#xD;
        }  &#xD;
        &lt;/dd&gt;)&#xD;
    else&#xD;
        ()&#xD;
};&#xD;
&#xD;
(:~  toc &#xD;
@param $annots {url:{methods:}..}&#xD;
:)&#xD;
declare function _:toc($opts as map(*),$tree as element(directory)?,$annots as map(*)*)&#xD;
as element(nav)&#xD;
{&#xD;
     &lt;nav id="toc"&gt;&#xD;
            &lt;h2&gt;&#xD;
                 &lt;a href="index.html"&gt;&#xD;
                    { $opts?project }&#xD;
                &lt;/a&gt;&#xD;
                / RestXQ&#xD;
            &lt;/h2&gt;&#xD;
           {page:related-buttons("global","restxq", $opts) }&#xD;
           &lt;h3&gt;&#xD;
               Contents&#xD;
            &lt;/h3&gt;&#xD;
            &lt;ol class="toc"&gt;&#xD;
                &lt;li&gt;&#xD;
                    &lt;a href="#summary"&gt;&#xD;
                        &lt;span class="secno"&gt;1 &lt;/span&gt;&#xD;
                        &lt;span class="content"&gt;Summary&lt;/span&gt;&#xD;
                    &lt;/a&gt;&#xD;
                &lt;/li&gt;&#xD;
                 &lt;li  &gt;&#xD;
                    &lt;a href="#rest"&gt;&#xD;
                        &lt;span class="secno"&gt;2 &lt;/span&gt;&#xD;
                        &lt;span class="content"&gt;Rest Paths&lt;/span&gt;&#xD;
                    &lt;/a&gt;&#xD;
                &lt;/li&gt;&#xD;
                { $tree/*!page:tree-list(.,(2,position()),_:toc-render(?,?,$annots),1) } &#xD;
             &lt;/ol&gt;&#xD;
           &lt;/nav&gt;&#xD;
};&#xD;
&#xD;
&#xD;
(:~ generate TOC&#xD;
@param $pos eg "2.7"&#xD;
@param $el &lt;file&gt; or &lt;directory&gt;&#xD;
@param $annots &#xD;
:)&#xD;
declare function _:toc-render($pos as xs:string,$el as element(*),$annots as map(*)*)&#xD;
as element(*)*&#xD;
{&#xD;
let $target:= $el/@target  &#xD;
let $label:=$el/head((@target,@name))=&gt;_:rxpath("drop-pattern")&#xD;
let $c:=(&#xD;
&lt;span class="secno"&gt;{$pos}&lt;/span&gt;,&#xD;
&lt;span class="content"&gt;{ $label }&lt;/span&gt;&#xD;
)&#xD;
return if($target) then&#xD;
 &lt;a href="#{ page:id($el/@target) }"&gt;&#xD;
 { $c }&#xD;
 &lt;div  style="float:right;font-size:75%" title="RESTXQ methods"&gt;&#xD;
 {let $methods:=$annots[?uri=$target]?methods&#xD;
  return if($methods instance of map(*)) then map:keys($methods)!page:badge-method(.)}&#xD;
 &lt;/div&gt;&#xD;
  &lt;/a&gt;&#xD;
else&#xD;
 $c&#xD;
};&#xD;
&#xD;
(:~ annotation details :)&#xD;
declare function _:annotations($annots as element(xqdoc:annotation)*)&#xD;
as element(*)&#xD;
{&#xD;
		&lt;details&gt;&#xD;
			&lt;summary&gt;Annotations ({ count($annots) })&lt;/summary&gt;&#xD;
			&lt;table class="data"&gt;&#xD;
				&lt;tbody&gt;{ &#xD;
       for $a in $annots&#xD;
       return 	&#xD;
             &lt;tr&gt;&#xD;
                &lt;td&gt;&#xD;
                  &lt;code class="function"&gt;%{ $a/@name/string() }&lt;/code&gt;&#xD;
                &lt;/td&gt;&#xD;
                &lt;td&gt;&#xD;
                  &lt;code class="arg"&gt;{ xqa:literals($a/xqdoc:literal) }&lt;/code&gt;&#xD;
                &lt;/td&gt;&#xD;
              &lt;/tr&gt;&#xD;
    }&lt;/tbody&gt;&#xD;
			&lt;/table&gt;&#xD;
		&lt;/details&gt;&#xD;
};&#xD;
&#xD;
(:~&#xD;
 :  o/p table of parameters,wrapped in dd item&#xD;
 :)&#xD;
 declare function _:params($annots as element(xqdoc:annotation)*,&#xD;
                                $name as xs:string,&#xD;
                                $title as xs:string,&#xD;
                                $amap as map(*))&#xD;
as element(*)*&#xD;
{&#xD;
  let $aq:=filter($annots,xqa:is-rest(?,$name,$amap?file?namespaces))&#xD;
  return if($aq) then &#xD;
  (&lt;dt&gt;{ $title }&lt;/dt&gt;,&#xD;
         &lt;dd&gt;&#xD;
         &lt;table class="data"&gt;&#xD;
         &lt;thead&gt;&lt;tr&gt;&#xD;
            &lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Default&lt;/th&gt;&#xD;
          &lt;/tr&gt;&lt;/thead&gt;&#xD;
         &lt;tbody&gt;&#xD;
         {for $a in $aq&#xD;
        (:  let $a:=trace($a,"A:") :)&#xD;
          let $p:=$a/xqdoc:literal/string()&#xD;
          &#xD;
          let $name:=fn:replace($p[2],"\{\s*\$(\w*)\s*\}","$1") (: =&gt;trace("NAME: ") :)&#xD;
          let $fn:=$amap?annot/../..&#xD;
          let $desc:=page:comment-for($name,$fn/xqdoc:parameters)&#xD;
          let $type:=$fn/xqdoc:parameters/xqdoc:parameter[xqdoc:name=$name]/xqdoc:type/concat(.,@occurrence)&#xD;
          return &lt;tr&gt;&#xD;
             &lt;td&gt;{$name}&lt;/td&gt;&#xD;
             &lt;td&gt;{ $type} &lt;/td&gt;&#xD;
             &lt;td&gt;{ $desc }&lt;/td&gt;&#xD;
             &lt;td&gt;{$p[3]}&lt;/td&gt;&#xD;
             &lt;/tr&gt;}&#xD;
         &lt;/tbody&gt;&#xD;
         &lt;/table&gt;&#xD;
         &lt;/dd&gt;)&#xD;
      else &#xD;
      ()&#xD;
};&#xD;
&#xD;
(:~ restxq path manipulations&#xD;
 :)&#xD;
declare function _:rxpath($path as xs:string,$action as xs:string)&#xD;
as xs:string{&#xD;
switch ($action)&#xD;
(: "/locks/{$ctype}/{$cid=.+}/{$coid=.+}" -&gt; '/locks/ctype/{$cid=.+}/{$coid=.+}' :)&#xD;
case "name" &#xD;
     return fn:replace($path,"\{\s*\$(\w*)\s*\}","$1")&#xD;
&#xD;
(: "/locks/{$ctype}/{$cid=.+}/{$coid=.+}" -&gt; '/locks/{$ctype}/{$cid}/{$coid}' :)&#xD;
case "drop-pattern"  &#xD;
     return fn:replace($path,"\{\s*(\$\w*)=[^}]*\}","{$1}") &#xD;
&#xD;
default&#xD;
   return error("unknown action: " || $action)&#xD;
};&#xD;
</xqdoc:body></xqdoc:module><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>quodatum:data.tree</xqdoc:uri><xqdoc:at>../lib/tree.xqm</xqdoc:at></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>quodatum:xqdoca.model</xqdoc:uri><xqdoc:at>../lib/model.xqm</xqdoc:at></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>quodatum:xqdoca.page</xqdoc:uri><xqdoc:at>../lib/xqdoc-page.xqm</xqdoc:at></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>quodatum:xqdoca.model.annotations</xqdoc:uri><xqdoc:at>../lib/annotations.xqm</xqdoc:at></xqdoc:import></xqdoc:imports><xqdoc:namespaces><xqdoc:namespace prefix="_" uri="quodatum:xqdoca.generator.rest"/><xqdoc:namespace prefix="tree" uri="quodatum:data.tree"/><xqdoc:namespace prefix="xqd" uri="quodatum:xqdoca.model"/><xqdoc:namespace prefix="page" uri="quodatum:xqdoca.page"/><xqdoc:namespace prefix="xqa" uri="quodatum:xqdoca.model.annotations"/><xqdoc:namespace prefix="xqdoc" uri="http://www.xqdoc.org/1.0"/><xqdoc:namespace prefix="xqdoca" uri="https://github.com/Quodatum/xqdoca"/><xqdoc:namespace prefix="map" uri="http://www.w3.org/2005/xpath-functions/map"/><xqdoc:namespace prefix="xs" uri="http://www.w3.org/2001/XMLSchema"/><xqdoc:namespace prefix="fn" uri="http://www.w3.org/2005/xpath-functions"/></xqdoc:namespaces><xqdoc:variables/><xqdoc:functions><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
rest interface html for page.&#xD;
</xqdoc:description></xqdoc:comment><xqdoc:name>_:restxq</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="xqdoca:global"><xqdoc:literal type="xs:string">restxq</xqdoc:literal><xqdoc:literal type="xs:string">Summary of REST interface</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="xqdoca:output"><xqdoc:literal type="xs:string">restxq.html</xqdoc:literal><xqdoc:literal type="xs:string">xhtml</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>function _:restxq ( $model,$opts ) { let $annots as map(*)*:= xqd:rxq-paths($model) let $tree:=$annots?uri let $tree:=tree:build($tree)=&gt;tree:flatten() let $sections:=( _:summary($model, $opts, $tree), &lt;section id="rest"&gt; &lt;h2&gt;Rest interface paths&lt;/h2&gt; {$annots!_:path-report(.,(2,position()))} &lt;/section&gt; ) let $body:= &lt;div&gt; &lt;h1&gt; Project &lt;span class="badge badge-info"&gt; { $opts?project } &lt;/span&gt; &amp;#160;RestXQ documentation &lt;/h1&gt; {_:toc($opts,$tree,$annots)} { $sections } &lt;/div&gt; return page:wrap($body,$opts) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>model</xqdoc:name></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:body>function _:restxq($model,$opts)&#xD;
{&#xD;
let $annots as map(*)*:= xqd:rxq-paths($model)&#xD;
&#xD;
let $tree:=$annots?uri&#xD;
let $tree:=tree:build($tree)=&gt;tree:flatten()&#xD;
&#xD;
let $sections:=(&#xD;
           _:summary($model, $opts, $tree),&#xD;
&#xD;
           &lt;section id="rest"&gt;&#xD;
             &lt;h2&gt;Rest interface paths&lt;/h2&gt;&#xD;
             {$annots!_:path-report(.,(2,position()))}&#xD;
           &lt;/section&gt;&#xD;
        )&#xD;
let $body:= &lt;div&gt;&#xD;
              &lt;h1&gt;&#xD;
                 Project &lt;span class="badge badge-info"&gt;&#xD;
                      { $opts?project }&#xD;
                  &lt;/span&gt;&#xD;
                  &amp;#160;RestXQ documentation &#xD;
              &lt;/h1&gt;&#xD;
            {_:toc($opts,$tree,$annots)}&#xD;
            { $sections }&#xD;
           &lt;/div&gt;&#xD;
return  page:wrap($body,$opts)&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:name>_:summary</xqdoc:name><xqdoc:signature>function _:summary ( $model,$opts, $tree as element(directory)? ) as element(section) { &lt;section id="summary"&gt; &lt;h2&gt;Summary&lt;/h2&gt; {if(exists($tree)) then &lt;div&gt; &lt;p&gt;This document provides details of the RestXQ annotations. These provide mappings from Web endpoints to XQuery code.&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;Base path&lt;/dt&gt; &lt;dd&gt;{ tree:base($tree) }&lt;/dd&gt; &lt;/dl&gt; &lt;/div&gt; else &lt;p&gt;No RESTXQ usage&lt;/p&gt;} { page:related-links("global","restxq",$opts) } &lt;/section&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>model</xqdoc:name></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name></xqdoc:parameter><xqdoc:parameter><xqdoc:name>tree</xqdoc:name><xqdoc:type occurrence="?">element(directory)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(section)</xqdoc:type></xqdoc:return><xqdoc:body>function _:summary($model,$opts, $tree as element(directory)?)&#xD;
as element(section)&#xD;
{&#xD;
     &lt;section id="summary"&gt;&#xD;
        &lt;h2&gt;Summary&lt;/h2&gt; &#xD;
        {if(exists($tree))&#xD;
        then &#xD;
        &lt;div&gt;    &#xD;
        &lt;p&gt;This document provides details of the RestXQ annotations. These provide mappings from Web endpoints to XQuery code.&lt;/p&gt;&#xD;
         &lt;dl&gt;&#xD;
            &lt;dt&gt;Base path&lt;/dt&gt;&#xD;
            &lt;dd&gt;{ tree:base($tree) }&lt;/dd&gt;&#xD;
        &lt;/dl&gt;&#xD;
        &lt;/div&gt; &#xD;
        else &#xD;
        &lt;p&gt;No RESTXQ usage&lt;/p&gt;}&#xD;
        { page:related-links("global","restxq",$opts) }&#xD;
     &lt;/section&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
html for a path&#xD;
$anot={uri:.., methods:{METHOD:annotation}, function:..}&#xD;
</xqdoc:description></xqdoc:comment><xqdoc:name>_:path-report</xqdoc:name><xqdoc:signature>function _:path-report ( $anot as map(*),$pos ) as element(div) { let $methods as map(*) :=$anot?methods return &lt;div class="div3"&gt; &lt;h3&gt;&lt;a id="{ page:id($anot?uri) }"/&gt;{page:section($pos) } { $anot?uri } &lt;div style="float:right;"&gt;&lt;a href="#{ page:id($anot?uri) }"&gt;#&lt;/a&gt;&lt;/div&gt;&lt;/h3&gt; { for $method in map:keys($methods) let $amap:=$methods?($method) return _:method($method,$amap,$anot) } &lt;/div&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>anot</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>pos</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(div)</xqdoc:type></xqdoc:return><xqdoc:body>function _:path-report($anot as map(*),$pos)&#xD;
as element(div)&#xD;
{&#xD;
 let $methods as map(*) :=$anot?methods &#xD;
 return &lt;div class="div3"&gt;&#xD;
       &lt;h3&gt;&lt;a id="{ page:id($anot?uri) }"/&gt;{page:section($pos) } { $anot?uri }&#xD;
       &lt;div style="float:right;"&gt;&lt;a href="#{ page:id($anot?uri) }"&gt;#&lt;/a&gt;&lt;/div&gt;&lt;/h3&gt;&#xD;
       &#xD;
       {&#xD;
       for $method in map:keys($methods)&#xD;
       let $amap:=$methods?($method)&#xD;
       return _:method($method,$amap,$anot)&#xD;
       }&#xD;
   &lt;/div&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>&#xD;
method entry</xqdoc:description></xqdoc:comment><xqdoc:name>_:method</xqdoc:name><xqdoc:signature>function _:method ( $method as xs:string,$amap as map(*),$rep as map(*) ) as element(div) { let $annots:=$amap?xqdoc//xqdoc:annotation return &lt;div&gt; &lt;h4&gt; &lt;a id="{ $rep?uri}#{ $method}"/&gt; &lt;a href="#{ $rep?uri}#{ $method}"&gt;{ page:badge-method($method)}&lt;/a&gt; &amp;#160; { $rep?uri } &lt;div style="float:right"&gt; { xqa:badges($annots, $amap?file, page:badge#3) } &lt;/div&gt; &lt;/h4&gt; &lt;dl&gt; &lt;dt&gt;Description&lt;/dt&gt; &lt;dd&gt;&lt;p&gt;{$amap?description}&lt;/p&gt; { page:link-function2($amap?uri, $amap?name, $amap?file, false()) } &lt;/dd&gt; {_:outputs($annots,$amap)} { _:url-params($rep?uri,$amap) } { _:params($annots,"query-param","Query parameters",$amap) } { _:params($annots,"form-param","Form parameters",$amap) } { _:params($annots,"header-param","Header parameters",$amap) } &lt;/dl&gt; { _:annotations($annots) } &lt;/div&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>method</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>amap</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>rep</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(div)</xqdoc:type></xqdoc:return><xqdoc:body>function _:method($method as xs:string,$amap as map(*),$rep as map(*))&#xD;
as element(div)&#xD;
{&#xD;
  let $annots:=$amap?xqdoc//xqdoc:annotation&#xD;
  &#xD;
  return &lt;div&gt;&#xD;
    &lt;h4&gt;&#xD;
        &lt;a id="{ $rep?uri}#{ $method}"/&gt;&#xD;
        &lt;a href="#{ $rep?uri}#{ $method}"&gt;{ page:badge-method($method)}&lt;/a&gt; &amp;#160;&#xD;
         { $rep?uri }&#xD;
         &lt;div style="float:right"&gt;&#xD;
         { xqa:badges($annots, $amap?file, page:badge#3) }&#xD;
       &lt;/div&gt; &#xD;
    &lt;/h4&gt;&#xD;
    &lt;dl&gt;&#xD;
    &lt;dt&gt;Description&lt;/dt&gt;&#xD;
    &lt;dd&gt;&lt;p&gt;{$amap?description}&lt;/p&gt;&#xD;
      {  page:link-function2($amap?uri, $amap?name, $amap?file, false())  }&#xD;
    &lt;/dd&gt;&#xD;
    {_:outputs($annots,$amap)}&#xD;
    { _:url-params($rep?uri,$amap) }&#xD;
    { _:params($annots,"query-param","Query parameters",$amap) }&#xD;
    { _:params($annots,"form-param","Form parameters",$amap) }&#xD;
    { _:params($annots,"header-param","Header parameters",$amap) }&#xD;
    &lt;/dl&gt;&#xD;
    { _:annotations($annots) }&#xD;
  &lt;/div&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
output form</xqdoc:description></xqdoc:comment><xqdoc:name>_:url-params</xqdoc:name><xqdoc:signature>function _:url-params ( $url as xs:string, $amap as map(*) ) as element(*)* { let $names:=xqa:extract-restxq($url)!substring-before(. || "=","=") let $function:=$amap?annot/../.. return if(exists($names)) then (&lt;dt&gt;Url parameters&lt;/dt&gt;, &lt;dd&gt; &lt;table class="data"&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tbody&gt;{ for $name in $names let $desc:=page:comment-for($name,$function/xqdoc:parameters) return &lt;tr&gt;&lt;td&gt;{$name}&lt;/td&gt;&lt;td&gt;{$desc}&lt;/td&gt;&lt;/tr&gt; } &lt;/tbody&gt; &lt;/table&gt; &lt;/dd&gt;) else () }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>url</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>amap</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">element(*)</xqdoc:type></xqdoc:return><xqdoc:body>function _:url-params($url as xs:string, &#xD;
                           $amap as map(*))&#xD;
as element(*)*&#xD;
{&#xD;
  let $names:=xqa:extract-restxq($url)!substring-before(. || "=","=")&#xD;
  let $function:=$amap?annot/../..&#xD;
  return if(exists($names))&#xD;
         then&#xD;
            (&lt;dt&gt;Url parameters&lt;/dt&gt;,&#xD;
            &lt;dd&gt;&#xD;
            &lt;table class="data"&gt;&#xD;
              &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&#xD;
              &lt;tbody&gt;{ &#xD;
              for $name  in $names&#xD;
              let $desc:=page:comment-for($name,$function/xqdoc:parameters)&#xD;
              return &lt;tr&gt;&lt;td&gt;{$name}&lt;/td&gt;&lt;td&gt;{$desc}&lt;/td&gt;&lt;/tr&gt;&#xD;
            }&#xD;
              &lt;/tbody&gt;&#xD;
            &lt;/table&gt;&#xD;
            &lt;/dd&gt;)&#xD;
          else&#xD;
          ()&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
output form</xqdoc:description></xqdoc:comment><xqdoc:name>_:outputs</xqdoc:name><xqdoc:signature>function _:outputs ( $annots as element(xqdoc:annotation)*, $amap as map(*) ) as element(*)* { let $ns:=$amap?file?namespaces let $p:=filter($annots,xqa:is-rest(?,"produces",$ns)) let $s:=filter($annots, xqa:is-out(?,"method",$ns)) return if ($p or $s)then (&lt;dt&gt;Output&lt;/dt&gt;, &lt;dd&gt;{if($s)then &lt;div&gt;Serialization: {$s/xqdoc:literal/string()}&lt;/div&gt; else () }{if($p)then &lt;div&gt;Produces: { $p/xqdoc:literal/string()}&lt;/div&gt; else () } &lt;/dd&gt;) else () }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>annots</xqdoc:name><xqdoc:type occurrence="*">element(xqdoc:annotation)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>amap</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">element(*)</xqdoc:type></xqdoc:return><xqdoc:body>function _:outputs($annots as element(xqdoc:annotation)*, &#xD;
                           $amap as map(*))&#xD;
as element(*)*&#xD;
{&#xD;
  let $ns:=$amap?file?namespaces&#xD;
  let $p:=filter($annots,xqa:is-rest(?,"produces",$ns))&#xD;
  let $s:=filter($annots, xqa:is-out(?,"method",$ns))&#xD;
  return if ($p or $s)then&#xD;
       (&lt;dt&gt;Output&lt;/dt&gt;,&#xD;
        &lt;dd&gt;{if($s)then&#xD;
           &lt;div&gt;Serialization: {$s/xqdoc:literal/string()}&lt;/div&gt;&#xD;
          else&#xD;
            ()&#xD;
        }{if($p)then&#xD;
           &lt;div&gt;Produces: { $p/xqdoc:literal/string()}&lt;/div&gt;&#xD;
          else&#xD;
            ()&#xD;
        }  &#xD;
        &lt;/dd&gt;)&#xD;
    else&#xD;
        ()&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>&#xD;
toc&#xD;
</xqdoc:description><xqdoc:param>$annots {url:{methods:}..}</xqdoc:param></xqdoc:comment><xqdoc:name>_:toc</xqdoc:name><xqdoc:signature>function _:toc ( $opts as map(*),$tree as element(directory)?,$annots as map(*)* ) as element(nav) { &lt;nav id="toc"&gt; &lt;h2&gt; &lt;a href="index.html"&gt; { $opts?project } &lt;/a&gt; / RestXQ &lt;/h2&gt; {page:related-buttons("global","restxq", $opts) } &lt;h3&gt; Contents &lt;/h3&gt; &lt;ol class="toc"&gt; &lt;li&gt; &lt;a href="#summary"&gt; &lt;span class="secno"&gt;1 &lt;/span&gt; &lt;span class="content"&gt;Summary&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li &gt; &lt;a href="#rest"&gt; &lt;span class="secno"&gt;2 &lt;/span&gt; &lt;span class="content"&gt;Rest Paths&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; { $tree/*!page:tree-list(.,(2,position()),_:toc-render(?,?,$annots),1) } &lt;/ol&gt; &lt;/nav&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>tree</xqdoc:name><xqdoc:type occurrence="?">element(directory)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>annots</xqdoc:name><xqdoc:type occurrence="*">map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(nav)</xqdoc:type></xqdoc:return><xqdoc:body>function _:toc($opts as map(*),$tree as element(directory)?,$annots as map(*)*)&#xD;
as element(nav)&#xD;
{&#xD;
     &lt;nav id="toc"&gt;&#xD;
            &lt;h2&gt;&#xD;
                 &lt;a href="index.html"&gt;&#xD;
                    { $opts?project }&#xD;
                &lt;/a&gt;&#xD;
                / RestXQ&#xD;
            &lt;/h2&gt;&#xD;
           {page:related-buttons("global","restxq", $opts) }&#xD;
           &lt;h3&gt;&#xD;
               Contents&#xD;
            &lt;/h3&gt;&#xD;
            &lt;ol class="toc"&gt;&#xD;
                &lt;li&gt;&#xD;
                    &lt;a href="#summary"&gt;&#xD;
                        &lt;span class="secno"&gt;1 &lt;/span&gt;&#xD;
                        &lt;span class="content"&gt;Summary&lt;/span&gt;&#xD;
                    &lt;/a&gt;&#xD;
                &lt;/li&gt;&#xD;
                 &lt;li  &gt;&#xD;
                    &lt;a href="#rest"&gt;&#xD;
                        &lt;span class="secno"&gt;2 &lt;/span&gt;&#xD;
                        &lt;span class="content"&gt;Rest Paths&lt;/span&gt;&#xD;
                    &lt;/a&gt;&#xD;
                &lt;/li&gt;&#xD;
                { $tree/*!page:tree-list(.,(2,position()),_:toc-render(?,?,$annots),1) } &#xD;
             &lt;/ol&gt;&#xD;
           &lt;/nav&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>&#xD;
generate TOC&#xD;
</xqdoc:description><xqdoc:param>$pos eg "2.7"</xqdoc:param><xqdoc:param>$el &lt;file&gt; or &lt;directory&gt;</xqdoc:param><xqdoc:param>$annots</xqdoc:param></xqdoc:comment><xqdoc:name>_:toc-render</xqdoc:name><xqdoc:signature>function _:toc-render ( $pos as xs:string,$el as element(*),$annots as map(*)* ) as element(*)* { let $target:= $el/@target let $label:=$el/head((@target,@name))=&gt;_:rxpath("drop-pattern") let $c:=( &lt;span class="secno"&gt;{$pos}&lt;/span&gt;, &lt;span class="content"&gt;{ $label }&lt;/span&gt; ) return if($target) then &lt;a href="#{ page:id($el/@target) }"&gt; { $c } &lt;div style="float:right;font-size:75%" title="RESTXQ methods"&gt; {let $methods:=$annots[?uri=$target]?methods return if($methods instance of map(*)) then map:keys($methods)!page:badge-method(.)} &lt;/div&gt; &lt;/a&gt; else $c }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>pos</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>el</xqdoc:name><xqdoc:type>element(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>annots</xqdoc:name><xqdoc:type occurrence="*">map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">element(*)</xqdoc:type></xqdoc:return><xqdoc:body>function _:toc-render($pos as xs:string,$el as element(*),$annots as map(*)*)&#xD;
as element(*)*&#xD;
{&#xD;
let $target:= $el/@target  &#xD;
let $label:=$el/head((@target,@name))=&gt;_:rxpath("drop-pattern")&#xD;
let $c:=(&#xD;
&lt;span class="secno"&gt;{$pos}&lt;/span&gt;,&#xD;
&lt;span class="content"&gt;{ $label }&lt;/span&gt;&#xD;
)&#xD;
return if($target) then&#xD;
 &lt;a href="#{ page:id($el/@target) }"&gt;&#xD;
 { $c }&#xD;
 &lt;div  style="float:right;font-size:75%" title="RESTXQ methods"&gt;&#xD;
 {let $methods:=$annots[?uri=$target]?methods&#xD;
  return if($methods instance of map(*)) then map:keys($methods)!page:badge-method(.)}&#xD;
 &lt;/div&gt;&#xD;
  &lt;/a&gt;&#xD;
else&#xD;
 $c&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>&#xD;
annotation details</xqdoc:description></xqdoc:comment><xqdoc:name>_:annotations</xqdoc:name><xqdoc:signature>function _:annotations ( $annots as element(xqdoc:annotation)* ) as element(*) { &lt;details&gt; &lt;summary&gt;Annotations ({ count($annots) })&lt;/summary&gt; &lt;table class="data"&gt; &lt;tbody&gt;{ for $a in $annots return &lt;tr&gt; &lt;td&gt; &lt;code class="function"&gt;%{ $a/@name/string() }&lt;/code&gt; &lt;/td&gt; &lt;td&gt; &lt;code class="arg"&gt;{ xqa:literals($a/xqdoc:literal) }&lt;/code&gt; &lt;/td&gt; &lt;/tr&gt; }&lt;/tbody&gt; &lt;/table&gt; &lt;/details&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>annots</xqdoc:name><xqdoc:type occurrence="*">element(xqdoc:annotation)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(*)</xqdoc:type></xqdoc:return><xqdoc:body>function _:annotations($annots as element(xqdoc:annotation)*)&#xD;
as element(*)&#xD;
{&#xD;
		&lt;details&gt;&#xD;
			&lt;summary&gt;Annotations ({ count($annots) })&lt;/summary&gt;&#xD;
			&lt;table class="data"&gt;&#xD;
				&lt;tbody&gt;{ &#xD;
       for $a in $annots&#xD;
       return 	&#xD;
             &lt;tr&gt;&#xD;
                &lt;td&gt;&#xD;
                  &lt;code class="function"&gt;%{ $a/@name/string() }&lt;/code&gt;&#xD;
                &lt;/td&gt;&#xD;
                &lt;td&gt;&#xD;
                  &lt;code class="arg"&gt;{ xqa:literals($a/xqdoc:literal) }&lt;/code&gt;&#xD;
                &lt;/td&gt;&#xD;
              &lt;/tr&gt;&#xD;
    }&lt;/tbody&gt;&#xD;
			&lt;/table&gt;&#xD;
		&lt;/details&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="4"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
o/p table of parameters,wrapped in dd item&#xD;
</xqdoc:description></xqdoc:comment><xqdoc:name>_:params</xqdoc:name><xqdoc:signature>function _:params ( $annots as element(xqdoc:annotation)*, $name as xs:string, $title as xs:string, $amap as map(*) ) as element(*)* { let $aq:=filter($annots,xqa:is-rest(?,$name,$amap?file?namespaces)) return if($aq) then (&lt;dt&gt;{ $title }&lt;/dt&gt;, &lt;dd&gt; &lt;table class="data"&gt; &lt;thead&gt;&lt;tr&gt; &lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Default&lt;/th&gt; &lt;/tr&gt;&lt;/thead&gt; &lt;tbody&gt; {for $a in $aq (: let $a:=trace($a,"A:") :) let $p:=$a/xqdoc:literal/string() let $name:=fn:replace($p[2],"\{\s*\$(\w*)\s*\}","$1") (: =&gt;trace("NAME: ") :) let $fn:=$amap?annot/../.. let $desc:=page:comment-for($name,$fn/xqdoc:parameters) let $type:=$fn/xqdoc:parameters/xqdoc:parameter[xqdoc:name=$name]/xqdoc:type/concat(.,@occurrence) return &lt;tr&gt; &lt;td&gt;{$name}&lt;/td&gt; &lt;td&gt;{ $type} &lt;/td&gt; &lt;td&gt;{ $desc }&lt;/td&gt; &lt;td&gt;{$p[3]}&lt;/td&gt; &lt;/tr&gt;} &lt;/tbody&gt; &lt;/table&gt; &lt;/dd&gt;) else () }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>annots</xqdoc:name><xqdoc:type occurrence="*">element(xqdoc:annotation)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>title</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>amap</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">element(*)</xqdoc:type></xqdoc:return><xqdoc:body>function _:params($annots as element(xqdoc:annotation)*,&#xD;
                                $name as xs:string,&#xD;
                                $title as xs:string,&#xD;
                                $amap as map(*))&#xD;
as element(*)*&#xD;
{&#xD;
  let $aq:=filter($annots,xqa:is-rest(?,$name,$amap?file?namespaces))&#xD;
  return if($aq) then &#xD;
  (&lt;dt&gt;{ $title }&lt;/dt&gt;,&#xD;
         &lt;dd&gt;&#xD;
         &lt;table class="data"&gt;&#xD;
         &lt;thead&gt;&lt;tr&gt;&#xD;
            &lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Default&lt;/th&gt;&#xD;
          &lt;/tr&gt;&lt;/thead&gt;&#xD;
         &lt;tbody&gt;&#xD;
         {for $a in $aq&#xD;
        (:  let $a:=trace($a,"A:") :)&#xD;
          let $p:=$a/xqdoc:literal/string()&#xD;
          &#xD;
          let $name:=fn:replace($p[2],"\{\s*\$(\w*)\s*\}","$1") (: =&gt;trace("NAME: ") :)&#xD;
          let $fn:=$amap?annot/../..&#xD;
          let $desc:=page:comment-for($name,$fn/xqdoc:parameters)&#xD;
          let $type:=$fn/xqdoc:parameters/xqdoc:parameter[xqdoc:name=$name]/xqdoc:type/concat(.,@occurrence)&#xD;
          return &lt;tr&gt;&#xD;
             &lt;td&gt;{$name}&lt;/td&gt;&#xD;
             &lt;td&gt;{ $type} &lt;/td&gt;&#xD;
             &lt;td&gt;{ $desc }&lt;/td&gt;&#xD;
             &lt;td&gt;{$p[3]}&lt;/td&gt;&#xD;
             &lt;/tr&gt;}&#xD;
         &lt;/tbody&gt;&#xD;
         &lt;/table&gt;&#xD;
         &lt;/dd&gt;)&#xD;
      else &#xD;
      ()&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
restxq path manipulations&#xD;
</xqdoc:description></xqdoc:comment><xqdoc:name>_:rxpath</xqdoc:name><xqdoc:signature>function _:rxpath ( $path as xs:string,$action as xs:string ) as xs:string { switch ($action) (: "/locks/{$ctype}/{$cid=.+}/{$coid=.+}" -&gt; '/locks/ctype/{$cid=.+}/{$coid=.+}' :) case "name" return fn:replace($path,"\{\s*\$(\w*)\s*\}","$1") (: "/locks/{$ctype}/{$cid=.+}/{$coid=.+}" -&gt; '/locks/{$ctype}/{$cid}/{$coid}' :) case "drop-pattern" return fn:replace($path,"\{\s*(\$\w*)=[^}]*\}","{$1}") default return error("unknown action: " || $action) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>path</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>action</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return><xqdoc:body>function _:rxpath($path as xs:string,$action as xs:string)&#xD;
as xs:string{&#xD;
switch ($action)&#xD;
(: "/locks/{$ctype}/{$cid=.+}/{$coid=.+}" -&gt; '/locks/ctype/{$cid=.+}/{$coid=.+}' :)&#xD;
case "name" &#xD;
     return fn:replace($path,"\{\s*\$(\w*)\s*\}","$1")&#xD;
&#xD;
(: "/locks/{$ctype}/{$cid=.+}/{$coid=.+}" -&gt; '/locks/{$ctype}/{$cid}/{$coid}' :)&#xD;
case "drop-pattern"  &#xD;
     return fn:replace($path,"\{\s*(\$\w*)=[^}]*\}","{$1}") &#xD;
&#xD;
default&#xD;
   return error("unknown action: " || $action)&#xD;
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>