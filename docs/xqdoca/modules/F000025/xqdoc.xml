<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2025-05-17T18:35:19.705+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>quodatum:data.tree</xqdoc:uri><xqdoc:name>tree</xqdoc:name><xqdoc:comment><xqdoc:description><p>Convert sequence of paths as strings to an sequence of xml trees representing the paths.</p></xqdoc:description><xqdoc:author>Andy Bunce, Quodatum, License: Apache-2.0</xqdoc:author><xqdoc:custom tag="Copyright">(c) 2026 Quodatum Ltd</xqdoc:custom></xqdoc:comment><xqdoc:body>xquery version "3.1";&#xD;
&#xD;
 &#xD;
(:~&#xD;
&lt;p&gt;Convert sequence of paths as strings to an sequence of xml trees representing the paths.&lt;/p&gt;&#xD;
@Copyright (c) 2026 Quodatum Ltd&#xD;
@author Andy Bunce, Quodatum, License: Apache-2.0&#xD;
:)&#xD;
module namespace tree = 'quodatum:data.tree';&#xD;
&#xD;
&#xD;
(:~&#xD;
 : convert path(s) to tree&#xD;
 :)&#xD;
declare function tree:build($paths as xs:string*)&#xD;
as element(directory)?&#xD;
{&#xD;
 tree:build($paths,"/")&#xD;
};&#xD;
&#xD;
(:~&#xD;
 : @return sequence of nested &lt;directory name=".."&gt; and &lt;file name=".." elements representing source&#xD;
 :)&#xD;
declare function tree:build($paths as xs:string*,$delimiter as xs:string)&#xD;
as element(*)*&#xD;
{&#xD;
fn:fold-right($paths,&#xD;
             (),&#xD;
             function($this,$acc){ tree:merge($acc,tree:nest($this,$delimiter)) }&#xD;
            )&#xD;
};&#xD;
 &#xD;
(:~  convert a path to xml :)&#xD;
declare %private &#xD;
function tree:nest($path as xs:string,$delimiter as xs:string)&#xD;
as element(*)&#xD;
{&#xD;
  let $path:=if(starts-with($path,$delimiter)) then $path else $delimiter || $path&#xD;
  let $parts:=fn:tokenize(($path),$delimiter)&#xD;
  return fn:fold-right(subsequence($parts,1,count($parts)-1),&#xD;
    &lt;file name="{$parts[last()]}" target="{$path}"/&gt;,&#xD;
    tree:wrap#2 &#xD;
   )&#xD;
};&#xD;
&#xD;
declare %private &#xD;
function tree:wrap($this as xs:string,$acc)&#xD;
as element(*)&#xD;
{&#xD;
  &lt;directory name="{$this}"&gt;{$acc}&lt;/directory&gt;&#xD;
};&#xD;
&#xD;
&#xD;
declare %private&#xD;
function tree:merge($a1 as element(*)?,$a2 as element(*)?)&#xD;
as element(*)*&#xD;
{&#xD;
 if($a1/@name=$a2/@name) then&#xD;
      let $n1:=$a1/*&#xD;
      let $n2:=$a2/*&#xD;
         &#xD;
      let $t:=(&#xD;
        for $x in fn:distinct-values($n1/@name[.=$n2/@name]) (:both:)&#xD;
        return tree:merge($a1/*[@name=$x],$a2/*[@name=$x]),&#xD;
        &#xD;
        for $x in fn:distinct-values($n1/@name[fn:not(.=$n2/@name)]) (:only $a1 :)&#xD;
        return $a1/*[@name=$x],&#xD;
        &#xD;
        for $x in fn:distinct-values($n2/@name[fn:not(.=$n1/@name)]) (:only $a2 :)&#xD;
        return $a2/*[@name=$x]&#xD;
      )&#xD;
      let $name:=$a1/@name&#xD;
      let $target:=($a1/@target,$a2/@target)[1]&#xD;
      return &lt;directory &gt;{&#xD;
        $name,$target,&#xD;
        for $x in $t order by $x/@name return $x&#xD;
      }&lt;/directory&gt;&#xD;
 else &#xD;
     ($a1,$a2)                        &#xD;
};&#xD;
&#xD;
(:~ extract any shared leading common path :)&#xD;
declare function tree:base($tree as element(directory)?)&#xD;
as xs:string{&#xD;
  let $c:= $tree/directory&#xD;
  let $ok:= count($c)=1 and count($tree/*)=1&#xD;
  let $tail:= if ($ok) &#xD;
              then  tree:base($c) &#xD;
              else ()&#xD;
  return ("",$tree/@name/string() ,$tail)=&gt;string-join("/")&#xD;
};&#xD;
&#xD;
(: merger folder with just 1 folder child:)&#xD;
declare function tree:flatten($tree as element(directory)?)&#xD;
as element(directory)?{&#xD;
if(exists($tree)) &#xD;
then &#xD;
      $tree transform with {&#xD;
      for $d in  descendant::directory[ count(../*) gt 1 and not(@target)] (: no @target and more than 1 parent :)&#xD;
      let $name:= $d/descendant-or-self::directory/@name=&gt;string-join("/")&#xD;
      return replace   node $d &#xD;
            with let $files:=$d//file&#xD;
                  return if(count($files) gt 1)  &#xD;
                        then  &lt;directory name="{ $name}"&gt;{ $files} &lt;/directory&gt;&#xD;
                        else $files&#xD;
      }&#xD;
  else ()&#xD;
};&#xD;
</xqdoc:body></xqdoc:module><xqdoc:namespaces><xqdoc:namespace prefix="tree" uri="quodatum:data.tree"/><xqdoc:namespace prefix="xs" uri="http://www.w3.org/2001/XMLSchema"/><xqdoc:namespace prefix="fn" uri="http://www.w3.org/2005/xpath-functions"/></xqdoc:namespaces><xqdoc:variables/><xqdoc:functions><xqdoc:function arity="1"><xqdoc:name>tree:build</xqdoc:name><xqdoc:signature>function tree:build ( $paths as xs:string* ) as element(directory)? { tree:build($paths,"/") }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>paths</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="?">element(directory)</xqdoc:type></xqdoc:return><xqdoc:body>function tree:build($paths as xs:string*)&#xD;
as element(directory)?&#xD;
{&#xD;
 tree:build($paths,"/")&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
</xqdoc:description><xqdoc:return>sequence of nested &lt;directory name=".."&gt; and &lt;file name=".." elements representing source</xqdoc:return></xqdoc:comment><xqdoc:name>tree:build</xqdoc:name><xqdoc:signature>function tree:build ( $paths as xs:string*,$delimiter as xs:string ) as element(*)* { fn:fold-right($paths, (), function($this,$acc){ tree:merge($acc,tree:nest($this,$delimiter)) } ) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>paths</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>delimiter</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">element(*)</xqdoc:type></xqdoc:return><xqdoc:body>function tree:build($paths as xs:string*,$delimiter as xs:string)&#xD;
as element(*)*&#xD;
{&#xD;
fn:fold-right($paths,&#xD;
             (),&#xD;
             function($this,$acc){ tree:merge($acc,tree:nest($this,$delimiter)) }&#xD;
            )&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
convert a path to xml</xqdoc:description></xqdoc:comment><xqdoc:name>tree:nest</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function tree:nest ( $path as xs:string,$delimiter as xs:string ) as element(*) { let $path:=if(starts-with($path,$delimiter)) then $path else $delimiter || $path let $parts:=fn:tokenize(($path),$delimiter) return fn:fold-right(subsequence($parts,1,count($parts)-1), &lt;file name="{$parts[last()]}" target="{$path}"/&gt;, tree:wrap#2 ) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>path</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>delimiter</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(*)</xqdoc:type></xqdoc:return><xqdoc:body>function tree:nest($path as xs:string,$delimiter as xs:string)&#xD;
as element(*)&#xD;
{&#xD;
  let $path:=if(starts-with($path,$delimiter)) then $path else $delimiter || $path&#xD;
  let $parts:=fn:tokenize(($path),$delimiter)&#xD;
  return fn:fold-right(subsequence($parts,1,count($parts)-1),&#xD;
    &lt;file name="{$parts[last()]}" target="{$path}"/&gt;,&#xD;
    tree:wrap#2 &#xD;
   )&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>tree:wrap</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function tree:wrap ( $this as xs:string,$acc ) as element(*) { &lt;directory name="{$this}"&gt;{$acc}&lt;/directory&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>this</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>acc</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(*)</xqdoc:type></xqdoc:return><xqdoc:body>function tree:wrap($this as xs:string,$acc)&#xD;
as element(*)&#xD;
{&#xD;
  &lt;directory name="{$this}"&gt;{$acc}&lt;/directory&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>tree:merge</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function tree:merge ( $a1 as element(*)?,$a2 as element(*)? ) as element(*)* { if($a1/@name=$a2/@name) then let $n1:=$a1/* let $n2:=$a2/* let $t:=( for $x in fn:distinct-values($n1/@name[.=$n2/@name]) (:both:) return tree:merge($a1/*[@name=$x],$a2/*[@name=$x]), for $x in fn:distinct-values($n1/@name[fn:not(.=$n2/@name)]) (:only $a1 :) return $a1/*[@name=$x], for $x in fn:distinct-values($n2/@name[fn:not(.=$n1/@name)]) (:only $a2 :) return $a2/*[@name=$x] ) let $name:=$a1/@name let $target:=($a1/@target,$a2/@target)[1] return &lt;directory &gt;{ $name,$target, for $x in $t order by $x/@name return $x }&lt;/directory&gt; else ($a1,$a2) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>a1</xqdoc:name><xqdoc:type occurrence="?">element(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>a2</xqdoc:name><xqdoc:type occurrence="?">element(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">element(*)</xqdoc:type></xqdoc:return><xqdoc:body>function tree:merge($a1 as element(*)?,$a2 as element(*)?)&#xD;
as element(*)*&#xD;
{&#xD;
 if($a1/@name=$a2/@name) then&#xD;
      let $n1:=$a1/*&#xD;
      let $n2:=$a2/*&#xD;
         &#xD;
      let $t:=(&#xD;
        for $x in fn:distinct-values($n1/@name[.=$n2/@name]) (:both:)&#xD;
        return tree:merge($a1/*[@name=$x],$a2/*[@name=$x]),&#xD;
        &#xD;
        for $x in fn:distinct-values($n1/@name[fn:not(.=$n2/@name)]) (:only $a1 :)&#xD;
        return $a1/*[@name=$x],&#xD;
        &#xD;
        for $x in fn:distinct-values($n2/@name[fn:not(.=$n1/@name)]) (:only $a2 :)&#xD;
        return $a2/*[@name=$x]&#xD;
      )&#xD;
      let $name:=$a1/@name&#xD;
      let $target:=($a1/@target,$a2/@target)[1]&#xD;
      return &lt;directory &gt;{&#xD;
        $name,$target,&#xD;
        for $x in $t order by $x/@name return $x&#xD;
      }&lt;/directory&gt;&#xD;
 else &#xD;
     ($a1,$a2)                        &#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>&#xD;
extract any shared leading common path</xqdoc:description></xqdoc:comment><xqdoc:name>tree:base</xqdoc:name><xqdoc:signature>function tree:base ( $tree as element(directory)? ) as xs:string { let $c:= $tree/directory let $ok:= count($c)=1 and count($tree/*)=1 let $tail:= if ($ok) then tree:base($c) else () return ("",$tree/@name/string() ,$tail)=&gt;string-join("/") }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>tree</xqdoc:name><xqdoc:type occurrence="?">element(directory)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return><xqdoc:body>function tree:base($tree as element(directory)?)&#xD;
as xs:string{&#xD;
  let $c:= $tree/directory&#xD;
  let $ok:= count($c)=1 and count($tree/*)=1&#xD;
  let $tail:= if ($ok) &#xD;
              then  tree:base($c) &#xD;
              else ()&#xD;
  return ("",$tree/@name/string() ,$tail)=&gt;string-join("/")&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:name>tree:flatten</xqdoc:name><xqdoc:signature>function tree:flatten ( $tree as element(directory)? ) as element(directory)? { if(exists($tree)) then $tree transform with { for $d in descendant::directory[ count(../*) gt 1 and not(@target)] (: no @target and more than 1 parent :) let $name:= $d/descendant-or-self::directory/@name=&gt;string-join("/") return replace node $d with let $files:=$d//file return if(count($files) gt 1) then &lt;directory name="{ $name}"&gt;{ $files} &lt;/directory&gt; else $files } else () }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>tree</xqdoc:name><xqdoc:type occurrence="?">element(directory)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="?">element(directory)</xqdoc:type></xqdoc:return><xqdoc:body>function tree:flatten($tree as element(directory)?)&#xD;
as element(directory)?{&#xD;
if(exists($tree)) &#xD;
then &#xD;
      $tree transform with {&#xD;
      for $d in  descendant::directory[ count(../*) gt 1 and not(@target)] (: no @target and more than 1 parent :)&#xD;
      let $name:= $d/descendant-or-self::directory/@name=&gt;string-join("/")&#xD;
      return replace   node $d &#xD;
            with let $files:=$d//file&#xD;
                  return if(count($files) gt 1)  &#xD;
                        then  &lt;directory name="{ $name}"&gt;{ $files} &lt;/directory&gt;&#xD;
                        else $files&#xD;
      }&#xD;
  else ()&#xD;
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>