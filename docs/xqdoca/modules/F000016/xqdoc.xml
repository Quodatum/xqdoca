<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2025-05-17T18:35:19.705+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>quodatum:xqdoca.model.annotations</xqdoc:uri><xqdoc:name>xqa</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
annotation utils&#xD;
</xqdoc:description><xqdoc:author>Andy Bunce, Quodatum, License: Apache-2.0</xqdoc:author><xqdoc:custom tag="Copyright">(c) 2019-2026 Quodatum Ltd</xqdoc:custom></xqdoc:comment><xqdoc:body>xquery version "3.1";&#xD;
(:~&#xD;
annotation utils&#xD;
 @Copyright (c) 2019-2026 Quodatum Ltd&#xD;
 @author Andy Bunce, Quodatum, License: Apache-2.0&#xD;
:)&#xD;
 &#xD;
&#xD;
module namespace xqa = 'quodatum:xqdoca.model.annotations';&#xD;
&#xD;
&#xD;
import module namespace xqn = 'quodatum:xqdoca.namespaces' at "xqdoc-namespace.xqm";&#xD;
declare namespace xqdoc="http://www.xqdoc.org/1.0";&#xD;
&#xD;
declare variable $xqa:nsRESTXQ:= 'http://exquery.org/ns/restxq';&#xD;
declare variable $xqa:nsUNIT:= 'http://basex.org/modules/unit';&#xD;
declare variable $xqa:nsXQDOC:='https://github.com/Quodatum/xqdoca';&#xD;
declare variable $xqa:nsANN:='http://www.w3.org/2012/xquery';&#xD;
declare variable $xqa:nsOUT:='http://www.w3.org/2010/xslt-xquery-serialization';&#xD;
&#xD;
(:~ &#xD;
 : @see https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods &#xD;
 :)&#xD;
declare variable $xqa:methods:=("GET","HEAD","POST","PUT","DELETE","PATCH");&#xD;
&#xD;
(:~  known annotation details :)&#xD;
declare variable $xqa:noteworthy:=(&#xD;
  map{&#xD;
    "uri":'http://www.w3.org/2012/xquery',&#xD;
    "name":'updating',&#xD;
    "title":'Updating',&#xD;
    'icon': 'U',&#xD;
    "class": 'danger'&#xD;
  },&#xD;
 &#xD;
   map{&#xD;
    "uri":'http://exquery.org/ns/restxq',&#xD;
    "name":'path',&#xD;
    "title":'RESTXQ',&#xD;
    "icon": 'R',&#xD;
    "class": 'success',&#xD;
    "callable": true()&#xD;
  },&#xD;
   map{&#xD;
    "uri":'http://basex.org/modules/unit',&#xD;
    "name":'test',&#xD;
    "title":'UNIT',&#xD;
    "icon": 'T',&#xD;
    "class": 'primary',&#xD;
    "callable": true()&#xD;
  },&#xD;
   map{&#xD;
    "uri":'https://github.com/Quodatum/xqdoca',&#xD;
    "name":'output',&#xD;
    "title":'XQdocA',&#xD;
    "icon": 'D',&#xD;
    "class": 'success',&#xD;
    "callable": true()&#xD;
  },&#xD;
   map{&#xD;
    "uri":'http://www.w3.org/2012/xquery',&#xD;
    "name":'private',&#xD;
    "title":'Private',&#xD;
    'icon': 'P',&#xD;
    "class": 'dark'&#xD;
  }&#xD;
);&#xD;
&#xD;
declare variable $xqa:private:=&#xD;
   map{&#xD;
    "uri":'http://www.w3.org/2012/xquery',&#xD;
    "name":'private',&#xD;
    "title":'Private',&#xD;
    'icon': 'P',&#xD;
    "class": 'dark'&#xD;
  };&#xD;
  &#xD;
(:~&#xD;
 : html badges for annotations with known namespaces&#xD;
 @param  $button-render $badge?icon, $badge?class, $badge?title&#xD;
 :)&#xD;
declare function xqa:badges($annos as element(xqdoc:annotation)*,&#xD;
                            $file as map(*),&#xD;
                            $button-render as function(*))&#xD;
{&#xD;
  let $prefixes:=$file?namespaces&#xD;
  let $others:= some $a in $annos &#xD;
                satisfies let $m:=xqn:qmap($a/@name,$prefixes,$xqa:nsANN)&#xD;
                          return not($m?uri = $xqa:noteworthy?uri)&#xD;
  return (&#xD;
    for $badge in $xqa:noteworthy&#xD;
    where some $a in $annos &#xD;
          satisfies xqn:eq(xqn:qmap($a/@name,$prefixes,$xqa:nsANN), $badge?uri, $badge?name)&#xD;
    return  $button-render($badge?icon, $badge?class, $badge?title)&#xD;
    &#xD;
    ,if($others) then $button-render("A", "info", "Other annotations") else ()&#xD;
    )&#xD;
};&#xD;
&#xD;
(:~  true if rest:name :)&#xD;
declare function xqa:is-rest($a  as element(xqdoc:annotation),$name as xs:string,$ns as map(*))&#xD;
as xs:boolean&#xD;
{&#xD;
  xqn:eq(xqn:qmap($a/@name,$ns,$xqa:nsANN), $xqa:nsRESTXQ,$name)&#xD;
};&#xD;
&#xD;
(:~  true if test:name :)&#xD;
declare function xqa:is-unit($a  as element(xqdoc:annotation),$name as xs:string,$ns as map(*))&#xD;
as xs:boolean&#xD;
{&#xD;
  xqn:eq(xqn:qmap($a/@name,$ns,$xqa:nsANN), $xqa:nsUNIT,$name)&#xD;
};&#xD;
&#xD;
declare function xqa:is-out($a as element(xqdoc:annotation),$name as xs:string,$ns as map(*))&#xD;
as xs:boolean&#xD;
{&#xD;
  xqn:eq(xqn:qmap($a/@name,$ns,$xqa:nsANN), $xqa:nsOUT,$name)&#xD;
};&#xD;
&#xD;
&#xD;
(:~ :)&#xD;
declare function xqa:methods($annots  as element(xqdoc:annotation)*,$ns as map(*))&#xD;
as xs:string*&#xD;
{&#xD;
 filter($xqa:methods,function($m){&#xD;
   some $a in $annots &#xD;
   satisfies  xqn:eq(xqn:qmap($a/@name,$ns,$xqa:nsANN), $xqa:nsRESTXQ,$m)&#xD;
 })&#xD;
};    &#xD;
&#xD;
(:~  info about function or variable :)&#xD;
declare function xqa:name-detail($e as element(*),$file as map(*))&#xD;
as map(*)&#xD;
{&#xD;
  let $name:=$e/xqdoc:name&#xD;
       let $qmap:=xqn:qmap($name, $file?namespaces, $file?default-fn-uri)&#xD;
       let $lname:=if($e instance of element(xqdoc:function)) then&#xD;
                     concat($qmap?name,"#",$e/@arity)&#xD;
                   else&#xD;
                    concat("$",$qmap?name)&#xD;
       return map{"given": $name/string(), &#xD;
                  "uri": $qmap?uri, &#xD;
                  "name": $lname, &#xD;
                  "xqdoc": $e }&#xD;
};&#xD;
&#xD;
(:~ annotations grouped by uri with added file reference &#xD;
 : &lt;pre&gt;map{uri:map{&#xD;
 :           "annotation":{"name": ,"uri":}, "xqdoc": &lt;xqdoc:annotation/&gt;, "file":}&#xD;
 :           }*&#xD;
 : &lt;/pre&gt;&#xD;
 :)&#xD;
declare function xqa:annotations($files as map(*)*)&#xD;
as map(*)&#xD;
{ &#xD;
  map:merge(&#xD;
          for $f in $files, $a in $f?annotations&#xD;
          group by $uri:=$a?annotation?uri&#xD;
           return map:entry($uri,for-each-pair($a,$f,&#xD;
                   function($a,$f){map:merge(($a,map:entry("file", $f)))}&#xD;
                 ))&#xD;
         )&#xD;
};    &#xD;
&#xD;
(:~  annotation literals display :)&#xD;
declare function xqa:literals($lits as element(xqdoc:literal)*)&#xD;
as xs:string?&#xD;
{ &#xD;
let $t:=$lits!(if(@type="xs:string") then  &#xD;
               concat("'",string(),"'")&#xD;
              else&#xD;
                string()&#xD;
)&#xD;
return concat("(",string-join($t,","),")")          &#xD;
 };&#xD;
&#xD;
(:~  extract names from url may include = regex :) &#xD;
declare function xqa:extract-restxq($url as xs:string)&#xD;
as xs:string*&#xD;
{&#xD;
  tokenize($url,"/\{")&#xD;
  !replace(.,"\s*(\$\w*).*","$1")&#xD;
  !(if (starts-with(.,"$")) then .)&#xD;
};    </xqdoc:body></xqdoc:module><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>quodatum:xqdoca.namespaces</xqdoc:uri><xqdoc:at>xqdoc-namespace.xqm</xqdoc:at></xqdoc:import></xqdoc:imports><xqdoc:namespaces><xqdoc:namespace prefix="xqa" uri="quodatum:xqdoca.model.annotations"/><xqdoc:namespace prefix="xqn" uri="quodatum:xqdoca.namespaces"/><xqdoc:namespace prefix="xqdoc" uri="http://www.xqdoc.org/1.0"/><xqdoc:namespace prefix="xs" uri="http://www.w3.org/2001/XMLSchema"/><xqdoc:namespace prefix="map" uri="http://www.w3.org/2005/xpath-functions/map"/></xqdoc:namespaces><xqdoc:variables><xqdoc:variable><xqdoc:name>xqa:nsRESTXQ</xqdoc:name><xqdoc:body>variable $xqa:nsRESTXQ:= 'http://exquery.org/ns/restxq'</xqdoc:body></xqdoc:variable><xqdoc:variable><xqdoc:name>xqa:nsUNIT</xqdoc:name><xqdoc:body>variable $xqa:nsUNIT:= 'http://basex.org/modules/unit'</xqdoc:body></xqdoc:variable><xqdoc:variable><xqdoc:name>xqa:nsXQDOC</xqdoc:name><xqdoc:body>variable $xqa:nsXQDOC:='https://github.com/Quodatum/xqdoca'</xqdoc:body></xqdoc:variable><xqdoc:variable><xqdoc:name>xqa:nsANN</xqdoc:name><xqdoc:body>variable $xqa:nsANN:='http://www.w3.org/2012/xquery'</xqdoc:body></xqdoc:variable><xqdoc:variable><xqdoc:name>xqa:nsOUT</xqdoc:name><xqdoc:body>variable $xqa:nsOUT:='http://www.w3.org/2010/xslt-xquery-serialization'</xqdoc:body></xqdoc:variable><xqdoc:variable><xqdoc:name>xqa:methods</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
</xqdoc:description><xqdoc:see>https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods</xqdoc:see></xqdoc:comment><xqdoc:body>variable $xqa:methods:=("GET","HEAD","POST","PUT","DELETE","PATCH")</xqdoc:body></xqdoc:variable><xqdoc:variable><xqdoc:name>xqa:noteworthy</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
known annotation details</xqdoc:description></xqdoc:comment><xqdoc:body>variable $xqa:noteworthy:=(&#xD;
  map{&#xD;
    "uri":'http://www.w3.org/2012/xquery',&#xD;
    "name":'updating',&#xD;
    "title":'Updating',&#xD;
    'icon': 'U',&#xD;
    "class": 'danger'&#xD;
  },&#xD;
 &#xD;
   map{&#xD;
    "uri":'http://exquery.org/ns/restxq',&#xD;
    "name":'path',&#xD;
    "title":'RESTXQ',&#xD;
    "icon": 'R',&#xD;
    "class": 'success',&#xD;
    "callable": true()&#xD;
  },&#xD;
   map{&#xD;
    "uri":'http://basex.org/modules/unit',&#xD;
    "name":'test',&#xD;
    "title":'UNIT',&#xD;
    "icon": 'T',&#xD;
    "class": 'primary',&#xD;
    "callable": true()&#xD;
  },&#xD;
   map{&#xD;
    "uri":'https://github.com/Quodatum/xqdoca',&#xD;
    "name":'output',&#xD;
    "title":'XQdocA',&#xD;
    "icon": 'D',&#xD;
    "class": 'success',&#xD;
    "callable": true()&#xD;
  },&#xD;
   map{&#xD;
    "uri":'http://www.w3.org/2012/xquery',&#xD;
    "name":'private',&#xD;
    "title":'Private',&#xD;
    'icon': 'P',&#xD;
    "class": 'dark'&#xD;
  }&#xD;
)</xqdoc:body></xqdoc:variable><xqdoc:variable><xqdoc:name>xqa:private</xqdoc:name><xqdoc:body>variable $xqa:private:=&#xD;
   map{&#xD;
    "uri":'http://www.w3.org/2012/xquery',&#xD;
    "name":'private',&#xD;
    "title":'Private',&#xD;
    'icon': 'P',&#xD;
    "class": 'dark'&#xD;
  }</xqdoc:body></xqdoc:variable></xqdoc:variables><xqdoc:functions><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
html badges for annotations with known namespaces&#xD;
</xqdoc:description><xqdoc:param>$button-render $badge?icon, $badge?class, $badge?title</xqdoc:param></xqdoc:comment><xqdoc:name>xqa:badges</xqdoc:name><xqdoc:signature>function xqa:badges ( $annos as element(xqdoc:annotation)*, $file as map(*), $button-render as function(*) ) { let $prefixes:=$file?namespaces let $others:= some $a in $annos satisfies let $m:=xqn:qmap($a/@name,$prefixes,$xqa:nsANN) return not($m?uri = $xqa:noteworthy?uri) return ( for $badge in $xqa:noteworthy where some $a in $annos satisfies xqn:eq(xqn:qmap($a/@name,$prefixes,$xqa:nsANN), $badge?uri, $badge?name) return $button-render($badge?icon, $badge?class, $badge?title) ,if($others) then $button-render("A", "info", "Other annotations") else () ) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>annos</xqdoc:name><xqdoc:type occurrence="*">element(xqdoc:annotation)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>file</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>button-render</xqdoc:name><xqdoc:type>function(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:body>function xqa:badges($annos as element(xqdoc:annotation)*,&#xD;
                            $file as map(*),&#xD;
                            $button-render as function(*))&#xD;
{&#xD;
  let $prefixes:=$file?namespaces&#xD;
  let $others:= some $a in $annos &#xD;
                satisfies let $m:=xqn:qmap($a/@name,$prefixes,$xqa:nsANN)&#xD;
                          return not($m?uri = $xqa:noteworthy?uri)&#xD;
  return (&#xD;
    for $badge in $xqa:noteworthy&#xD;
    where some $a in $annos &#xD;
          satisfies xqn:eq(xqn:qmap($a/@name,$prefixes,$xqa:nsANN), $badge?uri, $badge?name)&#xD;
    return  $button-render($badge?icon, $badge?class, $badge?title)&#xD;
    &#xD;
    ,if($others) then $button-render("A", "info", "Other annotations") else ()&#xD;
    )&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>&#xD;
true if rest:name</xqdoc:description></xqdoc:comment><xqdoc:name>xqa:is-rest</xqdoc:name><xqdoc:signature>function xqa:is-rest ( $a as element(xqdoc:annotation),$name as xs:string,$ns as map(*) ) as xs:boolean { xqn:eq(xqn:qmap($a/@name,$ns,$xqa:nsANN), $xqa:nsRESTXQ,$name) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>a</xqdoc:name><xqdoc:type>element(xqdoc:annotation)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>ns</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:return><xqdoc:body>function xqa:is-rest($a  as element(xqdoc:annotation),$name as xs:string,$ns as map(*))&#xD;
as xs:boolean&#xD;
{&#xD;
  xqn:eq(xqn:qmap($a/@name,$ns,$xqa:nsANN), $xqa:nsRESTXQ,$name)&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>&#xD;
true if test:name</xqdoc:description></xqdoc:comment><xqdoc:name>xqa:is-unit</xqdoc:name><xqdoc:signature>function xqa:is-unit ( $a as element(xqdoc:annotation),$name as xs:string,$ns as map(*) ) as xs:boolean { xqn:eq(xqn:qmap($a/@name,$ns,$xqa:nsANN), $xqa:nsUNIT,$name) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>a</xqdoc:name><xqdoc:type>element(xqdoc:annotation)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>ns</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:return><xqdoc:body>function xqa:is-unit($a  as element(xqdoc:annotation),$name as xs:string,$ns as map(*))&#xD;
as xs:boolean&#xD;
{&#xD;
  xqn:eq(xqn:qmap($a/@name,$ns,$xqa:nsANN), $xqa:nsUNIT,$name)&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:name>xqa:is-out</xqdoc:name><xqdoc:signature>function xqa:is-out ( $a as element(xqdoc:annotation),$name as xs:string,$ns as map(*) ) as xs:boolean { xqn:eq(xqn:qmap($a/@name,$ns,$xqa:nsANN), $xqa:nsOUT,$name) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>a</xqdoc:name><xqdoc:type>element(xqdoc:annotation)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>ns</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:return><xqdoc:body>function xqa:is-out($a as element(xqdoc:annotation),$name as xs:string,$ns as map(*))&#xD;
as xs:boolean&#xD;
{&#xD;
  xqn:eq(xqn:qmap($a/@name,$ns,$xqa:nsANN), $xqa:nsOUT,$name)&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
</xqdoc:description></xqdoc:comment><xqdoc:name>xqa:methods</xqdoc:name><xqdoc:signature>function xqa:methods ( $annots as element(xqdoc:annotation)*,$ns as map(*) ) as xs:string* { filter($xqa:methods,function($m){ some $a in $annots satisfies xqn:eq(xqn:qmap($a/@name,$ns,$xqa:nsANN), $xqa:nsRESTXQ,$m) }) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>annots</xqdoc:name><xqdoc:type occurrence="*">element(xqdoc:annotation)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>ns</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:return><xqdoc:body>function xqa:methods($annots  as element(xqdoc:annotation)*,$ns as map(*))&#xD;
as xs:string*&#xD;
{&#xD;
 filter($xqa:methods,function($m){&#xD;
   some $a in $annots &#xD;
   satisfies  xqn:eq(xqn:qmap($a/@name,$ns,$xqa:nsANN), $xqa:nsRESTXQ,$m)&#xD;
 })&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
info about function or variable</xqdoc:description></xqdoc:comment><xqdoc:name>xqa:name-detail</xqdoc:name><xqdoc:signature>function xqa:name-detail ( $e as element(*),$file as map(*) ) as map(*) { let $name:=$e/xqdoc:name let $qmap:=xqn:qmap($name, $file?namespaces, $file?default-fn-uri) let $lname:=if($e instance of element(xqdoc:function)) then concat($qmap?name,"#",$e/@arity) else concat("$",$qmap?name) return map{"given": $name/string(), "uri": $qmap?uri, "name": $lname, "xqdoc": $e } }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>e</xqdoc:name><xqdoc:type>element(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>file</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>map(*)</xqdoc:type></xqdoc:return><xqdoc:body>function xqa:name-detail($e as element(*),$file as map(*))&#xD;
as map(*)&#xD;
{&#xD;
  let $name:=$e/xqdoc:name&#xD;
       let $qmap:=xqn:qmap($name, $file?namespaces, $file?default-fn-uri)&#xD;
       let $lname:=if($e instance of element(xqdoc:function)) then&#xD;
                     concat($qmap?name,"#",$e/@arity)&#xD;
                   else&#xD;
                    concat("$",$qmap?name)&#xD;
       return map{"given": $name/string(), &#xD;
                  "uri": $qmap?uri, &#xD;
                  "name": $lname, &#xD;
                  "xqdoc": $e }&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>&#xD;
annotations grouped by uri with added file reference&#xD;
&lt;pre&gt;map{uri:map{&#xD;
"annotation":{"name": ,"uri":}, "xqdoc": &lt;xqdoc:annotation/&gt;, "file":}&#xD;
}*&#xD;
&lt;/pre&gt;&#xD;
</xqdoc:description></xqdoc:comment><xqdoc:name>xqa:annotations</xqdoc:name><xqdoc:signature>function xqa:annotations ( $files as map(*)* ) as map(*) { map:merge( for $f in $files, $a in $f?annotations group by $uri:=$a?annotation?uri return map:entry($uri,for-each-pair($a,$f, function($a,$f){map:merge(($a,map:entry("file", $f)))} )) ) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>files</xqdoc:name><xqdoc:type occurrence="*">map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>map(*)</xqdoc:type></xqdoc:return><xqdoc:body>function xqa:annotations($files as map(*)*)&#xD;
as map(*)&#xD;
{ &#xD;
  map:merge(&#xD;
          for $f in $files, $a in $f?annotations&#xD;
          group by $uri:=$a?annotation?uri&#xD;
           return map:entry($uri,for-each-pair($a,$f,&#xD;
                   function($a,$f){map:merge(($a,map:entry("file", $f)))}&#xD;
                 ))&#xD;
         )&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>&#xD;
annotation literals display</xqdoc:description></xqdoc:comment><xqdoc:name>xqa:literals</xqdoc:name><xqdoc:signature>function xqa:literals ( $lits as element(xqdoc:literal)* ) as xs:string? { let $t:=$lits!(if(@type="xs:string") then concat("'",string(),"'") else string() ) return concat("(",string-join($t,","),")") }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>lits</xqdoc:name><xqdoc:type occurrence="*">element(xqdoc:literal)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="?">xs:string</xqdoc:type></xqdoc:return><xqdoc:body>function xqa:literals($lits as element(xqdoc:literal)*)&#xD;
as xs:string?&#xD;
{ &#xD;
let $t:=$lits!(if(@type="xs:string") then  &#xD;
               concat("'",string(),"'")&#xD;
              else&#xD;
                string()&#xD;
)&#xD;
return concat("(",string-join($t,","),")")          &#xD;
 }</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>&#xD;
extract names from url may include = regex</xqdoc:description></xqdoc:comment><xqdoc:name>xqa:extract-restxq</xqdoc:name><xqdoc:signature>function xqa:extract-restxq ( $url as xs:string ) as xs:string* { tokenize($url,"/\{") !replace(.,"\s*(\$\w*).*","$1") !(if (starts-with(.,"$")) then .) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>url</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:return><xqdoc:body>function xqa:extract-restxq($url as xs:string)&#xD;
as xs:string*&#xD;
{&#xD;
  tokenize($url,"/\{")&#xD;
  !replace(.,"\s*(\$\w*).*","$1")&#xD;
  !(if (starts-with(.,"$")) then .)&#xD;
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>