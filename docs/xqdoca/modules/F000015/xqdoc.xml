<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2025-05-17T18:35:19.705+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>quodatum:xqdoca.generator.validate-xqdoc</xqdoc:uri><xqdoc:name>_</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Validate xqdoc o/p against schema&#xD;
</xqdoc:description><xqdoc:author>Andy Bunce, Quodatum, License: Apache-2.0</xqdoc:author><xqdoc:custom tag="Copyright">(c) 2019-2026 Quodatum Ltd</xqdoc:custom></xqdoc:comment><xqdoc:body>xquery version "3.1";&#xD;
(:~&#xD;
 Validate xqdoc o/p against schema&#xD;
 @Copyright (c) 2019-2026 Quodatum Ltd&#xD;
 @author Andy Bunce, Quodatum, License: Apache-2.0&#xD;
 :)&#xD;
&#xD;
module namespace _ = 'quodatum:xqdoca.generator.validate-xqdoc';&#xD;
&#xD;
declare namespace xqdoca="https://github.com/Quodatum/xqdoca";&#xD;
&#xD;
(:~ xqdoc schema versions:)&#xD;
declare variable $_:schemas:=map{&#xD;
                   "1.0": "../etc/models/xqdoc-1.0.01132014.xsd"&#xD;
                  ,"1.1": "../etc/models/xqdoc-1.1.xsd"&#xD;
};&#xD;
&#xD;
declare &#xD;
%xqdoca:global("xqdoc-validate","validate generated xqdoc files")&#xD;
%xqdoca:output("validation-report.xml","xml") &#xD;
function _:validate(    $model as map(*),&#xD;
                        $opts as map(*)&#xD;
                        )                           &#xD;
as element(errors){&#xD;
let $xsd:=$_:schemas?($opts?xqdoc?version)&#xD;
let $schema:=resolve-uri($xsd,static-base-uri())=&gt;trace("xqdoc schema: ")&#xD;
let $reports:=for $f in $model?files&#xD;
              return $f?xqdoc!validate:xsd-report(.,$schema) &#xD;
                      transform with {&#xD;
                         insert node (attribute source { $f?path },&#xD;
                                      attribute xqdoc { $f?href }&#xD;
                         ) into .&#xD;
                      }&#xD;
&#xD;
return &lt;errors&gt;{ &#xD;
        attribute created { current-dateTime() }&#xD;
        , attribute schema { $schema }&#xD;
        , attribute errors { count($reports[status eq 'invalid']) }&#xD;
        , $reports }&#xD;
        &lt;/errors&gt;&#xD;
};&#xD;
&#xD;
</xqdoc:body></xqdoc:module><xqdoc:namespaces><xqdoc:namespace prefix="_" uri="quodatum:xqdoca.generator.validate-xqdoc"/><xqdoc:namespace prefix="xqdoca" uri="https://github.com/Quodatum/xqdoca"/><xqdoc:namespace prefix="validate" uri="http://basex.org/modules/validate"/></xqdoc:namespaces><xqdoc:variables><xqdoc:variable><xqdoc:name>_:schemas</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
xqdoc schema versions</xqdoc:description></xqdoc:comment><xqdoc:body>variable $_:schemas:=map{&#xD;
                   "1.0": "../etc/models/xqdoc-1.0.01132014.xsd"&#xD;
                  ,"1.1": "../etc/models/xqdoc-1.1.xsd"&#xD;
}</xqdoc:body></xqdoc:variable></xqdoc:variables><xqdoc:functions><xqdoc:function arity="2"><xqdoc:name>_:validate</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="xqdoca:global"><xqdoc:literal type="xs:string">xqdoc-validate</xqdoc:literal><xqdoc:literal type="xs:string">validate generated xqdoc files</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="xqdoca:output"><xqdoc:literal type="xs:string">validation-report.xml</xqdoc:literal><xqdoc:literal type="xs:string">xml</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>function _:validate ( $model as map(*), $opts as map(*) ) as element(errors) { let $xsd:=$_:schemas?($opts?xqdoc?version) let $schema:=resolve-uri($xsd,static-base-uri())=&gt;trace("xqdoc schema: ") let $reports:=for $f in $model?files return $f?xqdoc!validate:xsd-report(.,$schema) transform with { insert node (attribute source { $f?path }, attribute xqdoc { $f?href } ) into . } return &lt;errors&gt;{ attribute created { current-dateTime() } , attribute schema { $schema } , attribute errors { count($reports[status eq 'invalid']) } , $reports } &lt;/errors&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>model</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(errors)</xqdoc:type></xqdoc:return><xqdoc:body>function _:validate(    $model as map(*),&#xD;
                        $opts as map(*)&#xD;
                        )                           &#xD;
as element(errors){&#xD;
let $xsd:=$_:schemas?($opts?xqdoc?version)&#xD;
let $schema:=resolve-uri($xsd,static-base-uri())=&gt;trace("xqdoc schema: ")&#xD;
let $reports:=for $f in $model?files&#xD;
              return $f?xqdoc!validate:xsd-report(.,$schema) &#xD;
                      transform with {&#xD;
                         insert node (attribute source { $f?path },&#xD;
                                      attribute xqdoc { $f?href }&#xD;
                         ) into .&#xD;
                      }&#xD;
&#xD;
return &lt;errors&gt;{ &#xD;
        attribute created { current-dateTime() }&#xD;
        , attribute schema { $schema }&#xD;
        , attribute errors { count($reports[status eq 'invalid']) }&#xD;
        , $reports }&#xD;
        &lt;/errors&gt;&#xD;
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>