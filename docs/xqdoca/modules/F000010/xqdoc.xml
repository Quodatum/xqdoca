<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2025-05-17T18:35:19.705+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>quodatum:xqdoca.generator.mermaid</xqdoc:uri><xqdoc:name>_</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Diagrams showing project module imports. Generated with `mermaid.js`.&#xD;
&#xD;
</xqdoc:description><xqdoc:author>Andy Bunce, Quodatum, License: Apache-2.0</xqdoc:author><xqdoc:see>https://mermaid-js.github.io/mermaid/#/</xqdoc:see><xqdoc:custom tag="copyright">Copyright (c) 2019-2024 Quodatum Ltd</xqdoc:custom></xqdoc:comment><xqdoc:body>xquery version "3.1";&#xD;
(:~&#xD;
Diagrams showing project module imports. Generated with `mermaid.js`.&#xD;
&#xD;
@see https://mermaid-js.github.io/mermaid/#/&#xD;
@copyright Copyright (c) 2019-2024 Quodatum Ltd&#xD;
@author Andy Bunce, Quodatum, License: Apache-2.0&#xD;
:)&#xD;
 &#xD;
module namespace _ = 'quodatum:xqdoca.generator.mermaid';&#xD;
import module namespace xqd = 'quodatum:xqdoca.model' at "../lib/model.xqm";&#xD;
(:~ html page utils :)&#xD;
import module namespace page = 'quodatum:xqdoca.page'  at "../lib/xqdoc-page.xqm";&#xD;
import module namespace xqa = 'quodatum:xqdoca.model.annotations' at "../lib/annotations.xqm";&#xD;
&#xD;
declare namespace xqdoca="https://github.com/Quodatum/xqdoca";&#xD;
declare namespace xqdoc="http://www.xqdoc.org/1.0";&#xD;
&#xD;
&#xD;
(:~ generate html page containing import imports diagram using mermaid.js :)&#xD;
declare &#xD;
%xqdoca:global("imports-diag","Project wide module imports as html mermaid class diagram")&#xD;
%xqdoca:output("mermaid.html","html5") &#xD;
function _:html(        &#xD;
                 $model as map(*),&#xD;
                 $opts as map(*)&#xD;
                 )                         &#xD;
{&#xD;
	  let $mermaid:=_:mmd( $model, $opts)&#xD;
    let $related:= page:related-buttons("global","mermaid", $opts) &#xD;
    return _:page-wrap($mermaid,$related,$opts)&#xD;
};&#xD;
&#xD;
(:~ generate text for mermaid class diagram in mmd format:)&#xD;
 declare &#xD;
 %xqdoca:global("imports-diag.mmd","Project wide module imports as a mermaid class diagram")&#xD;
%xqdoca:output("mermaid.mmd","text") &#xD;
 function _:mmd($model as map(*),         &#xD;
                $opts as map(*) )&#xD;
 as xs:string{ &#xD;
let $files:=$model?files&#xD;
(: just files with prefix ie xqm :) &#xD;
let $files:= $files!_:class-name(.,position(),$files)&#xD;
&#xD;
let $classes:=  $files!_:class(.)             &#xD;
let $links:= $files!``[link `{ .?mermaid }` "`{ .?href }`index.html" "This is a tooltip for `{ .?namespace }`"&#xD;
]``&#xD;
let $imports:=for $f in $files,&#xD;
                $i in xqd:where-imported($files, $f?namespace)&#xD;
                return ``[`{ $i?mermaid}` ..&gt;`{ $f?mermaid}` &#xD;
]``&#xD;
&#xD;
let $actors:=``[&#xD;
class RESTXQ:::cssrest  &#xD;
class INVOKE:::cssmain  &#xD;
class TEST:::cssunit&#xD;
]``&#xD;
let $classDefs:=``[&#xD;
classDef cssrest fill:palegreen&#xD;
classDef cssmain fill:powderblue&#xD;
classDef cssunit fill:yellow&#xD;
]``&#xD;
return``[%%{init: {'securityLevel': 'loose', 'theme':'base'}}%%    &#xD;
classDiagram&#xD;
direction TB&#xD;
`{ $actors }`&#xD;
`{ $classes }`&#xD;
`{ $imports }`&#xD;
`{ $classDefs }`&#xD;
`{ $links }`&#xD;
&#xD;
]``=&gt;replace('&amp;#xd;&amp;#xa;', '&amp;#xa;')&#xD;
&#xD;
};&#xD;
&#xD;
(:~ generate mermaid class definition for $file :)&#xD;
declare %private&#xD;
function _:class($file as map(*))&#xD;
as xs:string{&#xD;
let $name:=$file?mermaid&#xD;
let $ns:= $file?namespaces&#xD;
let $functions:= $file?xqdoc//xqdoc:function&#xD;
&#xD;
let $restfns:=$functions[&#xD;
                              xqdoc:annotations/xqdoc:annotation&#xD;
                              =&gt;filter(xqa:is-rest(?,"path",$ns))&#xD;
                              ]&#xD;
&#xD;
let $fns:=$restfns/xqdoc:name=&gt;_:class-fns-list()&#xD;
let $testfns:=$functions[&#xD;
                              xqdoc:annotations/xqdoc:annotation&#xD;
                              =&gt;filter(xqa:is-unit(?,"test",$ns))&#xD;
                              ]&#xD;
let $is-main:= $file?xqdoc/xqdoc:module/@type eq "main"&#xD;
let $vars:=$file?xqdoc&#xD;
              //xqdoc:variable/xqdoc:name&#xD;
              =&gt; _:class-vars-list()&#xD;
&#xD;
return if($restfns)&#xD;
       then ``[class `{ $name }`:::cssrest { &lt;&lt; Rest `{$file?path }`&gt;&gt; &#xD;
`{ $fns }`}&#xD;
RESTXQ..&gt;`{ $name }`&#xD;
]``&#xD;
       else if($is-main)&#xD;
            then ``[class `{ $name }`:::cssmain{ &lt;&lt; `{ $file?path }` &gt;&gt;&#xD;
`{ $vars }`}&#xD;
INVOKE..&gt;`{ $name }`&#xD;
]``&#xD;
       else if (exists($testfns))&#xD;
            then ``[class `{ $name }`:::cssunit{ &lt;&lt; `{ $file?path }` &gt;&gt;}&#xD;
TEST..&gt;`{ $name }`&#xD;
]``&#xD;
        else ``[class `{ $name }` { &lt;&lt; `{ tokenize($file?path,"/")[last()] }` &gt;&gt;}&#xD;
]``&#xD;
};&#xD;
&#xD;
(:~ add "mermaid" key to $file map value unique label&#xD;
:)&#xD;
declare %private &#xD;
function _:class-name($file as map(*), $pos as xs:integer, $files as map(*)*)&#xD;
as map(*){&#xD;
  let $fn:=function($file){if($file?prefix)then $file?prefix else "local"}&#xD;
  let $name:=$fn($file)&#xD;
  let $count:=subsequence($files,1,$pos -1)!$fn(.)[. eq $name]=&gt;count()&#xD;
  let $name:= translate($name,"-","_") || (if($count gt 0) then  "Î”" ||1+ $count) &#xD;
  return (map:entry("mermaid",  $name),$file)&#xD;
          =&gt;map:merge()&#xD;
};&#xD;
&#xD;
(:~ generate mermaid function list :)&#xD;
declare %private&#xD;
function _:class-fns-list($names as xs:string*)&#xD;
as xs:string{&#xD;
let $r:=$names!substring-after(.,":")&#xD;
        !concat(.,"()")&#xD;
        =&gt;sort()&#xD;
        =&gt;string-join(file:line-separator())&#xD;
return concat(file:line-separator(),$r,file:line-separator())&#xD;
};&#xD;
&#xD;
(:~ generate mermaid vars list :)&#xD;
declare %private&#xD;
function _:class-vars-list($names as xs:string*)&#xD;
as xs:string{&#xD;
let $r:=$names&#xD;
        =&gt;sort()&#xD;
        =&gt;string-join(file:line-separator())&#xD;
return concat(file:line-separator(),$r,file:line-separator())&#xD;
};&#xD;
&#xD;
(:~ html wrapping for mermaid diagram&#xD;
 :)&#xD;
declare %private&#xD;
function _:page-wrap($mermaid as xs:string+,$related,$opts as map(*))&#xD;
as element(html){&#xD;
&lt;html lang="en"&gt;&#xD;
{_:head("Module imports diagram","resources/")}&#xD;
&#xD;
&lt;body&gt;&#xD;
  &lt;nav id="toc" style="position:absolute;top:0"&gt;&lt;span&gt;&#xD;
    &lt;span class="badge badge-info"&gt;{$opts?project}&lt;/span&gt; - Module dependancy diagram&lt;/span&gt;&#xD;
    {$related}&#xD;
  &lt;/nav&gt;&#xD;
  &lt;div class="mermaid"&gt;{ $mermaid }&lt;/div&gt;&#xD;
 &lt;script type="module"&gt;&#xD;
import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';&#xD;
   mermaid.initialize({{&#xD;
  startOnLoad:true,&#xD;
  logLevel: "error", &#xD;
  securityLevel: "loose", &#xD;
  theme: (window.matchMedia &amp;amp;&amp;amp; window.matchMedia("(prefers-color-scheme: dark)").matches) ? "dark" :  "default" &#xD;
    }});&lt;/script&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;&#xD;
};&#xD;
&#xD;
(:~ common html head&#xD;
@param resources relative path to resources&#xD;
 :)&#xD;
declare %private&#xD;
function _:head($title as xs:string,$resources as xs:string)&#xD;
as element(head){&#xD;
     &lt;head&gt;&#xD;
       &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;&#xD;
       &lt;meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"/&gt; &#xD;
       &lt;meta http-equiv="Generator" content="xqdoca - https://github.com/quodatum/xqdoca" /&gt;&#xD;
        &lt;title&gt;{ $title } - xqDocA&lt;/title&gt;&#xD;
        &#xD;
        &lt;link rel="shortcut icon" type="image/x-icon" href="{ $resources }xqdoc.png" /&gt;&#xD;
        &lt;link rel="stylesheet" type="text/css" href="{ $resources || $page:prism }prism.css"/&gt;&#xD;
        &lt;link rel="stylesheet" type="text/css" href="{ $resources }page.css" /&gt;&#xD;
        &lt;!--&#xD;
        &lt;link rel="stylesheet" type="text/css" href="{ $resources }query.css" /&gt;&#xD;
        &lt;link rel="stylesheet" type="text/css" href="{ $resources }base.css" /&gt; &#xD;
        --&gt;  &#xD;
      &lt;/head&gt;&#xD;
};</xqdoc:body></xqdoc:module><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>quodatum:xqdoca.model</xqdoc:uri><xqdoc:at>../lib/model.xqm</xqdoc:at></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>quodatum:xqdoca.page</xqdoc:uri><xqdoc:at>../lib/xqdoc-page.xqm</xqdoc:at></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>quodatum:xqdoca.model.annotations</xqdoc:uri><xqdoc:at>../lib/annotations.xqm</xqdoc:at></xqdoc:import></xqdoc:imports><xqdoc:namespaces><xqdoc:namespace prefix="_" uri="quodatum:xqdoca.generator.mermaid"/><xqdoc:namespace prefix="xqd" uri="quodatum:xqdoca.model"/><xqdoc:namespace prefix="page" uri="quodatum:xqdoca.page"/><xqdoc:namespace prefix="xqa" uri="quodatum:xqdoca.model.annotations"/><xqdoc:namespace prefix="xqdoca" uri="https://github.com/Quodatum/xqdoca"/><xqdoc:namespace prefix="xqdoc" uri="http://www.xqdoc.org/1.0"/><xqdoc:namespace prefix="xs" uri="http://www.w3.org/2001/XMLSchema"/><xqdoc:namespace prefix="map" uri="http://www.w3.org/2005/xpath-functions/map"/><xqdoc:namespace prefix="file" uri="http://expath.org/ns/file"/></xqdoc:namespaces><xqdoc:variables/><xqdoc:functions><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
generate html page containing import imports diagram using mermaid.js</xqdoc:description></xqdoc:comment><xqdoc:name>_:html</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="xqdoca:global"><xqdoc:literal type="xs:string">imports-diag</xqdoc:literal><xqdoc:literal type="xs:string">Project wide module imports as html mermaid class diagram</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="xqdoca:output"><xqdoc:literal type="xs:string">mermaid.html</xqdoc:literal><xqdoc:literal type="xs:string">html5</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>function _:html ( $model as map(*), $opts as map(*) ) { let $mermaid:=_:mmd( $model, $opts) let $related:= page:related-buttons("global","mermaid", $opts) return _:page-wrap($mermaid,$related,$opts) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>model</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:body>function _:html(        &#xD;
                 $model as map(*),&#xD;
                 $opts as map(*)&#xD;
                 )                         &#xD;
{&#xD;
	  let $mermaid:=_:mmd( $model, $opts)&#xD;
    let $related:= page:related-buttons("global","mermaid", $opts) &#xD;
    return _:page-wrap($mermaid,$related,$opts)&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
generate text for mermaid class diagram in mmd format</xqdoc:description></xqdoc:comment><xqdoc:name>_:mmd</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="xqdoca:global"><xqdoc:literal type="xs:string">imports-diag.mmd</xqdoc:literal><xqdoc:literal type="xs:string">Project wide module imports as a mermaid class diagram</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="xqdoca:output"><xqdoc:literal type="xs:string">mermaid.mmd</xqdoc:literal><xqdoc:literal type="xs:string">text</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>function _:mmd ( $model as map(*), $opts as map(*) ) as xs:string { let $files:=$model?files (: just files with prefix ie xqm :) let $files:= $files!_:class-name(.,position(),$files) let $classes:= $files!_:class(.) let $links:= $files!``[link `{ .?mermaid }` "`{ .?href }`index.html" "This is a tooltip for `{ .?namespace }`" ]`` let $imports:=for $f in $files, $i in xqd:where-imported($files, $f?namespace) return ``[`{ $i?mermaid}` ..&gt;`{ $f?mermaid}` ]`` let $actors:=``[ class RESTXQ:::cssrest class INVOKE:::cssmain class TEST:::cssunit ]`` let $classDefs:=``[ classDef cssrest fill:palegreen classDef cssmain fill:powderblue classDef cssunit fill:yellow ]`` return``[%%{init: {'securityLevel': 'loose', 'theme':'base'}}%% classDiagram direction TB `{ $actors }` `{ $classes }` `{ $imports }` `{ $classDefs }` `{ $links }` ]``=&gt;replace('&amp;#xd;&amp;#xa;', '&amp;#xa;') }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>model</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return><xqdoc:body>function _:mmd($model as map(*),         &#xD;
                $opts as map(*) )&#xD;
 as xs:string{ &#xD;
let $files:=$model?files&#xD;
(: just files with prefix ie xqm :) &#xD;
let $files:= $files!_:class-name(.,position(),$files)&#xD;
&#xD;
let $classes:=  $files!_:class(.)             &#xD;
let $links:= $files!``[link `{ .?mermaid }` "`{ .?href }`index.html" "This is a tooltip for `{ .?namespace }`"&#xD;
]``&#xD;
let $imports:=for $f in $files,&#xD;
                $i in xqd:where-imported($files, $f?namespace)&#xD;
                return ``[`{ $i?mermaid}` ..&gt;`{ $f?mermaid}` &#xD;
]``&#xD;
&#xD;
let $actors:=``[&#xD;
class RESTXQ:::cssrest  &#xD;
class INVOKE:::cssmain  &#xD;
class TEST:::cssunit&#xD;
]``&#xD;
let $classDefs:=``[&#xD;
classDef cssrest fill:palegreen&#xD;
classDef cssmain fill:powderblue&#xD;
classDef cssunit fill:yellow&#xD;
]``&#xD;
return``[%%{init: {'securityLevel': 'loose', 'theme':'base'}}%%    &#xD;
classDiagram&#xD;
direction TB&#xD;
`{ $actors }`&#xD;
`{ $classes }`&#xD;
`{ $imports }`&#xD;
`{ $classDefs }`&#xD;
`{ $links }`&#xD;
&#xD;
]``=&gt;replace('&amp;#xd;&amp;#xa;', '&amp;#xa;')&#xD;
&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>&#xD;
generate mermaid class definition for $file</xqdoc:description></xqdoc:comment><xqdoc:name>_:class</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function _:class ( $file as map(*) ) as xs:string { let $name:=$file?mermaid let $ns:= $file?namespaces let $functions:= $file?xqdoc//xqdoc:function let $restfns:=$functions[ xqdoc:annotations/xqdoc:annotation =&gt;filter(xqa:is-rest(?,"path",$ns)) ] let $fns:=$restfns/xqdoc:name=&gt;_:class-fns-list() let $testfns:=$functions[ xqdoc:annotations/xqdoc:annotation =&gt;filter(xqa:is-unit(?,"test",$ns)) ] let $is-main:= $file?xqdoc/xqdoc:module/@type eq "main" let $vars:=$file?xqdoc //xqdoc:variable/xqdoc:name =&gt; _:class-vars-list() return if($restfns) then ``[class `{ $name }`:::cssrest { &lt;&lt; Rest `{$file?path }`&gt;&gt; `{ $fns }`} RESTXQ..&gt;`{ $name }` ]`` else if($is-main) then ``[class `{ $name }`:::cssmain{ &lt;&lt; `{ $file?path }` &gt;&gt; `{ $vars }`} INVOKE..&gt;`{ $name }` ]`` else if (exists($testfns)) then ``[class `{ $name }`:::cssunit{ &lt;&lt; `{ $file?path }` &gt;&gt;} TEST..&gt;`{ $name }` ]`` else ``[class `{ $name }` { &lt;&lt; `{ tokenize($file?path,"/")[last()] }` &gt;&gt;} ]`` }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>file</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return><xqdoc:body>function _:class($file as map(*))&#xD;
as xs:string{&#xD;
let $name:=$file?mermaid&#xD;
let $ns:= $file?namespaces&#xD;
let $functions:= $file?xqdoc//xqdoc:function&#xD;
&#xD;
let $restfns:=$functions[&#xD;
                              xqdoc:annotations/xqdoc:annotation&#xD;
                              =&gt;filter(xqa:is-rest(?,"path",$ns))&#xD;
                              ]&#xD;
&#xD;
let $fns:=$restfns/xqdoc:name=&gt;_:class-fns-list()&#xD;
let $testfns:=$functions[&#xD;
                              xqdoc:annotations/xqdoc:annotation&#xD;
                              =&gt;filter(xqa:is-unit(?,"test",$ns))&#xD;
                              ]&#xD;
let $is-main:= $file?xqdoc/xqdoc:module/@type eq "main"&#xD;
let $vars:=$file?xqdoc&#xD;
              //xqdoc:variable/xqdoc:name&#xD;
              =&gt; _:class-vars-list()&#xD;
&#xD;
return if($restfns)&#xD;
       then ``[class `{ $name }`:::cssrest { &lt;&lt; Rest `{$file?path }`&gt;&gt; &#xD;
`{ $fns }`}&#xD;
RESTXQ..&gt;`{ $name }`&#xD;
]``&#xD;
       else if($is-main)&#xD;
            then ``[class `{ $name }`:::cssmain{ &lt;&lt; `{ $file?path }` &gt;&gt;&#xD;
`{ $vars }`}&#xD;
INVOKE..&gt;`{ $name }`&#xD;
]``&#xD;
       else if (exists($testfns))&#xD;
            then ``[class `{ $name }`:::cssunit{ &lt;&lt; `{ $file?path }` &gt;&gt;}&#xD;
TEST..&gt;`{ $name }`&#xD;
]``&#xD;
        else ``[class `{ $name }` { &lt;&lt; `{ tokenize($file?path,"/")[last()] }` &gt;&gt;}&#xD;
]``&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>&#xD;
add "mermaid" key to $file map value unique label&#xD;
</xqdoc:description></xqdoc:comment><xqdoc:name>_:class-name</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function _:class-name ( $file as map(*), $pos as xs:integer, $files as map(*)* ) as map(*) { let $fn:=function($file){if($file?prefix)then $file?prefix else "local"} let $name:=$fn($file) let $count:=subsequence($files,1,$pos -1)!$fn(.)[. eq $name]=&gt;count() let $name:= translate($name,"-","_") || (if($count gt 0) then "Î”" ||1+ $count) return (map:entry("mermaid", $name),$file) =&gt;map:merge() }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>file</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>pos</xqdoc:name><xqdoc:type>xs:integer</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>files</xqdoc:name><xqdoc:type occurrence="*">map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>map(*)</xqdoc:type></xqdoc:return><xqdoc:body>function _:class-name($file as map(*), $pos as xs:integer, $files as map(*)*)&#xD;
as map(*){&#xD;
  let $fn:=function($file){if($file?prefix)then $file?prefix else "local"}&#xD;
  let $name:=$fn($file)&#xD;
  let $count:=subsequence($files,1,$pos -1)!$fn(.)[. eq $name]=&gt;count()&#xD;
  let $name:= translate($name,"-","_") || (if($count gt 0) then  "Î”" ||1+ $count) &#xD;
  return (map:entry("mermaid",  $name),$file)&#xD;
          =&gt;map:merge()&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>&#xD;
generate mermaid function list</xqdoc:description></xqdoc:comment><xqdoc:name>_:class-fns-list</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function _:class-fns-list ( $names as xs:string* ) as xs:string { let $r:=$names!substring-after(.,":") !concat(.,"()") =&gt;sort() =&gt;string-join(file:line-separator()) return concat(file:line-separator(),$r,file:line-separator()) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>names</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return><xqdoc:body>function _:class-fns-list($names as xs:string*)&#xD;
as xs:string{&#xD;
let $r:=$names!substring-after(.,":")&#xD;
        !concat(.,"()")&#xD;
        =&gt;sort()&#xD;
        =&gt;string-join(file:line-separator())&#xD;
return concat(file:line-separator(),$r,file:line-separator())&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>&#xD;
generate mermaid vars list</xqdoc:description></xqdoc:comment><xqdoc:name>_:class-vars-list</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function _:class-vars-list ( $names as xs:string* ) as xs:string { let $r:=$names =&gt;sort() =&gt;string-join(file:line-separator()) return concat(file:line-separator(),$r,file:line-separator()) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>names</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return><xqdoc:body>function _:class-vars-list($names as xs:string*)&#xD;
as xs:string{&#xD;
let $r:=$names&#xD;
        =&gt;sort()&#xD;
        =&gt;string-join(file:line-separator())&#xD;
return concat(file:line-separator(),$r,file:line-separator())&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>&#xD;
html wrapping for mermaid diagram&#xD;
</xqdoc:description></xqdoc:comment><xqdoc:name>_:page-wrap</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function _:page-wrap ( $mermaid as xs:string+,$related,$opts as map(*) ) as element(html) { &lt;html lang="en"&gt; {_:head("Module imports diagram","resources/")} &lt;body&gt; &lt;nav id="toc" style="position:absolute;top:0"&gt;&lt;span&gt; &lt;span class="badge badge-info"&gt;{$opts?project}&lt;/span&gt; - Module dependancy diagram&lt;/span&gt; {$related} &lt;/nav&gt; &lt;div class="mermaid"&gt;{ $mermaid }&lt;/div&gt; &lt;script type="module"&gt; import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs'; mermaid.initialize({{ startOnLoad:true, logLevel: "error", securityLevel: "loose", theme: (window.matchMedia &amp;amp;&amp;amp; window.matchMedia("(prefers-color-scheme: dark)").matches) ? "dark" : "default" }});&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>mermaid</xqdoc:name><xqdoc:type occurrence="+">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>related</xqdoc:name></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(html)</xqdoc:type></xqdoc:return><xqdoc:body>function _:page-wrap($mermaid as xs:string+,$related,$opts as map(*))&#xD;
as element(html){&#xD;
&lt;html lang="en"&gt;&#xD;
{_:head("Module imports diagram","resources/")}&#xD;
&#xD;
&lt;body&gt;&#xD;
  &lt;nav id="toc" style="position:absolute;top:0"&gt;&lt;span&gt;&#xD;
    &lt;span class="badge badge-info"&gt;{$opts?project}&lt;/span&gt; - Module dependancy diagram&lt;/span&gt;&#xD;
    {$related}&#xD;
  &lt;/nav&gt;&#xD;
  &lt;div class="mermaid"&gt;{ $mermaid }&lt;/div&gt;&#xD;
 &lt;script type="module"&gt;&#xD;
import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';&#xD;
   mermaid.initialize({{&#xD;
  startOnLoad:true,&#xD;
  logLevel: "error", &#xD;
  securityLevel: "loose", &#xD;
  theme: (window.matchMedia &amp;amp;&amp;amp; window.matchMedia("(prefers-color-scheme: dark)").matches) ? "dark" :  "default" &#xD;
    }});&lt;/script&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
common html head&#xD;
</xqdoc:description><xqdoc:param>resources relative path to resources</xqdoc:param></xqdoc:comment><xqdoc:name>_:head</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function _:head ( $title as xs:string,$resources as xs:string ) as element(head) { &lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"/&gt; &lt;meta http-equiv="Generator" content="xqdoca - https://github.com/quodatum/xqdoca" /&gt; &lt;title&gt;{ $title } - xqDocA&lt;/title&gt; &lt;link rel="shortcut icon" type="image/x-icon" href="{ $resources }xqdoc.png" /&gt; &lt;link rel="stylesheet" type="text/css" href="{ $resources || $page:prism }prism.css"/&gt; &lt;link rel="stylesheet" type="text/css" href="{ $resources }page.css" /&gt; &lt;!-- &lt;link rel="stylesheet" type="text/css" href="{ $resources }query.css" /&gt; &lt;link rel="stylesheet" type="text/css" href="{ $resources }base.css" /&gt; --&gt; &lt;/head&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>title</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>resources</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(head)</xqdoc:type></xqdoc:return><xqdoc:body>function _:head($title as xs:string,$resources as xs:string)&#xD;
as element(head){&#xD;
     &lt;head&gt;&#xD;
       &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;&#xD;
       &lt;meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"/&gt; &#xD;
       &lt;meta http-equiv="Generator" content="xqdoca - https://github.com/quodatum/xqdoca" /&gt;&#xD;
        &lt;title&gt;{ $title } - xqDocA&lt;/title&gt;&#xD;
        &#xD;
        &lt;link rel="shortcut icon" type="image/x-icon" href="{ $resources }xqdoc.png" /&gt;&#xD;
        &lt;link rel="stylesheet" type="text/css" href="{ $resources || $page:prism }prism.css"/&gt;&#xD;
        &lt;link rel="stylesheet" type="text/css" href="{ $resources }page.css" /&gt;&#xD;
        &lt;!--&#xD;
        &lt;link rel="stylesheet" type="text/css" href="{ $resources }query.css" /&gt;&#xD;
        &lt;link rel="stylesheet" type="text/css" href="{ $resources }base.css" /&gt; &#xD;
        --&gt;  &#xD;
      &lt;/head&gt;&#xD;
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>