<XQuery><Module><VersionDecl><TOKEN>xquery</TOKEN> <TOKEN>version</TOKEN> <StringLiteral>"3.1"</StringLiteral><TOKEN>;</TOKEN></VersionDecl>&#xD;
(:&#xD;
 : Copyright (c) 2019-2022 Quodatum Ltd&#xD;
 :&#xD;
 : Licensed under the Apache License, Version 2.0 (the "License");&#xD;
 : you may not use this file except in compliance with the License.&#xD;
 : You may obtain a copy of the License at&#xD;
 :&#xD;
 :     http://www.apache.org/licenses/LICENSE-2.0&#xD;
 :&#xD;
 : Unless required by applicable law or agreed to in writing, software&#xD;
 : distributed under the License is distributed on an "AS IS" BASIS,&#xD;
 : WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xD;
 : See the License for the specific language governing permissions and&#xD;
 : limitations under the License.&#xD;
 :)&#xD;
 &#xD;
 (:~&#xD;
 : &lt;h1&gt;command.xqm&lt;/h1&gt;&#xD;
 : &lt;p&gt;command line tool support.&lt;/p&gt;&#xD;
 :&#xD;
 : @author Andy Bunce&#xD;
 : @version 0.3&#xD;
 :)&#xD;
<LibraryModule><ModuleDecl><TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>cmd</NCName> <TOKEN>=</TOKEN> <StringLiteral>'quodatum:command:tools'</StringLiteral><TOKEN>;</TOKEN></ModuleDecl>&#xD;
<Prolog><NamespaceDecl><TOKEN>declare</TOKEN> <TOKEN>namespace</TOKEN> <NCName>pkg</NCName><TOKEN>=</TOKEN><StringLiteral>"http://expath.org/ns/pkg"</StringLiteral></NamespaceDecl><TOKEN>;</TOKEN>&#xD;
&#xD;
(:~  simple command line parse splits on space unless in quotes :)&#xD;
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>cmd:parse-args</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>str</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>)</TOKEN>&#xD;
<TOKEN>as</TOKEN> <SequenceType><QName>xs:string</QName><TOKEN>*</TOKEN></SequenceType><EnclosedExpr><TOKEN>{</TOKEN>&#xD;
<FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>r</QName><TOKEN>:=</TOKEN> <FunctionCall><QName>fold-left</QName><ArgumentList><TOKEN>(</TOKEN>&#xD;
   <RelativePathExpr><FunctionCall><QName>string-to-codepoints</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>str</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>!</TOKEN> <FunctionCall><QName>codepoints-to-string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>,</TOKEN>&#xD;
   <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN><MapConstructorEntry><StringLiteral>"state"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>""</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN><MapConstructorEntry><StringLiteral>"tokens"</StringLiteral><TOKEN>:</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ParenthesizedExpr></MapConstructorEntry><TOKEN>,</TOKEN><MapConstructorEntry><StringLiteral>"current"</StringLiteral><TOKEN>:</TOKEN><StringLiteral>""</StringLiteral></MapConstructorEntry><TOKEN>}</TOKEN></MapConstructor><TOKEN>,</TOKEN>&#xD;
   <NamedFunctionRef><QName>cmd:parse2</QName><TOKEN>#</TOKEN><IntegerLiteral>2</IntegerLiteral></NamedFunctionRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause> &#xD;
<ReturnClause><TOKEN>return</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN><Expr><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>r</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>tokens</NCName></Lookup></PostfixExpr><TOKEN>,</TOKEN> <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><ComparisonExpr><FunctionCall><QName>string-length</QName><ArgumentList><TOKEN>(</TOKEN><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>r</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>current</NCName></Lookup></PostfixExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall> <TOKEN>ne</TOKEN> <IntegerLiteral>0</IntegerLiteral></ComparisonExpr><TOKEN>)</TOKEN> <TOKEN>then</TOKEN> <PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>r</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>current</NCName></Lookup></PostfixExpr> <TOKEN>else</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ParenthesizedExpr></IfExpr></Expr><TOKEN>)</TOKEN></ParenthesizedExpr></ReturnClause></FLWORExpr>&#xD;
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>&#xD;
&#xD;
<AnnotatedDecl><TOKEN>declare</TOKEN> <Annotation><TOKEN>%</TOKEN><QName>private</QName></Annotation> <FunctionDecl><TOKEN>function</TOKEN> <QName>cmd:parse2</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>state</QName> <TypeDeclaration><TOKEN>as</TOKEN> <AnyMapTest><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></AnyMapTest></TypeDeclaration></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>char</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>&#xD;
<TOKEN>as</TOKEN> <AnyMapTest><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></AnyMapTest><EnclosedExpr><TOKEN>{</TOKEN>&#xD;
 <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>new</QName><TOKEN>:=</TOKEN><SwitchExpr><TOKEN>switch</TOKEN> <TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>char</QName></VarRef><TOKEN>)</TOKEN>&#xD;
 <SwitchCaseClause><TOKEN>case</TOKEN> <StringLiteral>'"'</StringLiteral>&#xD;
 <TOKEN>case</TOKEN> <StringLiteral>"'"</StringLiteral> <TOKEN>return</TOKEN> <FunctionCall><QName>map:entry</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"state"</StringLiteral><TOKEN>,</TOKEN><IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><ComparisonExpr><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>state</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>state</NCName></Lookup></PostfixExpr> <TOKEN>eq</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>char</QName></VarRef></ComparisonExpr><TOKEN>)</TOKEN> <TOKEN>then</TOKEN> <StringLiteral>""</StringLiteral> <TOKEN>else</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>char</QName></VarRef></IfExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></SwitchCaseClause>               &#xD;
                   &#xD;
 <SwitchCaseClause><TOKEN>case</TOKEN> <StringLiteral>' '</StringLiteral> <TOKEN>return</TOKEN> <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><ComparisonExpr><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>state</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>state</NCName></Lookup></PostfixExpr> <TOKEN>eq</TOKEN> <StringLiteral>""</StringLiteral></ComparisonExpr><TOKEN>)</TOKEN>&#xD;
                  <TOKEN>then</TOKEN> <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><ComparisonExpr><FunctionCall><QName>string-length</QName><ArgumentList><TOKEN>(</TOKEN><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>state</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>current</NCName></Lookup></PostfixExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall> <TOKEN>ne</TOKEN> <IntegerLiteral>0</IntegerLiteral></ComparisonExpr><TOKEN>)</TOKEN>&#xD;
                       <TOKEN>then</TOKEN>  <MapConstructor><TOKEN>map</TOKEN> <TOKEN>{</TOKEN>  <MapConstructorEntry><StringLiteral>"tokens"</StringLiteral><TOKEN>:</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN><Expr><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>state</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>tokens</NCName></Lookup></PostfixExpr><TOKEN>,</TOKEN><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>state</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>current</NCName></Lookup></PostfixExpr></Expr><TOKEN>)</TOKEN></ParenthesizedExpr></MapConstructorEntry><TOKEN>,</TOKEN> <MapConstructorEntry><StringLiteral>"current"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>""</StringLiteral></MapConstructorEntry><TOKEN>}</TOKEN></MapConstructor>&#xD;
                       <TOKEN>else</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ParenthesizedExpr></IfExpr>&#xD;
                 <TOKEN>else</TOKEN> <FunctionCall><QName>map:entry</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"current"</StringLiteral><TOKEN>,</TOKEN> <StringConcatExpr><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>state</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>current</NCName></Lookup></PostfixExpr> <TOKEN>||</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>char</QName></VarRef></StringConcatExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></IfExpr></SwitchCaseClause>&#xD;
                 &#xD;
  <TOKEN>default</TOKEN> <TOKEN>return</TOKEN>  <FunctionCall><QName>map:entry</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"current"</StringLiteral><TOKEN>,</TOKEN> <StringConcatExpr><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>state</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>current</NCName></Lookup></PostfixExpr> <TOKEN>||</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>char</QName></VarRef></StringConcatExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></SwitchExpr></LetBinding></LetClause>&#xD;
  <ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>map:merge</QName><ArgumentList><TOKEN>(</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN><Expr><VarRef><TOKEN>$</TOKEN><QName>new</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>state</QName></VarRef></Expr><TOKEN>)</TOKEN></ParenthesizedExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr>       &#xD;
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>&#xD;
&#xD;
(:~ raise error if deps missing &#xD;
@return version :)&#xD;
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>cmd:check-dependancies</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>pkg</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>pkg:package</QName><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN>&#xD;
<TOKEN>as</TOKEN> <SequenceType><TOKEN>empty-sequence</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></SequenceType><EnclosedExpr><TOKEN>{</TOKEN>&#xD;
  <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>basex</QName><TOKEN>:=</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>pkg</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>pkg:dependency</QName><Predicate><TOKEN>[</TOKEN><ComparisonExpr><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>processor</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>=</TOKEN><StringLiteral>"http://basex.org/"</StringLiteral></ComparisonExpr><TOKEN>]</TOKEN></Predicate></AxisStep><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>version</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>/</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr></LetBinding></LetClause>&#xD;
  <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>basex-active</QName><TOKEN>:=</TOKEN> <RelativePathExpr><FunctionCall><QName>db:system</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>/</TOKEN><AxisStep><QName>generalinformation</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><AxisStep><QName>version</QName><PredicateList/></AxisStep><TOKEN>/</TOKEN><PostfixExpr><FunctionCall><QName>tokenize</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>,</TOKEN><StringLiteral>" "</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><Predicate><TOKEN>[</TOKEN><IntegerLiteral>1</IntegerLiteral><TOKEN>]</TOKEN></Predicate></PostfixExpr></RelativePathExpr></LetBinding></LetClause>&#xD;
  <ReturnClause><TOKEN>return</TOKEN> &#xD;
  &#xD;
  <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN> <ComparisonExpr><VarRef><TOKEN>$</TOKEN><QName>basex-active</QName></VarRef> <TOKEN>ne</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>basex</QName></VarRef></ComparisonExpr><TOKEN>)</TOKEN>&#xD;
  <TOKEN>then</TOKEN> <FunctionCall><QName>error</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>xs:QName</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"pkg:version"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN><StringConstructor><TOKEN>``[</TOKEN><StringConstructorContent><StringConstructorChars>BaseX version </StringConstructorChars><StringConstructorInterpolation><TOKEN>`{</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>basex-active</QName></VarRef> <TOKEN>}`</TOKEN></StringConstructorInterpolation><StringConstructorChars> may not be supported</StringConstructorChars></StringConstructorContent><TOKEN>]``</TOKEN></StringConstructor><TOKEN>)</TOKEN></ArgumentList></FunctionCall>&#xD;
  <TOKEN>else</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN>&#xD;
         <FLWORExpr><ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>p</QName> <TOKEN>in</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>pkg</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>pkg:dependency</QName><Predicate><TOKEN>[</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>]</TOKEN></Predicate></AxisStep></RelativePathExpr></ForBinding></ForClause>&#xD;
         <ReturnClause><TOKEN>return</TOKEN> <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><FunctionCall><QName>cmd:is-missing</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>p</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>,</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>p</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>version</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN> &#xD;
                <TOKEN>then</TOKEN> <FunctionCall><QName>error</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>xs:QName</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"pkg:missing"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN><StringConcatExpr><StringLiteral>"Not installed: "</StringLiteral> <TOKEN>||</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>p</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr></StringConcatExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall> &#xD;
                <TOKEN>else</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ParenthesizedExpr></IfExpr></ReturnClause></FLWORExpr>&#xD;
        <TOKEN>)</TOKEN></ParenthesizedExpr></IfExpr></ReturnClause></FLWORExpr>&#xD;
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>&#xD;
&#xD;
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>cmd:is-missing</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>name</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>version</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>&#xD;
<TOKEN>as</TOKEN> <QName>xs:boolean</QName><EnclosedExpr><TOKEN>{</TOKEN>&#xD;
    <ArrowExpr><PostfixExpr><FunctionCall><QName>repo:list</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><Predicate><TOKEN>[</TOKEN><AndExpr><ComparisonExpr><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>=</TOKEN><VarRef><TOKEN>$</TOKEN><QName>name</QName></VarRef></ComparisonExpr> <TOKEN>and</TOKEN> <ComparisonExpr><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>version</QName></AbbrevForwardStep> <PredicateList/></AxisStep><TOKEN>eq</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>version</QName></VarRef></ComparisonExpr></AndExpr><TOKEN>]</TOKEN></Predicate></PostfixExpr><TOKEN>=&gt;</TOKEN><TOKEN>empty</TOKEN><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></ArrowExpr> &#xD;
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>&#xD;
&#xD;
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>cmd:package-source</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>name</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>version</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>&#xD;
<TOKEN>as</TOKEN> <QName>xs:string</QName><EnclosedExpr><TOKEN>{</TOKEN>&#xD;
    <SwitchExpr><TOKEN>switch</TOKEN> <TOKEN>(</TOKEN><StringConcatExpr><VarRef><TOKEN>$</TOKEN><QName>name</QName></VarRef> <TOKEN>||</TOKEN> <StringLiteral>"@"</StringLiteral> <TOKEN>||</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>version</QName></VarRef></StringConcatExpr><TOKEN>)</TOKEN>&#xD;
    <SwitchCaseClause><TOKEN>case</TOKEN> <StringLiteral>"http://expkg-zone58.github.io/ex-xparse@0.7.8"</StringLiteral>&#xD;
         <TOKEN>return</TOKEN>  <StringLiteral>"https://github.com/expkg-zone58/ex-xparse/releases/download/v0.7.8/ex-xparse-0.7.8.xar"</StringLiteral></SwitchCaseClause>&#xD;
    <TOKEN>default</TOKEN> <TOKEN>return</TOKEN> <FunctionCall><QName>error</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>xs:QName</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"pkg:version"</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN><StringConcatExpr><StringLiteral>"no source for :"</StringLiteral> <TOKEN>||</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>name</QName></VarRef></StringConcatExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></SwitchExpr> &#xD;
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>&#xD;
&#xD;
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>cmd:install</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>pkg</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>pkg:package</QName><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN>&#xD;
<TOKEN>as</TOKEN> <SequenceType><TOKEN>empty-sequence</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></SequenceType><EnclosedExpr><TOKEN>{</TOKEN>&#xD;
    <FLWORExpr><ForClause><TOKEN>for</TOKEN>  <ForBinding><TOKEN>$</TOKEN><QName>p</QName> <TOKEN>in</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>pkg</QName></VarRef><TOKEN>/</TOKEN><AxisStep><QName>pkg:dependency</QName><Predicate><TOKEN>[</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep><TOKEN>]</TOKEN></Predicate></AxisStep></RelativePathExpr></ForBinding></ForClause>&#xD;
    <WhereClause><TOKEN>where</TOKEN> <FunctionCall><QName>cmd:is-missing</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>p</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>,</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>p</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>version</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></WhereClause>&#xD;
    <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>src</QName><TOKEN>:=</TOKEN><FunctionCall><QName>cmd:package-source</QName><ArgumentList><TOKEN>(</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>p</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>name</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>,</TOKEN><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>p</QName></VarRef><TOKEN>/</TOKEN><AxisStep><AbbrevForwardStep><TOKEN>@</TOKEN><QName>version</QName></AbbrevForwardStep><PredicateList/></AxisStep></RelativePathExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>&#xD;
    <ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>repo:install</QName><ArgumentList><TOKEN>(</TOKEN><ArrowExpr><VarRef><TOKEN>$</TOKEN><QName>src</QName></VarRef><TOKEN>=&gt;</TOKEN><QName>trace</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>"Installing: "</StringLiteral><TOKEN>)</TOKEN></ArgumentList></ArrowExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr>&#xD;
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN></Prolog></LibraryModule></Module>&#xD;
<EOF/></XQuery>