<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2025-05-17T18:35:19.705+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>quodatum:xqdoca.generator.meta</xqdoc:uri><xqdoc:name>_</xqdoc:name><xqdoc:comment><xqdoc:description><p>Generate meta data about the <code>xqDocA</code> run</p></xqdoc:description><xqdoc:author>Andy Bunce, Quodatum, License: Apache-2.0</xqdoc:author><xqdoc:custom tag="copyright">(c) 2019-2026 Quodatum Ltd</xqdoc:custom></xqdoc:comment><xqdoc:body>xquery version "3.1";&#xD;
(:~&#xD;
   &lt;p&gt;Generate meta data about the &lt;code&gt;xqDocA&lt;/code&gt; run&lt;/p&gt;&#xD;
   @copyright (c) 2019-2026 Quodatum Ltd&#xD;
 : @author Andy Bunce, Quodatum, License: Apache-2.0&#xD;
 :)&#xD;
 &#xD;
module namespace _ = 'quodatum:xqdoca.generator.meta';&#xD;
declare namespace xqdoca="https://github.com/Quodatum/xqdoca";&#xD;
&#xD;
&#xD;
(:~&#xD;
 : metadata. &#xD;
 :)&#xD;
declare &#xD;
%xqdoca:global("xqdoca.xml","xqDocA run configuration report (XML)")&#xD;
%xqdoca:output("xqdoca.xml","xml") &#xD;
function _:restxq($model,$opts)&#xD;
{&#xD;
&lt;xqdoca created="{current-dateTime()}"&gt;&#xD;
{&#xD;
let $f:=function($v,$this){&#xD;
  typeswitch($v)&#xD;
  case xs:anyAtomicType return $v&#xD;
  case   map(*) return map:for-each($v,&#xD;
                     function($k,$v){ if(starts-with($k,".")) then () else element {$k} { $this($v,$this)}&#xD;
                })&#xD;
  default return $v!&lt;_&gt;{.}&lt;/_&gt;&#xD;
}&#xD;
return $f($opts,$f)&#xD;
}&#xD;
&lt;/xqdoca&gt;&#xD;
};&#xD;
</xqdoc:body></xqdoc:module><xqdoc:namespaces><xqdoc:namespace prefix="_" uri="quodatum:xqdoca.generator.meta"/><xqdoc:namespace prefix="xqdoca" uri="https://github.com/Quodatum/xqdoca"/><xqdoc:namespace prefix="xs" uri="http://www.w3.org/2001/XMLSchema"/><xqdoc:namespace prefix="map" uri="http://www.w3.org/2005/xpath-functions/map"/></xqdoc:namespaces><xqdoc:variables/><xqdoc:functions><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
metadata.&#xD;
</xqdoc:description></xqdoc:comment><xqdoc:name>_:restxq</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="xqdoca:global"><xqdoc:literal type="xs:string">xqdoca.xml</xqdoc:literal><xqdoc:literal type="xs:string">xqDocA run configuration report (XML)</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="xqdoca:output"><xqdoc:literal type="xs:string">xqdoca.xml</xqdoc:literal><xqdoc:literal type="xs:string">xml</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>function _:restxq ( $model,$opts ) { &lt;xqdoca created="{current-dateTime()}"&gt; { let $f:=function($v,$this){ typeswitch($v) case xs:anyAtomicType return $v case map(*) return map:for-each($v, function($k,$v){ if(starts-with($k,".")) then () else element {$k} { $this($v,$this)} }) default return $v!&lt;_&gt;{.}&lt;/_&gt; } return $f($opts,$f) } &lt;/xqdoca&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>model</xqdoc:name></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:body>function _:restxq($model,$opts)&#xD;
{&#xD;
&lt;xqdoca created="{current-dateTime()}"&gt;&#xD;
{&#xD;
let $f:=function($v,$this){&#xD;
  typeswitch($v)&#xD;
  case xs:anyAtomicType return $v&#xD;
  case   map(*) return map:for-each($v,&#xD;
                     function($k,$v){ if(starts-with($k,".")) then () else element {$k} { $this($v,$this)}&#xD;
                })&#xD;
  default return $v!&lt;_&gt;{.}&lt;/_&gt;&#xD;
}&#xD;
return $f($opts,$f)&#xD;
}&#xD;
&lt;/xqdoca&gt;&#xD;
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>