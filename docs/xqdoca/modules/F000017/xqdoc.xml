<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2025-05-17T18:35:19.705+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>quodatum:xqdoca.model.xqdoc</xqdoc:uri><xqdoc:name>xqdc</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
create xqdoc from parse tree&#xD;
</xqdoc:description><xqdoc:author>Andy Bunce, Quodatum, License: Apache-2.0</xqdoc:author><xqdoc:custom tag="Copyright">(c) 2026 Quodatum Ltd</xqdoc:custom><xqdoc:custom tag="TODO">refs</xqdoc:custom></xqdoc:comment><xqdoc:body>xquery version "3.1";&#xD;
(:~&#xD;
create xqdoc from parse tree &#xD;
 @Copyright (c) 2026 Quodatum Ltd&#xD;
 @author Andy Bunce, Quodatum, License: Apache-2.0&#xD;
 @TODO refs&#xD;
:)&#xD;
 module namespace xqdc = 'quodatum:xqdoca.model.xqdoc';&#xD;
&#xD;
import module namespace xqcom = 'quodatum:xqdoca.model.comment' at "comment-to-xqdoc.xqm";&#xD;
declare namespace xqdoc="http://www.xqdoc.org/1.0";&#xD;
&#xD;
&#xD;
&#xD;
(:~ build xqdoc from XQuery parse tree &#xD;
 @param $parse xml parse tree&#xD;
 @param $url source path&#xD;
 @param $staticNS map of known namespaces&#xD;
 @param $opts {"body-full","body-items","refs"}&#xD;
&#xD;
:)&#xD;
declare function xqdc:build($parse as element(XQuery),&#xD;
                            $url as xs:string,&#xD;
                            $staticNS as map(*),&#xD;
                            $opts as map(*)&#xD;
) as element(xqdoc:xqdoc)&#xD;
{&#xD;
  let $version:=$opts?xqdoc?version&#xD;
  let $mod:= $parse/Module&#xD;
  return &lt;xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"&gt;&#xD;
    &lt;xqdoc:control&gt;&#xD;
      &lt;xqdoc:date&gt;{ current-dateTime() }&lt;/xqdoc:date&gt;&#xD;
      &lt;xqdoc:version&gt;{$version}&lt;/xqdoc:version&gt;&#xD;
	  &lt;/xqdoc:control&gt;{&#xD;
	   xqdc:module($mod, $url, $opts)&#xD;
&#xD;
    ,xqdc:wrap($parse/Module/(MainModule|LibraryModule)/Prolog/Import/ModuleImport&#xD;
                ,xs:QName("xqdoc:imports")&#xD;
                ,xqdc:import(?,$opts))&#xD;
 &#xD;
    ,xqdc:namespaces($mod,$staticNS)&#xD;
    ,xqdc:variables($mod, $opts)&#xD;
    ,xqdc:functions($mod, $opts)&#xD;
  }&lt;/xqdoc:xqdoc&gt;&#xD;
};&#xD;
&#xD;
(:~ generate xqdoc:module from parse &#xD;
@param $url source location, the last segment is written to xqdoc:uri for main modules&#xD;
:)&#xD;
declare %private function xqdc:module($parse as element(Module),$url as xs:string, $opts as map(*))&#xD;
as element(xqdoc:module)&#xD;
{&#xD;
let $type:=if($parse/LibraryModule) then "library" else "main"&#xD;
let $name:=$parse/LibraryModule/ModuleDecl/NCName/string()&#xD;
&#xD;
let $uri:=if($type eq 'library')&#xD;
          then $parse/LibraryModule/ModuleDecl/URILiteral/xqdc:unquote(.) &#xD;
          else $url=&gt;translate("\","/")=&gt;replace(".*/(.*)","$1")&#xD;
&#xD;
let $com:=util:or(xqcom:comment($parse)&#xD;
                  ,xqcom:comment($parse/(LibraryModule|MainModule))&#xD;
                 )&#xD;
                (: =&gt;trace("Mod comm: ") :)&#xD;
          &#xD;
return &#xD;
    &lt;xqdoc:module type="{ $type }"&gt;&#xD;
      &lt;xqdoc:uri&gt;{ $uri }&lt;/xqdoc:uri&gt;&#xD;
      &lt;xqdoc:name&gt;{ $name }&lt;/xqdoc:name&gt;&#xD;
      { $com }&#xD;
      { if(xqdc:opt($opts,"body-full")) then xqdc:body(root($parse))} &#xD;
    &lt;/xqdoc:module&gt;&#xD;
};&#xD;
&#xD;
(:~ xqdoc:import from ModuleImport :)&#xD;
declare %private function xqdc:import($import as element(ModuleImport), $opts as map(*))&#xD;
as element(xqdoc:import)&#xD;
{&#xD;
   let $uri:= $import/URILiteral/string(.)&#xD;
   return &lt;xqdoc:import type="library"&gt;&#xD;
              &lt;xqdoc:uri&gt;{ xqdc:unquote($uri[1]) }&lt;/xqdoc:uri&gt;&#xD;
              {(if(xqdc:is11($opts)) then tail($uri)!&lt;xqdoc:at&gt;{ xqdc:unquote(.) }&lt;/xqdoc:at&gt;) &#xD;
                ,xqcom:comment($import)}&#xD;
          &lt;/xqdoc:import&gt;&#xD;
};&#xD;
&#xD;
&#xD;
declare %private function xqdc:namespaces($parse as element(Module),&#xD;
$staticNS as map(*))&#xD;
as element(xqdoc:namespaces)&#xD;
{&#xD;
  let $this:=if($parse/LibraryModule)&#xD;
             then&#xD;
                let $name:=$parse/LibraryModule/ModuleDecl/(.|NCName)/NCName[not(NCName)]/string()&#xD;
                let $uri:=$parse/LibraryModule/ModuleDecl/URILiteral/StringLiteral/xqdc:unquote(.)&#xD;
                return &lt;xqdoc:namespace prefix="{ $name}" uri="{ $uri }"/&gt;&#xD;
  let $namespaces:=(&#xD;
        $this,&#xD;
        for $import in $parse/(MainModule|LibraryModule)/Prolog/(Import/ModuleImport|NamespaceDecl)&#xD;
        (: let $_:=trace($import,"FFF:" ) :)&#xD;
        let $uri:=($import/URILiteral/StringLiteral)[1]=&gt;xqdc:unquote()&#xD;
        let $prefix:= $import/NCName/string()&#xD;
        return &lt;xqdoc:namespace prefix="{ $prefix}" uri="{ $uri }"&gt;{&#xD;
                   xqcom:comment($import)&#xD;
        }&lt;/xqdoc:namespace&gt;&#xD;
  )&#xD;
   let $prefixes:=$parse//QName[contains(.,":")]!substring-before(.,":")=&gt;distinct-values()&#xD;
   let $prefixes:=$prefixes[not(.=$namespaces/@prefix)]&#xD;
   let $static:=$prefixes!(if(map:contains($staticNS,.))&#xD;
                          then &lt;xqdoc:namespace prefix="{ . }" uri="{ $staticNS(.) }" /&gt;&#xD;
                          )&#xD;
 &#xD;
  return &lt;xqdoc:namespaces&gt;{ $namespaces,$static }&lt;/xqdoc:namespaces&gt;&#xD;
  (: =&gt;trace("NSSS") :)&#xD;
};  &#xD;
&#xD;
declare %private function xqdc:variables($parse as element(Module), $opts as map(*))&#xD;
as element(xqdoc:variables)&#xD;
{&#xD;
  &lt;xqdoc:variables&gt;{ &#xD;
	$parse/*/Prolog/AnnotatedDecl/VarDecl!xqdc:variable(., $opts)&#xD;
	}&lt;/xqdoc:variables&gt;&#xD;
};&#xD;
&#xD;
declare %private function  xqdc:variable($vardecl as element(VarDecl), $opts as map(*))&#xD;
as element(xqdoc:variable){&#xD;
	let $name:=$vardecl/VarName/string()&#xD;
  (: =&gt;trace("VAR: ") :)&#xD;
&#xD;
  return &lt;xqdoc:variable&gt;&#xD;
     { if(xqdc:is11($opts)) &#xD;
       then $vardecl/TOKEN[.="external"]!attribute external {"true"} }&#xD;
			&lt;xqdoc:name&gt;{ $name }&lt;/xqdoc:name&gt;&#xD;
      { &#xD;
         xqcom:comment($vardecl/..)&#xD;
        ,xqdc:wrap($vardecl/parent::AnnotatedDecl/Annotation&#xD;
                   ,xs:QName('xqdoc:annotations')&#xD;
                   ,xqdc:annotation#1) &#xD;
&#xD;
       ,$vardecl/TypeDeclaration/SequenceType!xqdc:type(.)&#xD;
&#xD;
       ,if(xqdc:is11($opts)) then xqdc:refs($vardecl)&#xD;
&#xD;
       ,if(xqdc:is11($opts) and xqdc:opt($opts,"body-items"))&#xD;
        then xqdc:body($vardecl) }&#xD;
		&lt;/xqdoc:variable&gt;&#xD;
};&#xD;
&#xD;
declare %private function xqdc:functions($module as element(Module), $opts as map(*))&#xD;
as element(xqdoc:functions)&#xD;
{&#xD;
  let $items:= $module/*/Prolog/AnnotatedDecl/FunctionDecl  &#xD;
  return &lt;xqdoc:functions&gt;{  &#xD;
          $items!xqdc:function(., $opts)&#xD;
          ,xqdc:main($module/MainModule/QueryBody)&#xD;
        (:~ @TODO&#xD;
        if ($body) then (&#xD;
              insert node xqp:main($body) as last into xqdoc:functions,&#xD;
              insert node &lt;xqdoc:namespace prefix="local" uri="http://www.w3.org/2005/xquery-local-functions"/&gt;&#xD;
                    into xqdoc:namespaces&#xD;
                  ) ~:)&#xD;
                      &#xD;
          }&lt;/xqdoc:functions&gt;&#xD;
};&#xD;
&#xD;
(:~  create dummy function for main modules&#xD;
@todo pull real comments&#xD;
 :)&#xD;
 declare function xqdc:main($body as element(*)?)&#xD;
 as element(xqdoc:function)?&#xD;
 {&#xD;
   if($body) then&#xD;
        &lt;xqdoc:function arity="0"&gt;&#xD;
          &lt;xqdoc:comment&gt;&#xD;
          &lt;xqdoc:description&gt;The query body.&lt;/xqdoc:description&gt;&#xD;
          &lt;xqdoc:custom tag="note"&gt;pseudo main function as per http//xqdoc.org&lt;/xqdoc:custom&gt;&#xD;
         &lt;/xqdoc:comment&gt;&#xD;
         &lt;xqdoc:name&gt;local:xqDoc-main&lt;/xqdoc:name&gt;&#xD;
         &lt;xqdoc:signature&gt;local:xqDoc-main()&lt;/xqdoc:signature&gt;&#xD;
         &lt;xqdoc:body&gt;{string($body)}&lt;/xqdoc:body&gt;&#xD;
         &lt;/xqdoc:function&gt;&#xD;
 };&#xD;
&#xD;
declare %private function xqdc:function($fundecl as element(FunctionDecl), $opts as map(*))&#xD;
as element(xqdoc:function){&#xD;
  let $params:= $fundecl/(.|ParamList)/Param&#xD;
  return &lt;xqdoc:function&gt;&#xD;
    {  $fundecl/TOKEN[.="external"]!attribute external {"true"},&#xD;
       attribute arity {count($params)},&#xD;
      xqcom:comment(util:or($fundecl/..,$fundecl/../Prolog))}&#xD;
		&lt;xqdoc:name&gt;{ &#xD;
      $fundecl/EQName/string() &#xD;
      (:~ =&gt;trace("FUN: ") ~:)&#xD;
      }&lt;/xqdoc:name&gt;&#xD;
&#xD;
     { $fundecl/parent::AnnotatedDecl/Annotation&#xD;
       =&gt;xqdc:wrap( xs:QName('xqdoc:annotations'), xqdc:annotation#1) }&#xD;
      &#xD;
      &#xD;
      &lt;xqdoc:signature&gt;{$fundecl/((*|text()) except EnclosedExpr)/string()&#xD;
                        =&gt;string-join(" ")=&gt;normalize-space()&#xD;
       }&lt;/xqdoc:signature&gt;&#xD;
&#xD;
      {   xqdc:parameters($params)  &#xD;
        , xqdc:return($fundecl)&#xD;
        , xqdc:refs($fundecl) &#xD;
        ,if(xqdc:opt($opts,"body-items")) then xqdc:body($fundecl) }&#xD;
  &lt;/xqdoc:function&gt;&#xD;
};&#xD;
&#xD;
&#xD;
(: xqdoc parameter from parse Param :)&#xD;
declare %private function xqdc:parameters($params as element(Param)*)&#xD;
as element(xqdoc:parameters)?&#xD;
{&#xD;
  if(exists($params))&#xD;
  then &lt;xqdoc:parameters&gt;{&#xD;
          $params!&lt;xqdoc:parameter&gt;&#xD;
                      &lt;xqdoc:name&gt;{ EQName/string() }&lt;/xqdoc:name&gt;&#xD;
                      { TypeDeclaration/SequenceType!xqdc:type(.)}&#xD;
                  &lt;/xqdoc:parameter&gt;&#xD;
      }&lt;/xqdoc:parameters&gt;&#xD;
};&#xD;
&#xD;
(: xqdoc return from parse fundecl :)&#xD;
declare %private function xqdc:return($fundecl as element(FunctionDecl))&#xD;
as element(xqdoc:return)?&#xD;
{&#xD;
  if($fundecl/SequenceType)&#xD;
  then &lt;xqdoc:return&gt;{ xqdc:type($fundecl/SequenceType) }&lt;/xqdoc:return&gt;&#xD;
};&#xD;
&#xD;
(:~ xqdoc type from parse sequencetype :)&#xD;
declare %private function xqdc:type($type as element(SequenceType)?)&#xD;
as element(xqdoc:type)?&#xD;
{&#xD;
  if(exists($type))&#xD;
  then &#xD;
 &lt;xqdoc:type &gt;{&#xD;
       if($type/OccurrenceIndicator)&#xD;
       then attribute occurrence {$type/OccurrenceIndicator/string()}&#xD;
      ,$type/*=&gt;head()=&gt;string() &#xD;
 }&lt;/xqdoc:type&gt;&#xD;
};&#xD;
&#xD;
(:~ sequence of invoked and ref-variable elements :)&#xD;
declare %private function xqdc:refs($ast as element(*))&#xD;
as element(*)*&#xD;
{&#xD;
 (: let $_:=trace("refs",$ast)&#xD;
 return :) () &#xD;
};&#xD;
&#xD;
(:~  :)&#xD;
declare %private &#xD;
function xqdc:invoked($element as xs:string,&#xD;
                      $uri as xs:string,&#xD;
                      $name as xs:string,&#xD;
                      $arity as xs:integer?)&#xD;
as element(*)&#xD;
{&#xD;
 element {$element} {&#xD;
         $arity!attribute arity {$arity},&#xD;
         &lt;xqdoc:uri&gt;{$uri}&lt;/xqdoc:uri&gt;,&#xD;
         &lt;xqdoc:name&gt;{$name}&lt;/xqdoc:name&gt;&#xD;
       }&#xD;
 };&#xD;
 &#xD;
 (:~ source code :)&#xD;
declare %private function xqdc:body($ast as element(*))&#xD;
as element(xqdoc:body)&#xD;
{&#xD;
&lt;xqdoc:body&gt;{$ast/string()}&lt;/xqdoc:body&gt;&#xD;
 };&#xD;
 &#xD;
 (:~ annotation code &#xD;
 &lt;pre&gt;&#xD;
 &lt;Annotation&gt;&lt;TOKEN&gt;%&lt;/TOKEN&gt;&lt;TOKEN&gt;updating&lt;/TOKEN&gt;&lt;/Annotation&gt;&#xD;
 &lt;/pre&gt;&#xD;
 :)&#xD;
declare %private function xqdc:annotation($anno as element(Annotation))&#xD;
as element(xqdoc:annotation)&#xD;
{&#xD;
&lt;xqdoc:annotation name="{ $anno/EQName/string() }"&gt;{&#xD;
 for $a in $anno/*&#xD;
 return typeswitch($a)&#xD;
        case element(Literal) &#xD;
          return &lt;xqdoc:literal type="xs:string"&gt;{ xqdc:unquote($a) }&lt;/xqdoc:literal&gt;&#xD;
        case element(TOKEN)  | element(EQName) | text()  (: ignore these :)&#xD;
          return ()&#xD;
        default &#xD;
        return ( prof:dump(name($a),"DDDDD") ,error())&#xD;
}&lt;/xqdoc:annotation&gt;&#xD;
};&#xD;
&#xD;
(:~  get boolean option :)&#xD;
declare %private function xqdc:opt($opts as map(*), $opt as xs:string)&#xD;
as xs:boolean{&#xD;
   $opts?xqdoc($opt)=&gt;xs:boolean() (: =&gt;trace($opt || ": " ) :)&#xD;
};&#xD;
&#xD;
(:~ return true if o/p xqdoc 1.1 format :)&#xD;
declare %private function xqdc:is11($opts as map(*))&#xD;
as xs:boolean{&#xD;
 $opts?xqdoc?version eq "1.1"&#xD;
};&#xD;
&#xD;
(:~ if items then apply $fun to each and wrap result sequence in $qname :)&#xD;
declare %private function xqdc:wrap($items as item()*,$qname as xs:QName,$fun as function(*))&#xD;
as element(*)?{&#xD;
  if(exists($items))&#xD;
  then element {$qname}{ $items!$fun(.)}&#xD;
};&#xD;
&#xD;
(:~  remove start and end quote marks :)&#xD;
declare %private function xqdc:unquote($s as xs:string)&#xD;
as xs:string{&#xD;
  replace($s,'^[''"](.*)[''"]$','$1')&#xD;
};&#xD;
&#xD;
</xqdoc:body></xqdoc:module><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>quodatum:xqdoca.model.comment</xqdoc:uri><xqdoc:at>comment-to-xqdoc.xqm</xqdoc:at></xqdoc:import></xqdoc:imports><xqdoc:namespaces><xqdoc:namespace prefix="xqdc" uri="quodatum:xqdoca.model.xqdoc"/><xqdoc:namespace prefix="xqcom" uri="quodatum:xqdoca.model.comment"/><xqdoc:namespace prefix="xqdoc" uri="http://www.xqdoc.org/1.0"/><xqdoc:namespace prefix="xs" uri="http://www.w3.org/2001/XMLSchema"/><xqdoc:namespace prefix="util" uri="http://basex.org/modules/util"/><xqdoc:namespace prefix="map" uri="http://www.w3.org/2005/xpath-functions/map"/><xqdoc:namespace prefix="prof" uri="http://basex.org/modules/prof"/></xqdoc:namespaces><xqdoc:variables/><xqdoc:functions><xqdoc:function arity="4"><xqdoc:comment><xqdoc:description>&#xD;
build xqdoc from XQuery parse tree&#xD;
&#xD;
</xqdoc:description><xqdoc:param>$parse xml parse tree</xqdoc:param><xqdoc:param>$url source path</xqdoc:param><xqdoc:param>$staticNS map of known namespaces</xqdoc:param><xqdoc:param>$opts {"body-full","body-items","refs"}</xqdoc:param></xqdoc:comment><xqdoc:name>xqdc:build</xqdoc:name><xqdoc:signature>function xqdc:build ( $parse as element(XQuery), $url as xs:string, $staticNS as map(*), $opts as map(*) ) as element(xqdoc:xqdoc) { let $version:=$opts?xqdoc?version let $mod:= $parse/Module return &lt;xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"&gt; &lt;xqdoc:control&gt; &lt;xqdoc:date&gt;{ current-dateTime() }&lt;/xqdoc:date&gt; &lt;xqdoc:version&gt;{$version}&lt;/xqdoc:version&gt; &lt;/xqdoc:control&gt;{ xqdc:module($mod, $url, $opts) ,xqdc:wrap($parse/Module/(MainModule|LibraryModule)/Prolog/Import/ModuleImport ,xs:QName("xqdoc:imports") ,xqdc:import(?,$opts)) ,xqdc:namespaces($mod,$staticNS) ,xqdc:variables($mod, $opts) ,xqdc:functions($mod, $opts) }&lt;/xqdoc:xqdoc&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>parse</xqdoc:name><xqdoc:type>element(XQuery)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>url</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>staticNS</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(xqdoc:xqdoc)</xqdoc:type></xqdoc:return><xqdoc:body>function xqdc:build($parse as element(XQuery),&#xD;
                            $url as xs:string,&#xD;
                            $staticNS as map(*),&#xD;
                            $opts as map(*)&#xD;
) as element(xqdoc:xqdoc)&#xD;
{&#xD;
  let $version:=$opts?xqdoc?version&#xD;
  let $mod:= $parse/Module&#xD;
  return &lt;xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"&gt;&#xD;
    &lt;xqdoc:control&gt;&#xD;
      &lt;xqdoc:date&gt;{ current-dateTime() }&lt;/xqdoc:date&gt;&#xD;
      &lt;xqdoc:version&gt;{$version}&lt;/xqdoc:version&gt;&#xD;
	  &lt;/xqdoc:control&gt;{&#xD;
	   xqdc:module($mod, $url, $opts)&#xD;
&#xD;
    ,xqdc:wrap($parse/Module/(MainModule|LibraryModule)/Prolog/Import/ModuleImport&#xD;
                ,xs:QName("xqdoc:imports")&#xD;
                ,xqdc:import(?,$opts))&#xD;
 &#xD;
    ,xqdc:namespaces($mod,$staticNS)&#xD;
    ,xqdc:variables($mod, $opts)&#xD;
    ,xqdc:functions($mod, $opts)&#xD;
  }&lt;/xqdoc:xqdoc&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>&#xD;
generate xqdoc:module from parse&#xD;
</xqdoc:description><xqdoc:param>$url source location, the last segment is written to xqdoc:uri for main modules</xqdoc:param></xqdoc:comment><xqdoc:name>xqdc:module</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function xqdc:module ( $parse as element(Module),$url as xs:string, $opts as map(*) ) as element(xqdoc:module) { let $type:=if($parse/LibraryModule) then "library" else "main" let $name:=$parse/LibraryModule/ModuleDecl/NCName/string() let $uri:=if($type eq 'library') then $parse/LibraryModule/ModuleDecl/URILiteral/xqdc:unquote(.) else $url=&gt;translate("\","/")=&gt;replace(".*/(.*)","$1") let $com:=util:or(xqcom:comment($parse) ,xqcom:comment($parse/(LibraryModule|MainModule)) ) (: =&gt;trace("Mod comm: ") :) return &lt;xqdoc:module type="{ $type }"&gt; &lt;xqdoc:uri&gt;{ $uri }&lt;/xqdoc:uri&gt; &lt;xqdoc:name&gt;{ $name }&lt;/xqdoc:name&gt; { $com } { if(xqdc:opt($opts,"body-full")) then xqdc:body(root($parse))} &lt;/xqdoc:module&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>parse</xqdoc:name><xqdoc:type>element(Module)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>url</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(xqdoc:module)</xqdoc:type></xqdoc:return><xqdoc:body>function xqdc:module($parse as element(Module),$url as xs:string, $opts as map(*))&#xD;
as element(xqdoc:module)&#xD;
{&#xD;
let $type:=if($parse/LibraryModule) then "library" else "main"&#xD;
let $name:=$parse/LibraryModule/ModuleDecl/NCName/string()&#xD;
&#xD;
let $uri:=if($type eq 'library')&#xD;
          then $parse/LibraryModule/ModuleDecl/URILiteral/xqdc:unquote(.) &#xD;
          else $url=&gt;translate("\","/")=&gt;replace(".*/(.*)","$1")&#xD;
&#xD;
let $com:=util:or(xqcom:comment($parse)&#xD;
                  ,xqcom:comment($parse/(LibraryModule|MainModule))&#xD;
                 )&#xD;
                (: =&gt;trace("Mod comm: ") :)&#xD;
          &#xD;
return &#xD;
    &lt;xqdoc:module type="{ $type }"&gt;&#xD;
      &lt;xqdoc:uri&gt;{ $uri }&lt;/xqdoc:uri&gt;&#xD;
      &lt;xqdoc:name&gt;{ $name }&lt;/xqdoc:name&gt;&#xD;
      { $com }&#xD;
      { if(xqdc:opt($opts,"body-full")) then xqdc:body(root($parse))} &#xD;
    &lt;/xqdoc:module&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
xqdoc:import from ModuleImport</xqdoc:description></xqdoc:comment><xqdoc:name>xqdc:import</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function xqdc:import ( $import as element(ModuleImport), $opts as map(*) ) as element(xqdoc:import) { let $uri:= $import/URILiteral/string(.) return &lt;xqdoc:import type="library"&gt; &lt;xqdoc:uri&gt;{ xqdc:unquote($uri[1]) }&lt;/xqdoc:uri&gt; {(if(xqdc:is11($opts)) then tail($uri)!&lt;xqdoc:at&gt;{ xqdc:unquote(.) }&lt;/xqdoc:at&gt;) ,xqcom:comment($import)} &lt;/xqdoc:import&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>import</xqdoc:name><xqdoc:type>element(ModuleImport)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(xqdoc:import)</xqdoc:type></xqdoc:return><xqdoc:body>function xqdc:import($import as element(ModuleImport), $opts as map(*))&#xD;
as element(xqdoc:import)&#xD;
{&#xD;
   let $uri:= $import/URILiteral/string(.)&#xD;
   return &lt;xqdoc:import type="library"&gt;&#xD;
              &lt;xqdoc:uri&gt;{ xqdc:unquote($uri[1]) }&lt;/xqdoc:uri&gt;&#xD;
              {(if(xqdc:is11($opts)) then tail($uri)!&lt;xqdoc:at&gt;{ xqdc:unquote(.) }&lt;/xqdoc:at&gt;) &#xD;
                ,xqcom:comment($import)}&#xD;
          &lt;/xqdoc:import&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>xqdc:namespaces</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function xqdc:namespaces ( $parse as element(Module), $staticNS as map(*) ) as element(xqdoc:namespaces) { let $this:=if($parse/LibraryModule) then let $name:=$parse/LibraryModule/ModuleDecl/(.|NCName)/NCName[not(NCName)]/string() let $uri:=$parse/LibraryModule/ModuleDecl/URILiteral/StringLiteral/xqdc:unquote(.) return &lt;xqdoc:namespace prefix="{ $name}" uri="{ $uri }"/&gt; let $namespaces:=( $this, for $import in $parse/(MainModule|LibraryModule)/Prolog/(Import/ModuleImport|NamespaceDecl) (: let $_:=trace($import,"FFF:" ) :) let $uri:=($import/URILiteral/StringLiteral)[1]=&gt;xqdc:unquote() let $prefix:= $import/NCName/string() return &lt;xqdoc:namespace prefix="{ $prefix}" uri="{ $uri }"&gt;{ xqcom:comment($import) }&lt;/xqdoc:namespace&gt; ) let $prefixes:=$parse//QName[contains(.,":")]!substring-before(.,":")=&gt;distinct-values() let $prefixes:=$prefixes[not(.=$namespaces/@prefix)] let $static:=$prefixes!(if(map:contains($staticNS,.)) then &lt;xqdoc:namespace prefix="{ . }" uri="{ $staticNS(.) }" /&gt; ) return &lt;xqdoc:namespaces&gt;{ $namespaces,$static }&lt;/xqdoc:namespaces&gt; (: =&gt;trace("NSSS") :) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>parse</xqdoc:name><xqdoc:type>element(Module)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>staticNS</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(xqdoc:namespaces)</xqdoc:type></xqdoc:return><xqdoc:body>function xqdc:namespaces($parse as element(Module),&#xD;
$staticNS as map(*))&#xD;
as element(xqdoc:namespaces)&#xD;
{&#xD;
  let $this:=if($parse/LibraryModule)&#xD;
             then&#xD;
                let $name:=$parse/LibraryModule/ModuleDecl/(.|NCName)/NCName[not(NCName)]/string()&#xD;
                let $uri:=$parse/LibraryModule/ModuleDecl/URILiteral/StringLiteral/xqdc:unquote(.)&#xD;
                return &lt;xqdoc:namespace prefix="{ $name}" uri="{ $uri }"/&gt;&#xD;
  let $namespaces:=(&#xD;
        $this,&#xD;
        for $import in $parse/(MainModule|LibraryModule)/Prolog/(Import/ModuleImport|NamespaceDecl)&#xD;
        (: let $_:=trace($import,"FFF:" ) :)&#xD;
        let $uri:=($import/URILiteral/StringLiteral)[1]=&gt;xqdc:unquote()&#xD;
        let $prefix:= $import/NCName/string()&#xD;
        return &lt;xqdoc:namespace prefix="{ $prefix}" uri="{ $uri }"&gt;{&#xD;
                   xqcom:comment($import)&#xD;
        }&lt;/xqdoc:namespace&gt;&#xD;
  )&#xD;
   let $prefixes:=$parse//QName[contains(.,":")]!substring-before(.,":")=&gt;distinct-values()&#xD;
   let $prefixes:=$prefixes[not(.=$namespaces/@prefix)]&#xD;
   let $static:=$prefixes!(if(map:contains($staticNS,.))&#xD;
                          then &lt;xqdoc:namespace prefix="{ . }" uri="{ $staticNS(.) }" /&gt;&#xD;
                          )&#xD;
 &#xD;
  return &lt;xqdoc:namespaces&gt;{ $namespaces,$static }&lt;/xqdoc:namespaces&gt;&#xD;
  (: =&gt;trace("NSSS") :)&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>xqdc:variables</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function xqdc:variables ( $parse as element(Module), $opts as map(*) ) as element(xqdoc:variables) { &lt;xqdoc:variables&gt;{ $parse/*/Prolog/AnnotatedDecl/VarDecl!xqdc:variable(., $opts) }&lt;/xqdoc:variables&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>parse</xqdoc:name><xqdoc:type>element(Module)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(xqdoc:variables)</xqdoc:type></xqdoc:return><xqdoc:body>function xqdc:variables($parse as element(Module), $opts as map(*))&#xD;
as element(xqdoc:variables)&#xD;
{&#xD;
  &lt;xqdoc:variables&gt;{ &#xD;
	$parse/*/Prolog/AnnotatedDecl/VarDecl!xqdc:variable(., $opts)&#xD;
	}&lt;/xqdoc:variables&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>xqdc:variable</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function xqdc:variable ( $vardecl as element(VarDecl), $opts as map(*) ) as element(xqdoc:variable) { let $name:=$vardecl/VarName/string() (: =&gt;trace("VAR: ") :) return &lt;xqdoc:variable&gt; { if(xqdc:is11($opts)) then $vardecl/TOKEN[.="external"]!attribute external {"true"} } &lt;xqdoc:name&gt;{ $name }&lt;/xqdoc:name&gt; { xqcom:comment($vardecl/..) ,xqdc:wrap($vardecl/parent::AnnotatedDecl/Annotation ,xs:QName('xqdoc:annotations') ,xqdc:annotation#1) ,$vardecl/TypeDeclaration/SequenceType!xqdc:type(.) ,if(xqdc:is11($opts)) then xqdc:refs($vardecl) ,if(xqdc:is11($opts) and xqdc:opt($opts,"body-items")) then xqdc:body($vardecl) } &lt;/xqdoc:variable&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>vardecl</xqdoc:name><xqdoc:type>element(VarDecl)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(xqdoc:variable)</xqdoc:type></xqdoc:return><xqdoc:body>function  xqdc:variable($vardecl as element(VarDecl), $opts as map(*))&#xD;
as element(xqdoc:variable){&#xD;
	let $name:=$vardecl/VarName/string()&#xD;
  (: =&gt;trace("VAR: ") :)&#xD;
&#xD;
  return &lt;xqdoc:variable&gt;&#xD;
     { if(xqdc:is11($opts)) &#xD;
       then $vardecl/TOKEN[.="external"]!attribute external {"true"} }&#xD;
			&lt;xqdoc:name&gt;{ $name }&lt;/xqdoc:name&gt;&#xD;
      { &#xD;
         xqcom:comment($vardecl/..)&#xD;
        ,xqdc:wrap($vardecl/parent::AnnotatedDecl/Annotation&#xD;
                   ,xs:QName('xqdoc:annotations')&#xD;
                   ,xqdc:annotation#1) &#xD;
&#xD;
       ,$vardecl/TypeDeclaration/SequenceType!xqdc:type(.)&#xD;
&#xD;
       ,if(xqdc:is11($opts)) then xqdc:refs($vardecl)&#xD;
&#xD;
       ,if(xqdc:is11($opts) and xqdc:opt($opts,"body-items"))&#xD;
        then xqdc:body($vardecl) }&#xD;
		&lt;/xqdoc:variable&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>xqdc:functions</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function xqdc:functions ( $module as element(Module), $opts as map(*) ) as element(xqdoc:functions) { let $items:= $module/*/Prolog/AnnotatedDecl/FunctionDecl return &lt;xqdoc:functions&gt;{ $items!xqdc:function(., $opts) ,xqdc:main($module/MainModule/QueryBody) (:~ @TODO if ($body) then ( insert node xqp:main($body) as last into xqdoc:functions, insert node &lt;xqdoc:namespace prefix="local" uri="http://www.w3.org/2005/xquery-local-functions"/&gt; into xqdoc:namespaces ) ~:) }&lt;/xqdoc:functions&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>module</xqdoc:name><xqdoc:type>element(Module)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(xqdoc:functions)</xqdoc:type></xqdoc:return><xqdoc:body>function xqdc:functions($module as element(Module), $opts as map(*))&#xD;
as element(xqdoc:functions)&#xD;
{&#xD;
  let $items:= $module/*/Prolog/AnnotatedDecl/FunctionDecl  &#xD;
  return &lt;xqdoc:functions&gt;{  &#xD;
          $items!xqdc:function(., $opts)&#xD;
          ,xqdc:main($module/MainModule/QueryBody)&#xD;
        (:~ @TODO&#xD;
        if ($body) then (&#xD;
              insert node xqp:main($body) as last into xqdoc:functions,&#xD;
              insert node &lt;xqdoc:namespace prefix="local" uri="http://www.w3.org/2005/xquery-local-functions"/&gt;&#xD;
                    into xqdoc:namespaces&#xD;
                  ) ~:)&#xD;
                      &#xD;
          }&lt;/xqdoc:functions&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>&#xD;
create dummy function for main modules&#xD;
</xqdoc:description><xqdoc:custom tag="todo">pull real comments</xqdoc:custom></xqdoc:comment><xqdoc:name>xqdc:main</xqdoc:name><xqdoc:signature>function xqdc:main ( $body as element(*)? ) as element(xqdoc:function)? { if($body) then &lt;xqdoc:function arity="0"&gt; &lt;xqdoc:comment&gt; &lt;xqdoc:description&gt;The query body.&lt;/xqdoc:description&gt; &lt;xqdoc:custom tag="note"&gt;pseudo main function as per http//xqdoc.org&lt;/xqdoc:custom&gt; &lt;/xqdoc:comment&gt; &lt;xqdoc:name&gt;local:xqDoc-main&lt;/xqdoc:name&gt; &lt;xqdoc:signature&gt;local:xqDoc-main()&lt;/xqdoc:signature&gt; &lt;xqdoc:body&gt;{string($body)}&lt;/xqdoc:body&gt; &lt;/xqdoc:function&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>body</xqdoc:name><xqdoc:type occurrence="?">element(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="?">element(xqdoc:function)</xqdoc:type></xqdoc:return><xqdoc:body>function xqdc:main($body as element(*)?)&#xD;
 as element(xqdoc:function)?&#xD;
 {&#xD;
   if($body) then&#xD;
        &lt;xqdoc:function arity="0"&gt;&#xD;
          &lt;xqdoc:comment&gt;&#xD;
          &lt;xqdoc:description&gt;The query body.&lt;/xqdoc:description&gt;&#xD;
          &lt;xqdoc:custom tag="note"&gt;pseudo main function as per http//xqdoc.org&lt;/xqdoc:custom&gt;&#xD;
         &lt;/xqdoc:comment&gt;&#xD;
         &lt;xqdoc:name&gt;local:xqDoc-main&lt;/xqdoc:name&gt;&#xD;
         &lt;xqdoc:signature&gt;local:xqDoc-main()&lt;/xqdoc:signature&gt;&#xD;
         &lt;xqdoc:body&gt;{string($body)}&lt;/xqdoc:body&gt;&#xD;
         &lt;/xqdoc:function&gt;&#xD;
 }</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>xqdc:function</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function xqdc:function ( $fundecl as element(FunctionDecl), $opts as map(*) ) as element(xqdoc:function) { let $params:= $fundecl/(.|ParamList)/Param return &lt;xqdoc:function&gt; { $fundecl/TOKEN[.="external"]!attribute external {"true"}, attribute arity {count($params)}, xqcom:comment(util:or($fundecl/..,$fundecl/../Prolog))} &lt;xqdoc:name&gt;{ $fundecl/EQName/string() (:~ =&gt;trace("FUN: ") ~:) }&lt;/xqdoc:name&gt; { $fundecl/parent::AnnotatedDecl/Annotation =&gt;xqdc:wrap( xs:QName('xqdoc:annotations'), xqdc:annotation#1) } &lt;xqdoc:signature&gt;{$fundecl/((*|text()) except EnclosedExpr)/string() =&gt;string-join(" ")=&gt;normalize-space() }&lt;/xqdoc:signature&gt; { xqdc:parameters($params) , xqdc:return($fundecl) , xqdc:refs($fundecl) ,if(xqdc:opt($opts,"body-items")) then xqdc:body($fundecl) } &lt;/xqdoc:function&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>fundecl</xqdoc:name><xqdoc:type>element(FunctionDecl)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(xqdoc:function)</xqdoc:type></xqdoc:return><xqdoc:body>function xqdc:function($fundecl as element(FunctionDecl), $opts as map(*))&#xD;
as element(xqdoc:function){&#xD;
  let $params:= $fundecl/(.|ParamList)/Param&#xD;
  return &lt;xqdoc:function&gt;&#xD;
    {  $fundecl/TOKEN[.="external"]!attribute external {"true"},&#xD;
       attribute arity {count($params)},&#xD;
      xqcom:comment(util:or($fundecl/..,$fundecl/../Prolog))}&#xD;
		&lt;xqdoc:name&gt;{ &#xD;
      $fundecl/EQName/string() &#xD;
      (:~ =&gt;trace("FUN: ") ~:)&#xD;
      }&lt;/xqdoc:name&gt;&#xD;
&#xD;
     { $fundecl/parent::AnnotatedDecl/Annotation&#xD;
       =&gt;xqdc:wrap( xs:QName('xqdoc:annotations'), xqdc:annotation#1) }&#xD;
      &#xD;
      &#xD;
      &lt;xqdoc:signature&gt;{$fundecl/((*|text()) except EnclosedExpr)/string()&#xD;
                        =&gt;string-join(" ")=&gt;normalize-space()&#xD;
       }&lt;/xqdoc:signature&gt;&#xD;
&#xD;
      {   xqdc:parameters($params)  &#xD;
        , xqdc:return($fundecl)&#xD;
        , xqdc:refs($fundecl) &#xD;
        ,if(xqdc:opt($opts,"body-items")) then xqdc:body($fundecl) }&#xD;
  &lt;/xqdoc:function&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:name>xqdc:parameters</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function xqdc:parameters ( $params as element(Param)* ) as element(xqdoc:parameters)? { if(exists($params)) then &lt;xqdoc:parameters&gt;{ $params!&lt;xqdoc:parameter&gt; &lt;xqdoc:name&gt;{ EQName/string() }&lt;/xqdoc:name&gt; { TypeDeclaration/SequenceType!xqdc:type(.)} &lt;/xqdoc:parameter&gt; }&lt;/xqdoc:parameters&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>params</xqdoc:name><xqdoc:type occurrence="*">element(Param)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="?">element(xqdoc:parameters)</xqdoc:type></xqdoc:return><xqdoc:body>function xqdc:parameters($params as element(Param)*)&#xD;
as element(xqdoc:parameters)?&#xD;
{&#xD;
  if(exists($params))&#xD;
  then &lt;xqdoc:parameters&gt;{&#xD;
          $params!&lt;xqdoc:parameter&gt;&#xD;
                      &lt;xqdoc:name&gt;{ EQName/string() }&lt;/xqdoc:name&gt;&#xD;
                      { TypeDeclaration/SequenceType!xqdc:type(.)}&#xD;
                  &lt;/xqdoc:parameter&gt;&#xD;
      }&lt;/xqdoc:parameters&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:name>xqdc:return</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function xqdc:return ( $fundecl as element(FunctionDecl) ) as element(xqdoc:return)? { if($fundecl/SequenceType) then &lt;xqdoc:return&gt;{ xqdc:type($fundecl/SequenceType) }&lt;/xqdoc:return&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>fundecl</xqdoc:name><xqdoc:type>element(FunctionDecl)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="?">element(xqdoc:return)</xqdoc:type></xqdoc:return><xqdoc:body>function xqdc:return($fundecl as element(FunctionDecl))&#xD;
as element(xqdoc:return)?&#xD;
{&#xD;
  if($fundecl/SequenceType)&#xD;
  then &lt;xqdoc:return&gt;{ xqdc:type($fundecl/SequenceType) }&lt;/xqdoc:return&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>&#xD;
xqdoc type from parse sequencetype</xqdoc:description></xqdoc:comment><xqdoc:name>xqdc:type</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function xqdc:type ( $type as element(SequenceType)? ) as element(xqdoc:type)? { if(exists($type)) then &lt;xqdoc:type &gt;{ if($type/OccurrenceIndicator) then attribute occurrence {$type/OccurrenceIndicator/string()} ,$type/*=&gt;head()=&gt;string() }&lt;/xqdoc:type&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>type</xqdoc:name><xqdoc:type occurrence="?">element(SequenceType)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="?">element(xqdoc:type)</xqdoc:type></xqdoc:return><xqdoc:body>function xqdc:type($type as element(SequenceType)?)&#xD;
as element(xqdoc:type)?&#xD;
{&#xD;
  if(exists($type))&#xD;
  then &#xD;
 &lt;xqdoc:type &gt;{&#xD;
       if($type/OccurrenceIndicator)&#xD;
       then attribute occurrence {$type/OccurrenceIndicator/string()}&#xD;
      ,$type/*=&gt;head()=&gt;string() &#xD;
 }&lt;/xqdoc:type&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>&#xD;
sequence of invoked and ref-variable elements</xqdoc:description></xqdoc:comment><xqdoc:name>xqdc:refs</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function xqdc:refs ( $ast as element(*) ) as element(*)* { (: let $_:=trace("refs",$ast) return :) () }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>ast</xqdoc:name><xqdoc:type>element(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">element(*)</xqdoc:type></xqdoc:return><xqdoc:body>function xqdc:refs($ast as element(*))&#xD;
as element(*)*&#xD;
{&#xD;
 (: let $_:=trace("refs",$ast)&#xD;
 return :) () &#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="4"><xqdoc:comment><xqdoc:description>&#xD;
</xqdoc:description></xqdoc:comment><xqdoc:name>xqdc:invoked</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function xqdc:invoked ( $element as xs:string, $uri as xs:string, $name as xs:string, $arity as xs:integer? ) as element(*) { element {$element} { $arity!attribute arity {$arity}, &lt;xqdoc:uri&gt;{$uri}&lt;/xqdoc:uri&gt;, &lt;xqdoc:name&gt;{$name}&lt;/xqdoc:name&gt; } }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>element</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>uri</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>arity</xqdoc:name><xqdoc:type occurrence="?">xs:integer</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(*)</xqdoc:type></xqdoc:return><xqdoc:body>function xqdc:invoked($element as xs:string,&#xD;
                      $uri as xs:string,&#xD;
                      $name as xs:string,&#xD;
                      $arity as xs:integer?)&#xD;
as element(*)&#xD;
{&#xD;
 element {$element} {&#xD;
         $arity!attribute arity {$arity},&#xD;
         &lt;xqdoc:uri&gt;{$uri}&lt;/xqdoc:uri&gt;,&#xD;
         &lt;xqdoc:name&gt;{$name}&lt;/xqdoc:name&gt;&#xD;
       }&#xD;
 }</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>&#xD;
source code</xqdoc:description></xqdoc:comment><xqdoc:name>xqdc:body</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function xqdc:body ( $ast as element(*) ) as element(xqdoc:body) { &lt;xqdoc:body&gt;{$ast/string()}&lt;/xqdoc:body&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>ast</xqdoc:name><xqdoc:type>element(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(xqdoc:body)</xqdoc:type></xqdoc:return><xqdoc:body>function xqdc:body($ast as element(*))&#xD;
as element(xqdoc:body)&#xD;
{&#xD;
&lt;xqdoc:body&gt;{$ast/string()}&lt;/xqdoc:body&gt;&#xD;
 }</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description><pre>
<Annotation><TOKEN>%</TOKEN><TOKEN>updating</TOKEN></Annotation>
</pre></xqdoc:description></xqdoc:comment><xqdoc:name>xqdc:annotation</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function xqdc:annotation ( $anno as element(Annotation) ) as element(xqdoc:annotation) { &lt;xqdoc:annotation name="{ $anno/EQName/string() }"&gt;{ for $a in $anno/* return typeswitch($a) case element(Literal) return &lt;xqdoc:literal type="xs:string"&gt;{ xqdc:unquote($a) }&lt;/xqdoc:literal&gt; case element(TOKEN) | element(EQName) | text() (: ignore these :) return () default return ( prof:dump(name($a),"DDDDD") ,error()) }&lt;/xqdoc:annotation&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>anno</xqdoc:name><xqdoc:type>element(Annotation)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(xqdoc:annotation)</xqdoc:type></xqdoc:return><xqdoc:body>function xqdc:annotation($anno as element(Annotation))&#xD;
as element(xqdoc:annotation)&#xD;
{&#xD;
&lt;xqdoc:annotation name="{ $anno/EQName/string() }"&gt;{&#xD;
 for $a in $anno/*&#xD;
 return typeswitch($a)&#xD;
        case element(Literal) &#xD;
          return &lt;xqdoc:literal type="xs:string"&gt;{ xqdc:unquote($a) }&lt;/xqdoc:literal&gt;&#xD;
        case element(TOKEN)  | element(EQName) | text()  (: ignore these :)&#xD;
          return ()&#xD;
        default &#xD;
        return ( prof:dump(name($a),"DDDDD") ,error())&#xD;
}&lt;/xqdoc:annotation&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
get boolean option</xqdoc:description></xqdoc:comment><xqdoc:name>xqdc:opt</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function xqdc:opt ( $opts as map(*), $opt as xs:string ) as xs:boolean { $opts?xqdoc($opt)=&gt;xs:boolean() (: =&gt;trace($opt || ": " ) :) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opt</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:return><xqdoc:body>function xqdc:opt($opts as map(*), $opt as xs:string)&#xD;
as xs:boolean{&#xD;
   $opts?xqdoc($opt)=&gt;xs:boolean() (: =&gt;trace($opt || ": " ) :)&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>&#xD;
return true if o/p xqdoc 1.1 format</xqdoc:description></xqdoc:comment><xqdoc:name>xqdc:is11</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function xqdc:is11 ( $opts as map(*) ) as xs:boolean { $opts?xqdoc?version eq "1.1" }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:return><xqdoc:body>function xqdc:is11($opts as map(*))&#xD;
as xs:boolean{&#xD;
 $opts?xqdoc?version eq "1.1"&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>&#xD;
if items then apply $fun to each and wrap result sequence in $qname</xqdoc:description></xqdoc:comment><xqdoc:name>xqdc:wrap</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function xqdc:wrap ( $items as item()*,$qname as xs:QName,$fun as function(*) ) as element(*)? { if(exists($items)) then element {$qname}{ $items!$fun(.)} }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>items</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>qname</xqdoc:name><xqdoc:type>xs:QName</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>fun</xqdoc:name><xqdoc:type>function(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="?">element(*)</xqdoc:type></xqdoc:return><xqdoc:body>function xqdc:wrap($items as item()*,$qname as xs:QName,$fun as function(*))&#xD;
as element(*)?{&#xD;
  if(exists($items))&#xD;
  then element {$qname}{ $items!$fun(.)}&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>&#xD;
remove start and end quote marks</xqdoc:description></xqdoc:comment><xqdoc:name>xqdc:unquote</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function xqdc:unquote ( $s as xs:string ) as xs:string { replace($s,'^[''"](.*)[''"]$','$1') }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return><xqdoc:body>function xqdc:unquote($s as xs:string)&#xD;
as xs:string{&#xD;
  replace($s,'^[''"](.*)[''"]$','$1')&#xD;
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>