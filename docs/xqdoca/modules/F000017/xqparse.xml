<XQuery><Module><VersionDecl><TOKEN>xquery</TOKEN> <TOKEN>version</TOKEN> <StringLiteral>"3.1"</StringLiteral><TOKEN>;</TOKEN></VersionDecl>&#xD;
(:&#xD;
 : Copyright (c) 2019-2022 Quodatum Ltd&#xD;
 :&#xD;
 : Licensed under the Apache License, Version 2.0 (the "License");&#xD;
 : you may not use this file except in compliance with the License.&#xD;
 : You may obtain a copy of the License at&#xD;
 :&#xD;
 :     http://www.apache.org/licenses/LICENSE-2.0&#xD;
 :&#xD;
 : Unless required by applicable law or agreed to in writing, software&#xD;
 : distributed under the License is distributed on an "AS IS" BASIS,&#xD;
 : WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xD;
 : See the License for the specific language governing permissions and&#xD;
 : limitations under the License.&#xD;
 :)&#xD;
 &#xD;
 (:~&#xD;
 : &lt;h1&gt;options.xqm&lt;/h1&gt;&#xD;
 : &lt;p&gt;converting XML config to maps.&lt;/p&gt;&#xD;
 :&#xD;
 : @author Andy Bunce&#xD;
 : @version 0.3&#xD;
 :)&#xD;
<LibraryModule><ModuleDecl><TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>opts</NCName> <TOKEN>=</TOKEN> <StringLiteral>'quodatum:xqdoca:options'</StringLiteral><TOKEN>;</TOKEN></ModuleDecl>&#xD;
&#xD;
(:~  convert xml  options to  a  map :)&#xD;
<Prolog><AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>opts:as-map</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>a</QName> <TypeDeclaration><TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></ElementTest></TypeDeclaration></Param><TOKEN>)</TOKEN>&#xD;
<TOKEN>as</TOKEN> <AnyMapTest><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></AnyMapTest><EnclosedExpr><TOKEN>{</TOKEN>&#xD;
 <ArrowExpr><RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>a</QName></VarRef><TOKEN>/</TOKEN><AxisStep><Wildcard>*</Wildcard> <PredicateList/></AxisStep><TOKEN>!</TOKEN> <FunctionCall><QName>map:entry</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>name</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN> <FunctionCall><QName>util:if</QName> <ArgumentList><TOKEN>(</TOKEN><AxisStep><Wildcard>*</Wildcard><PredicateList/></AxisStep><TOKEN>,</TOKEN>  <FunctionCall><QName>opts:as-map</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN><FunctionCall><QName>string</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr>&#xD;
<TOKEN>=&gt;</TOKEN><QName>map:merge</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></ArrowExpr>&#xD;
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>&#xD;
&#xD;
(: add defaults to opts :)&#xD;
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>opts:merge</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>opts</QName> <TypeDeclaration><TOKEN>as</TOKEN> <AnyMapTest><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></AnyMapTest></TypeDeclaration></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>defaults</QName> <TypeDeclaration><TOKEN>as</TOKEN> <AnyMapTest><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></AnyMapTest></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>&#xD;
<TOKEN>as</TOKEN> <AnyMapTest><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></AnyMapTest><EnclosedExpr><TOKEN>{</TOKEN>&#xD;
<ArrowExpr><RelativePathExpr><FunctionCall><QName>distinct-values</QName> <ArgumentList><TOKEN>(</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN><Expr><FunctionCall><QName>map:keys</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>opts</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN> <FunctionCall><QName>map:keys</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>defaults</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></Expr><TOKEN>)</TOKEN></ParenthesizedExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall>&#xD;
<TOKEN>!</TOKEN> <FunctionCall><QName>map:entry</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>,</TOKEN>&#xD;
      <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><AndExpr><FunctionCall><QName>map:contains</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>opts</QName></VarRef><TOKEN>,</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall> <TOKEN>and</TOKEN> <FunctionCall><QName>map:contains</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>defaults</QName></VarRef><TOKEN>,</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></AndExpr><TOKEN>)</TOKEN>&#xD;
      <TOKEN>then</TOKEN> <IfExpr><TOKEN>if</TOKEN> <TOKEN>(</TOKEN><InstanceofExpr><FunctionCall><QName>map:get</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>opts</QName></VarRef><TOKEN>,</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall> <TOKEN>instance</TOKEN> <TOKEN>of</TOKEN> <AnyMapTest><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></AnyMapTest></InstanceofExpr><TOKEN>)</TOKEN>&#xD;
           <TOKEN>then</TOKEN> <FunctionCall><QName>opts:merge</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>map:get</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>opts</QName></VarRef><TOKEN>,</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN><FunctionCall><QName>map:get</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>defaults</QName></VarRef><TOKEN>,</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall>&#xD;
           <TOKEN>else</TOKEN> <FunctionCall><QName>map:get</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>opts</QName></VarRef><TOKEN>,</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></IfExpr>&#xD;
      <TOKEN>else</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN><Expr><FunctionCall><QName>map:get</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>opts</QName></VarRef><TOKEN>,</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN><FunctionCall><QName>map:get</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>defaults</QName></VarRef><TOKEN>,</TOKEN><TOKEN>.</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></Expr><TOKEN>)</TOKEN></ParenthesizedExpr></IfExpr>&#xD;
<TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr><TOKEN>=&gt;</TOKEN><QName>map:merge</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></ArrowExpr>&#xD;
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN></Prolog></LibraryModule></Module><EOF/></XQuery>