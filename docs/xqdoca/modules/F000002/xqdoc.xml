<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2025-05-17T18:35:19.705+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>quodatum:xqdoca.generator.calls</xqdoc:uri><xqdoc:name>_</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
import diagrams using svg, requires   access to a graphxq server&#xD;
&#xD;
</xqdoc:description><xqdoc:author>Andy Bunce</xqdoc:author><xqdoc:version>0.2</xqdoc:version></xqdoc:comment><xqdoc:body>xquery version "3.1";&#xD;
(:~&#xD;
 : import diagrams using svg, requires   access to a graphxq server&#xD;
 :&#xD;
 : @author Andy Bunce&#xD;
 : @version 0.2&#xD;
 :)&#xD;
 &#xD;
module namespace _ = 'quodatum:xqdoca.generator.calls';&#xD;
&#xD;
import module namespace xqd = 'quodatum:xqdoca.model' at "../../lib/model.xqm";&#xD;
import module namespace gxq = 'quodatum:service.graphxq' at "graphxq.xqm";&#xD;
&#xD;
&#xD;
declare namespace xqdoca="https://github.com/Quodatum/xqdoca";&#xD;
declare  namespace svg = 'quodatum:xqdoca.generator.svg';&#xD;
declare  namespace dotml = 'http://www.martin-loetzsch.de/DOTML';&#xD;
declare namespace xqdoc="http://www.xqdoc.org/1.0";&#xD;
&#xD;
&#xD;
declare &#xD;
%xqdoca:global("imports.svg","Project all module imports as svg")&#xD;
%xqdoca:output("imports.svg","xml") &#xD;
function _:calls(        &#xD;
                 $model as map(*),&#xD;
                 $opts as map(*)&#xD;
                 )                         &#xD;
{&#xD;
	  _:build( $model?files, $model, map{"base":""})&#xD;
};&#xD;
&#xD;
declare &#xD;
%xqdoca:module("imports.svg","imports for this module as svg")&#xD;
%xqdoca:output("imports.svg","xml") &#xD;
function _:module($file as map(*),         &#xD;
               $model as map(*),&#xD;
               $opts as map(*)&#xD;
              )&#xD;
{&#xD;
   _:build( $file, $model, map{"base":"../../"})      &#xD;
};&#xD;
 &#xD;
 (:~ import svg for set of files :)&#xD;
 declare function _:build($files as map(*)*,         &#xD;
                         $_model as map(*),&#xD;
                         $opts as map(*) )&#xD;
as document-node(){                   &#xD;
   let $nodes:=$files!_:node(.,$opts) &#xD;
                &#xD;
	let $edges := for $f  in  $files &#xD;
                return _:edge($f,$f)&#xD;
	let $dot:=_:graph(($nodes,$edges),$opts)&#xD;
           &#xD;
	let $svg:=gxq:dotml2($dot)&#xD;
	return $svg&#xD;
};&#xD;
&#xD;
(:~ import svg for set of files :)&#xD;
 declare function _:build-old($files as map(*)*,         &#xD;
                         $model as map(*),&#xD;
                         $opts as map(*) )&#xD;
 {&#xD;
    let $imports:= xqd:imports($model)&#xD;
  let $defs:=xqd:defs($model)                        &#xD;
    let $op:=for $f in  ($files[ ?xqdoc//xqdoc:import[@type="library"]]&#xD;
                        ,$model?files[map:contains($imports,?namespace)]&#xD;
                      )&#xD;
	          let $n:= _:node($f,$opts) &#xD;
	          let $ins:=$f?xqdoc//xqdoc:import[@type="library"]/xqdoc:uri/string()        &#xD;
	          let $e:=$ins! $defs(.)!_:edge(.,$f)&#xD;
	          return ($n,$e)&#xD;
	 &#xD;
	let $dot:=&lt;dotml:graph rankdir = "LR"&gt;	&#xD;
             &lt;dotml:node 	id="a" label="Home" URL="{ $opts?base}."  color="#FFFFDD" style="filled" shape="house"/&gt;{ $op }&#xD;
            &lt;/dotml:graph&gt;&#xD;
	(: let $svg:=_:dotml2($dot) :)&#xD;
	return $dot&#xD;
};&#xD;
	                 &#xD;
&#xD;
&#xD;
(:~ create node&#xD;
 :)&#xD;
 declare function _:node($f as map(*), $opts as map(*))&#xD;
as element(dotml:record)&#xD;
{&#xD;
  &lt;dotml:record  URL="{ $opts?base }{ $f?href }imports.svg"&gt;&#xD;
    &lt;dotml:node id="N{ $f?index}" label="{ $f?namespace }"  URL="{ $f?href }"  fillcolor="#FFFFFF"/&gt;&#xD;
    &lt;dotml:node id="X{ $f?index}" label="{ $f?path }" URL="http://nowhere.com" /&gt;&#xD;
  &lt;/dotml:record&gt;&#xD;
};&#xD;
&#xD;
(:~ create edge :)&#xD;
declare function _:edge($to as map(*),$from as map(*)){&#xD;
  &lt;dotml:edge from="N{ $from?index}"  to="N{ $to?index}"/&gt;&#xD;
};&#xD;
&#xD;
(:~ create dotml graph :)&#xD;
declare function _:graph($nodes,$opts){&#xD;
 &lt;dotml:graph  rankdir="LR" bgcolor="silver"&gt;	&#xD;
             &lt;dotml:node 	id="a" label="Home" URL="{ $opts?base}."  color="#FFFFDD" style="filled" shape="house"/&gt;{  &#xD;
             $nodes&#xD;
}&lt;/dotml:graph&gt;  &#xD;
};</xqdoc:body></xqdoc:module><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>quodatum:xqdoca.model</xqdoc:uri><xqdoc:at>../../lib/model.xqm</xqdoc:at></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>quodatum:service.graphxq</xqdoc:uri><xqdoc:at>graphxq.xqm</xqdoc:at></xqdoc:import></xqdoc:imports><xqdoc:namespaces><xqdoc:namespace prefix="_" uri="quodatum:xqdoca.generator.calls"/><xqdoc:namespace prefix="xqd" uri="quodatum:xqdoca.model"/><xqdoc:namespace prefix="gxq" uri="quodatum:service.graphxq"/><xqdoc:namespace prefix="xqdoca" uri="https://github.com/Quodatum/xqdoca"/><xqdoc:namespace prefix="svg" uri="quodatum:xqdoca.generator.svg"/><xqdoc:namespace prefix="dotml" uri="http://www.martin-loetzsch.de/DOTML"/><xqdoc:namespace prefix="xqdoc" uri="http://www.xqdoc.org/1.0"/><xqdoc:namespace prefix="map" uri="http://www.w3.org/2005/xpath-functions/map"/></xqdoc:namespaces><xqdoc:variables/><xqdoc:functions><xqdoc:function arity="2"><xqdoc:name>_:calls</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="xqdoca:global"><xqdoc:literal type="xs:string">imports.svg</xqdoc:literal><xqdoc:literal type="xs:string">Project all module imports as svg</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="xqdoca:output"><xqdoc:literal type="xs:string">imports.svg</xqdoc:literal><xqdoc:literal type="xs:string">xml</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>function _:calls ( $model as map(*), $opts as map(*) ) { _:build( $model?files, $model, map{"base":""}) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>model</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:body>function _:calls(        &#xD;
                 $model as map(*),&#xD;
                 $opts as map(*)&#xD;
                 )                         &#xD;
{&#xD;
	  _:build( $model?files, $model, map{"base":""})&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:name>_:module</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="xqdoca:module"><xqdoc:literal type="xs:string">imports.svg</xqdoc:literal><xqdoc:literal type="xs:string">imports for this module as svg</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="xqdoca:output"><xqdoc:literal type="xs:string">imports.svg</xqdoc:literal><xqdoc:literal type="xs:string">xml</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>function _:module ( $file as map(*), $model as map(*), $opts as map(*) ) { _:build( $file, $model, map{"base":"../../"}) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>file</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>model</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:body>function _:module($file as map(*),         &#xD;
               $model as map(*),&#xD;
               $opts as map(*)&#xD;
              )&#xD;
{&#xD;
   _:build( $file, $model, map{"base":"../../"})      &#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>&#xD;
import svg for set of files</xqdoc:description></xqdoc:comment><xqdoc:name>_:build</xqdoc:name><xqdoc:signature>function _:build ( $files as map(*)*, $_model as map(*), $opts as map(*) ) as document-node() { let $nodes:=$files!_:node(.,$opts) let $edges := for $f in $files return _:edge($f,$f) let $dot:=_:graph(($nodes,$edges),$opts) let $svg:=gxq:dotml2($dot) return $svg }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>files</xqdoc:name><xqdoc:type occurrence="*">map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>_model</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>document-node()</xqdoc:type></xqdoc:return><xqdoc:body>function _:build($files as map(*)*,         &#xD;
                         $_model as map(*),&#xD;
                         $opts as map(*) )&#xD;
as document-node(){                   &#xD;
   let $nodes:=$files!_:node(.,$opts) &#xD;
                &#xD;
	let $edges := for $f  in  $files &#xD;
                return _:edge($f,$f)&#xD;
	let $dot:=_:graph(($nodes,$edges),$opts)&#xD;
           &#xD;
	let $svg:=gxq:dotml2($dot)&#xD;
	return $svg&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>&#xD;
import svg for set of files</xqdoc:description></xqdoc:comment><xqdoc:name>_:build-old</xqdoc:name><xqdoc:signature>function _:build-old ( $files as map(*)*, $model as map(*), $opts as map(*) ) { let $imports:= xqd:imports($model) let $defs:=xqd:defs($model) let $op:=for $f in ($files[ ?xqdoc//xqdoc:import[@type="library"]] ,$model?files[map:contains($imports,?namespace)] ) let $n:= _:node($f,$opts) let $ins:=$f?xqdoc//xqdoc:import[@type="library"]/xqdoc:uri/string() let $e:=$ins! $defs(.)!_:edge(.,$f) return ($n,$e) let $dot:=&lt;dotml:graph rankdir = "LR"&gt; &lt;dotml:node id="a" label="Home" URL="{ $opts?base}." color="#FFFFDD" style="filled" shape="house"/&gt;{ $op } &lt;/dotml:graph&gt; (: let $svg:=_:dotml2($dot) :) return $dot }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>files</xqdoc:name><xqdoc:type occurrence="*">map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>model</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:body>function _:build-old($files as map(*)*,         &#xD;
                         $model as map(*),&#xD;
                         $opts as map(*) )&#xD;
 {&#xD;
    let $imports:= xqd:imports($model)&#xD;
  let $defs:=xqd:defs($model)                        &#xD;
    let $op:=for $f in  ($files[ ?xqdoc//xqdoc:import[@type="library"]]&#xD;
                        ,$model?files[map:contains($imports,?namespace)]&#xD;
                      )&#xD;
	          let $n:= _:node($f,$opts) &#xD;
	          let $ins:=$f?xqdoc//xqdoc:import[@type="library"]/xqdoc:uri/string()        &#xD;
	          let $e:=$ins! $defs(.)!_:edge(.,$f)&#xD;
	          return ($n,$e)&#xD;
	 &#xD;
	let $dot:=&lt;dotml:graph rankdir = "LR"&gt;	&#xD;
             &lt;dotml:node 	id="a" label="Home" URL="{ $opts?base}."  color="#FFFFDD" style="filled" shape="house"/&gt;{ $op }&#xD;
            &lt;/dotml:graph&gt;&#xD;
	(: let $svg:=_:dotml2($dot) :)&#xD;
	return $dot&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
create node&#xD;
</xqdoc:description></xqdoc:comment><xqdoc:name>_:node</xqdoc:name><xqdoc:signature>function _:node ( $f as map(*), $opts as map(*) ) as element(dotml:record) { &lt;dotml:record URL="{ $opts?base }{ $f?href }imports.svg"&gt; &lt;dotml:node id="N{ $f?index}" label="{ $f?namespace }" URL="{ $f?href }" fillcolor="#FFFFFF"/&gt; &lt;dotml:node id="X{ $f?index}" label="{ $f?path }" URL="http://nowhere.com" /&gt; &lt;/dotml:record&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>f</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(dotml:record)</xqdoc:type></xqdoc:return><xqdoc:body>function _:node($f as map(*), $opts as map(*))&#xD;
as element(dotml:record)&#xD;
{&#xD;
  &lt;dotml:record  URL="{ $opts?base }{ $f?href }imports.svg"&gt;&#xD;
    &lt;dotml:node id="N{ $f?index}" label="{ $f?namespace }"  URL="{ $f?href }"  fillcolor="#FFFFFF"/&gt;&#xD;
    &lt;dotml:node id="X{ $f?index}" label="{ $f?path }" URL="http://nowhere.com" /&gt;&#xD;
  &lt;/dotml:record&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
create edge</xqdoc:description></xqdoc:comment><xqdoc:name>_:edge</xqdoc:name><xqdoc:signature>function _:edge ( $to as map(*),$from as map(*) ) { &lt;dotml:edge from="N{ $from?index}" to="N{ $to?index}"/&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>to</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>from</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:body>function _:edge($to as map(*),$from as map(*)){&#xD;
  &lt;dotml:edge from="N{ $from?index}"  to="N{ $to?index}"/&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
create dotml graph</xqdoc:description></xqdoc:comment><xqdoc:name>_:graph</xqdoc:name><xqdoc:signature>function _:graph ( $nodes,$opts ) { &lt;dotml:graph rankdir="LR" bgcolor="silver"&gt; &lt;dotml:node id="a" label="Home" URL="{ $opts?base}." color="#FFFFDD" style="filled" shape="house"/&gt;{ $nodes }&lt;/dotml:graph&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>nodes</xqdoc:name></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:body>function _:graph($nodes,$opts){&#xD;
 &lt;dotml:graph  rankdir="LR" bgcolor="silver"&gt;	&#xD;
             &lt;dotml:node 	id="a" label="Home" URL="{ $opts?base}."  color="#FFFFDD" style="filled" shape="house"/&gt;{  &#xD;
             $nodes&#xD;
}&lt;/dotml:graph&gt;  &#xD;
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>