<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2025-05-17T18:35:19.705+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>quodatum:xqdoca.mod-html</xqdoc:uri><xqdoc:name>xqh</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Library to support html5 rendering of single xqdoc source&#xD;
</xqdoc:description><xqdoc:author>Andy Bunce, Quodatum, License: Apache-2.0</xqdoc:author><xqdoc:custom tag="Copyright">(c) 2019-2026 Quodatum Ltd</xqdoc:custom></xqdoc:comment><xqdoc:body>xquery version "3.1";&#xD;
(:~&#xD;
Library to support html5 rendering of single xqdoc source&#xD;
 @Copyright (c) 2019-2026 Quodatum Ltd&#xD;
 @author Andy Bunce, Quodatum, License: Apache-2.0&#xD;
 :)&#xD;
&#xD;
module namespace xqh = 'quodatum:xqdoca.mod-html';&#xD;
&#xD;
import module namespace xqd = 'quodatum:xqdoca.model' at "../lib/model.xqm";&#xD;
import module namespace xqa = 'quodatum:xqdoca.model.annotations' at "../lib/annotations.xqm";&#xD;
import module namespace page = 'quodatum:xqdoca.page'  at "../lib/xqdoc-page.xqm";&#xD;
import module namespace xqn = 'quodatum:xqdoca.namespaces' at "../lib/xqdoc-namespace.xqm";&#xD;
&#xD;
declare namespace xqdoc="http://www.xqdoc.org/1.0";&#xD;
declare namespace xqdoca="https://github.com/Quodatum/xqdoca";&#xD;
&#xD;
 &#xD;
(:~ transform xqdoc to html &#xD;
 : &lt;pre&gt;map { "root": "../../", &#xD;
 :        "cache": false(), &#xD;
 :         "resources": "resources/", &#xD;
 :        "filename": "src\main\lib\parsepaths.xq", &#xD;
 :        "show-private": true(),  &#xD;
 :         "project": "xqdoca", &#xD;
 :         "source": () }&lt;/pre&gt; &#xD;
 :)&#xD;
declare &#xD;
%xqdoca:module("module","Report on the XQuery source")&#xD;
%xqdoca:output("index.html","xhtml")&#xD;
function xqh:xqdoc-html2($file as map(*),         &#xD;
                         $model as map(*),&#xD;
                         $opts as map(*)&#xD;
                        )&#xD;
as document-node()                         &#xD;
{&#xD;
let $xqd:=$file?xqdoc&#xD;
let $_:=trace(concat($file?path,"-&gt;",$file?href),"module: ")&#xD;
let $d:=if($file?isParsed)&#xD;
        then  &lt;div&gt;&#xD;
                  &lt;h1&gt;&#xD;
                    &lt;span class="badge badge-info"&gt;{ $file?namespace }&lt;/span&gt;&amp;#160;&#xD;
                    &lt;small&gt;{ $xqd/xqdoc:module/@type/string() } module&lt;/small&gt;&#xD;
                    &lt;div style="float:right"&gt;{ xqa:badges($xqd//xqdoc:annotation, $file,page:badge#3) }&lt;/div&gt;&#xD;
                  &lt;/h1&gt;&#xD;
                  { xqh:toc($xqd,$opts,$file),&#xD;
                    xqh:summary($xqd/xqdoc:module,$opts),&#xD;
                    xqh:imports($xqd,$model), &#xD;
                    xqh:variables($xqd/xqdoc:variables,$file),&#xD;
                    xqh:functions($xqd/xqdoc:functions, $file, $model),&#xD;
                    xqh:when($xqd/xqdoc:namespaces/xqdoc:namespace,xqh:namespaces(?,$model)),&#xD;
                    xqh:restxq($xqd,$file),&#xD;
                      &lt;section id="source"&gt;&#xD;
                        &lt;h2 &gt;Source Code&lt;/h2&gt;&#xD;
                        &lt;pre style="white-space:pre-wrap;" class="line-numbers" data-src="plugins/line-numbers/index.html" &gt;&#xD;
                        &lt;code class="language-xquery"  data-prismjs-copy="Copy to clipboard"&gt;{ &#xD;
                          $xqd/xqdoc:module/xqdoc:body/string() &#xD;
                          }&lt;/code&gt;&lt;/pre&gt;&#xD;
                      &lt;/section&gt;&#xD;
                            }&#xD;
                    &lt;/div&gt;&#xD;
          else "Parse Failed"&#xD;
 return document{ page:wrap($d, $opts )  }                 &#xD;
};&#xD;
&#xD;
declare function xqh:summary($mod as element(xqdoc:module)?,&#xD;
                            $opts as map(*)&#xD;
                            )&#xD;
 as element(section)&#xD;
 {&#xD;
    &lt;section id="summary"&gt;&#xD;
    &lt;h2&gt;Summary&lt;/h2&gt;&#xD;
       { if($mod/xqdoc:comment) then xqh:comment($mod/xqdoc:comment,$opts) } &#xD;
		   { page:related-links("module","module", $opts) }&#xD;
    &lt;/section&gt;&#xD;
  };&#xD;
&#xD;
declare function xqh:comment($comment as element(xqdoc:comment),&#xD;
                            $opts as map(*)&#xD;
                            )&#xD;
 as element(*)+&#xD;
 {&#xD;
  let $desc:=$comment/xqdoc:description/(node()|text())&#xD;
  let $result:= if(exists($desc))&#xD;
                then &lt;div&gt;{$desc}&lt;/div&gt;&#xD;
                else  &lt;div&gt;MISSING&lt;/div&gt;&#xD;
&#xD;
  return ($result&#xD;
          ,xqh:tags("See also",$comment/xqdoc:see)&#xD;
          ,xqh:tags("Authors",$comment/xqdoc:author)&#xD;
          ,xqh:tags("Parameters",$comment/xqdoc:param)&#xD;
          ,xqh:tags("Return",$comment/xqdoc:return)&#xD;
          ,xqh:tags("Errors",$comment/xqdoc:error)&#xD;
          ,xqh:tags("Deprecated",$comment/xqdoc:deprecated)&#xD;
          ,xqh:tags("Since",$comment/xqdoc:since)&#xD;
          ,xqh:tags("Custom",$comment/xqdoc:custom)      &#xD;
  )&#xD;
 };&#xD;
&#xD;
(:~ Table of contents :)&#xD;
declare function xqh:toc($xqd,$opts,$file as map(*))&#xD;
as element(nav){&#xD;
  let $vars:=$xqd//xqdoc:variable (: [$opts?show-private or not(xqdoc:annotations/xqdoc:annotation/@name='private')] :)&#xD;
  let $funs:=$xqd//xqdoc:function   (: [$opts?show-private or not(xqdoc:annotations/xqdoc:annotation/@name='private')] :)&#xD;
	return	&lt;nav id="toc"&gt;&#xD;
			&lt;h2&gt;&#xD;
			    &lt;a href="{ $opts?root || "index.html" }" &gt;{ $opts?project }&lt;/a&gt;&#xD;
                / Module&#xD;
       &lt;/h2&gt;&#xD;
			&lt;h3&gt;&#xD;
				&lt;a id="contents"&gt;&lt;/a&gt;&#xD;
				&lt;span class=""&gt;{ $xqd/xqdoc:module/xqdoc:uri/string() }&lt;/span&gt;&#xD;
			&lt;/h3&gt;&#xD;
			&lt;ol class="toc"&gt;&#xD;
				&lt;li&gt;&#xD;
					&lt;a href="#summary"&gt;&#xD;
						&lt;span class="secno"&gt;1 &lt;/span&gt;&#xD;
						&lt;span class="content"&gt;Summary&lt;/span&gt;&#xD;
					&lt;/a&gt;&#xD;
				&lt;/li&gt;&#xD;
				&lt;li&gt;&#xD;
		          &lt;a href="#imports"&gt;&#xD;
		            &lt;span class="secno"&gt;2 &lt;/span&gt;&#xD;
		            &lt;span class="content"&gt;Imports&lt;/span&gt;&#xD;
		          &lt;/a&gt;&#xD;
		        &lt;/li&gt;&#xD;
				&#xD;
          &lt;li&gt;&#xD;
            &lt;a href="#variables"&gt;&#xD;
              &lt;span class="secno"&gt;3 &lt;/span&gt;&#xD;
              &lt;span class="content"&gt;Variables&lt;/span&gt;&#xD;
            &lt;/a&gt;&#xD;
            &lt;ol class="toc"&gt;&#xD;
            {for $var  in $vars&#xD;
            order by $var/xqdoc:name&#xD;
            let $id:=concat('$',$var/xqdoc:name)&#xD;
            count $pos&#xD;
            return&#xD;
                &lt;li&gt;&#xD;
                  &lt;a href="#{$id}"&gt;&#xD;
                    &lt;span class="secno"&gt;{ concat('3.',$pos) }&lt;/span&gt;&#xD;
                    &lt;span class="content"&gt;{ $id }&lt;/span&gt;&#xD;
                    &lt;div style="float:right"&gt;&#xD;
                     {xqa:badges($var/xqdoc:annotations/xqdoc:annotation, $file, page:badge#3)}&#xD;
                        &lt;/div&gt;&#xD;
                  &lt;/a&gt;&#xD;
                &lt;/li&gt;&#xD;
            }&#xD;
            &lt;/ol&gt;&#xD;
          &lt;/li&gt;&#xD;
				&#xD;
				&lt;li&gt;&#xD;
&#xD;
							&lt;a href="#functions"&gt;&#xD;
								&lt;span class="secno"&gt;4 &lt;/span&gt;&#xD;
								&lt;span class="content"&gt;Functions&lt;/span&gt;&#xD;
							&lt;/a&gt;&#xD;
							&lt;ol class="toc"&gt;&#xD;
                {for $fun  in $funs&#xD;
              group by $name:=$fun/xqdoc:name&#xD;
              order by $name&#xD;
              count $pos&#xD;
              let $display:=substring-after($name,":")&#xD;
              let $display:=if($display eq "") then $name else $display&#xD;
              let $desc:= $fun[1]/xqdoc:comment/xqdoc:description/string()&#xD;
              return&#xD;
									&lt;li&gt;&#xD;
										&lt;a href="#{$name}"&gt;&#xD;
											&lt;span class="secno"&gt;{ concat('4.',$pos[1]) }&lt;/span&gt;&#xD;
											&lt;span class="content" title="{ $desc }"&gt;{ $display }&#xD;
                      &lt;div style="float:right"&gt;&#xD;
                     {xqa:badges($fun/xqdoc:annotations/xqdoc:annotation,$file,page:badge#3)}&#xD;
                        &lt;/div&gt;&#xD;
                        &lt;/span&gt;  &#xD;
										&lt;/a&gt;&#xD;
									&lt;/li&gt;&#xD;
							}&#xD;
							&#xD;
							&lt;/ol&gt;&#xD;
		&#xD;
				&lt;/li&gt;&#xD;
				&lt;li&gt;&#xD;
					&lt;a href="#namespaces"&gt;&#xD;
						&lt;span class="secno"&gt;5 &lt;/span&gt;&#xD;
						&lt;span class="content"&gt;Namespaces&lt;/span&gt;&#xD;
					&lt;/a&gt;&#xD;
				&lt;/li&gt;&#xD;
				&lt;li&gt;&#xD;
							&lt;a href="#restxq"&gt;&#xD;
								&lt;span class="secno"&gt;6 &lt;/span&gt;&#xD;
								&lt;span class="content"&gt;RestXQ&lt;/span&gt;&#xD;
							&lt;/a&gt;&#xD;
				&lt;/li&gt;&#xD;
       	&lt;li&gt;&#xD;
					&lt;a href="#source"&gt;&#xD;
						&lt;span class="secno"&gt;7 &lt;/span&gt;&#xD;
						&lt;span class="content"&gt;Source&lt;/span&gt;&#xD;
					&lt;/a&gt;&#xD;
				&lt;/li&gt; &#xD;
			&lt;/ol&gt;&#xD;
		&lt;/nav&gt;&#xD;
};   &#xD;
&#xD;
&#xD;
&#xD;
(:~&#xD;
 create section&#xD;
:)&#xD;
declare function xqh:imports($xqd as element(xqdoc:xqdoc),$model as map(*))&#xD;
as element(section){&#xD;
  let $x:= xqd:import-count($xqd,$model)&#xD;
  return  &#xD;
    &lt;section id="imports"&gt;&#xD;
    &lt;h2&gt;Imports&lt;/h2&gt;&#xD;
&#xD;
    &lt;p&gt;&#xD;
    This module is imported by&#xD;
    &lt;span class="badge badge-info"&gt;{ count($x?importedby) }&lt;/span&gt; modules. It imports&#xD;
    &lt;span class="badge badge-info"&gt;{ count($x?imports) }&lt;/span&gt; modules.&#xD;
    &lt;/p&gt;{&#xD;
     page:calls(&#xD;
		     $x?importedby?namespace!page:link-module(.,$model),&#xD;
		     $x?uri,&#xD;
		     $x?imports/xqdoc:uri/string()!page:link-module(.,$model)&#xD;
   )&#xD;
  }&#xD;
    &lt;/section&gt;&#xD;
}; &#xD;
&#xD;
declare function xqh:variables($vars as element(xqdoc:variables)?,$file as map(*))&#xD;
as element(section)&#xD;
{&#xD;
  &lt;section id="variables"&gt;&#xD;
			&lt;h2&gt;Variables&lt;/h2&gt;&#xD;
		{for $v in $vars/xqdoc:variable&#xD;
      order by  lower-case($v/xqdoc:name)&#xD;
      count $index&#xD;
	   return xqh:variable($v,(3,$index),$file),&#xD;
     if(empty( $vars/xqdoc:variable)) then &lt;p&gt;None&lt;/p&gt; else ()&#xD;
   }&#xD;
		&lt;/section&gt;&#xD;
};&#xD;
&#xD;
declare function xqh:variable($v as element(xqdoc:variable),&#xD;
                              $section as xs:anyAtomicType*,&#xD;
                              $file as map(*))&#xD;
as element(div)&#xD;
{&#xD;
let $name:= concat('$',$v/xqdoc:name) (: =&gt;trace("VNAME:") :)&#xD;
let $qmap:=xqn:qmap($v/xqdoc:name,$file?namespaces, $file?default-fn-uri)&#xD;
let $summary:= $v/xqdoc:comment/xqdoc:description/(node()|text())&#xD;
return&#xD;
		&lt;div class="div3"&gt;&#xD;
			&lt;h3&gt;&#xD;
      &lt;a id="{$name }"/&gt; &#xD;
      &lt;a id="{ xqn:clark-name($qmap?uri, "$" || $qmap?name) }"/&gt;&#xD;
      &lt;a href="#{ $name }"&gt;{ page:section($section) }&lt;/a&gt; &#xD;
      {$name }&#xD;
      {if(boolean($v/@external))&#xD;
       then &lt;div style="float:right" class="badge badge-info"&gt;EXTERNAL&lt;/div&gt;}&#xD;
      &lt;/h3&gt;&#xD;
			&lt;dl&gt;&#xD;
        &lt;dt class="label"&gt;Summary&lt;/dt&gt;&#xD;
		   &lt;dd&gt;{ $summary }&lt;/dd&gt;&#xD;
				&lt;dt class="label"&gt;Type&lt;/dt&gt;&#xD;
				&lt;dd&gt;{ $v/xqdoc:type/string() }	{ $v/xqdoc:type/@occurrence/string() }&lt;/dd&gt;&#xD;
			&lt;/dl&gt;&#xD;
      {xqh:when($v/xqdoc:comment/(* except xqdoc:description),xqh:tags("Tags",?)) }&#xD;
      { xqh:when($v/xqdoc:annotations,xqh:annotations#1) }&#xD;
       &lt;details open="open"&gt;&#xD;
        &lt;summary&gt;Source ( {sum($v !xqdoc:body/page:line-count(.)) } lines)&lt;/summary&gt;&#xD;
        { $v! &lt;pre &gt;&lt;code class="language-xquery" data-prismjs-copy="Copy to clipboard"&gt;{ xqdoc:body/string() }&lt;/code&gt;&lt;/pre&gt; }&#xD;
      &lt;/details&gt;&#xD;
		&lt;/div&gt;&#xD;
};  &#xD;
&#xD;
declare function xqh:functions(&#xD;
                     $funs as element(xqdoc:functions)?,&#xD;
                     $file as map(*),&#xD;
                     $model as map(*)&#xD;
                   )&#xD;
as element(section)&#xD;
{&#xD;
  &lt;section id="functions"&gt;&#xD;
			&lt;h2&gt;Functions&lt;/h2&gt;&#xD;
		{ for $f in $funs/xqdoc:function&#xD;
      group by $name:=$f/xqdoc:name&#xD;
      order by  $name&#xD;
      count $pos&#xD;
	   return xqh:function($f,(4,$pos),$file, $model ),&#xD;
      if(empty( $funs/xqdoc:function)) then &lt;p&gt;None&lt;/p&gt; else ()&#xD;
   }&#xD;
		&lt;/section&gt;&#xD;
};&#xD;
&#xD;
(:~   o/p details for function $funs has all defined arities&#xD;
 : @param $section no.&#xD;
 :)&#xD;
declare&#xD;
function xqh:function($funs as element(xqdoc:function)*,&#xD;
                              $section as xs:anyAtomicType*,&#xD;
                              $file as map(*),&#xD;
                              $model as map(*))&#xD;
as element(div)&#xD;
{&#xD;
    let $funs:=sort($funs,(),function($f){number($f/@arity)})&#xD;
    let $maxfn:=$funs[last()] (: assume max arity has comments :)&#xD;
		let $name:=$funs[1]/xqdoc:name/string()&#xD;
    let $qmap:= xqn:qmap($name, $file?namespaces, $file?default-fn-uri)&#xD;
	  return&#xD;
		&lt;div class="div3"&gt;&#xD;
			&lt;h3&gt;&lt;a id="{$name}"/&gt; &#xD;
      {  $funs!&lt;a id="{ xqn:clark-name($qmap?uri, $qmap?name) }#{ @arity }"/&gt; }&#xD;
      &lt;a href="#{ $name }"&gt;{ page:section($section) }&lt;/a&gt;   &#xD;
      { $name }&#xD;
			&lt;/h3&gt;&#xD;
     &#xD;
    &lt;p&gt;Arities: {  $funs &#xD;
                  ! &lt;span style="margin-left:1em" &gt;&#xD;
                      &lt;a href="#{ xqn:clark-name($qmap?uri, $qmap?name) }#{ @arity }"&gt;#{ string(@arity) }&lt;/a&gt;&#xD;
                      { xqa:badges(xqdoc:annotations/xqdoc:annotation,$file,page:badge#3) }                     &#xD;
                    &lt;/span&gt;                          &#xD;
                 }&#xD;
    &lt;/p&gt;&#xD;
    { xqh:when ($funs/xqdoc:comment/xqdoc:description=&gt;head(),xqh:description#1) }&#xD;
    &lt;dt class="label"&gt;Signatures&lt;/dt&gt;&#xD;
		&lt;dd&gt;&#xD;
			{$funs!xqh:function-signature(.) }&#xD;
		&lt;/dd&gt;	&#xD;
			{ $maxfn/xqdoc:parameters!xqh:parameters(.) } &#xD;
	    { $maxfn!xqh:return(.) }&#xD;
		  { $maxfn/xqdoc:comment/xqdoc:error!xqh:error(.) }&#xD;
      {xqh:when($funs/xqdoc:comment/(* except (xqdoc:description|xqdoc:param|xqdoc:return)),xqh:tags("Tags",?)) }    &#xD;
       {xqh:invoked-by($funs, $qmap , $model)}   &#xD;
      { xqh:when ($funs/xqdoc:invoked,xqh:invoked(?, $file, $model) )}&#xD;
   &#xD;
     { $funs/xqdoc:annotations!xqh:annotations(.) }&#xD;
     &lt;details&gt;&#xD;
        &lt;summary&gt;Source ( {sum($funs !xqdoc:body/page:line-count(.)) } lines)&lt;/summary&gt;&#xD;
        { $funs! &lt;pre class="no-line-numbers" style="white-space:pre-wrap;"&gt;&#xD;
        &lt;code class="language-xquery" data-prismjs-copy="Copy to clipboard"&gt;{ xqdoc:body/string() }&lt;/code&gt;&#xD;
        &lt;/pre&gt; }&#xD;
      &lt;/details&gt;&#xD;
		&lt;/div&gt;&#xD;
};&#xD;
&#xD;
&#xD;
&#xD;
(:~&#xD;
 : list of functions called  &#xD;
 :)&#xD;
declare&#xD;
function xqh:invoked(&#xD;
       $invoked as element(xqdoc:invoked)*,&#xD;
       $file as map(*),&#xD;
       $model as map(*)&#xD;
     )&#xD;
as element(details)&#xD;
{&#xD;
 let $di:=for $i in $invoked&#xD;
       let $name:= concat($i/xqdoc:name,"#",$i/@arity)&#xD;
       group by $key:= $i/xqdoc:uri || $name&#xD;
       order by $key&#xD;
       return map{"name":$name[1], "uri": $i[1]/xqdoc:uri/string()}&#xD;
 let $msg:= ``[Invokes `{ count($di) }` functions from `{ count(distinct-values($di?uri)) }` modules ]``&#xD;
&#xD;
 return &lt;details&gt;&#xD;
      &lt;summary&gt;{ $msg }&lt;/summary&gt;&#xD;
      &lt;ul&gt; {&#xD;
         $di! &lt;li&gt;{ page:link-function(?uri, ?name, $file, $model) }&lt;/li&gt;&#xD;
     } &lt;/ul&gt;&#xD;
      &lt;/details&gt; &#xD;
};&#xD;
&#xD;
&#xD;
(:~&#xD;
 : list of functions invoking  &#xD;
 :)&#xD;
declare&#xD;
function xqh:invoked-by($funs as element(xqdoc:function)*,$qmap as map(*), $model)&#xD;
as element(details){&#xD;
&#xD;
let $hits:=for $file in $model?files, $function in $file?xqdoc//xqdoc:function&#xD;
                     where $function[xqdoc:invoked[&#xD;
                                         xqdoc:name = $qmap?name&#xD;
                                     and @arity=$funs/@arity &#xD;
                                     and xqdoc:uri= $qmap?uri &#xD;
                                ]]&#xD;
                    let $qname:=xqn:qmap($function/xqdoc:name,$file?namespaces,$file?default-fn-uri)                         &#xD;
                    return map{"file": $file, "name": concat($qname?name,"#",$function/@arity), "qname": $qname}&#xD;
                    &#xD;
          let $sum:= ``[Invoked by `{ count($hits) }` functions from `{ count(distinct-values($hits?file?href)) }` modules]``&#xD;
          return  &lt;details&gt;&#xD;
                    &lt;summary&gt;{$sum}&lt;/summary&gt;&#xD;
                    &lt;ul&gt;&#xD;
                     { $hits!&lt;li&gt;{&#xD;
                       page:link-function2(?qname?uri, ?name, ?file, true()) &#xD;
                     }&lt;/li&gt; }&#xD;
                 &#xD;
                    &lt;/ul&gt;              &#xD;
                    &lt;/details&gt;&#xD;
};&#xD;
&#xD;
declare function xqh:custom($v as element(xqdoc:custom))&#xD;
as element(p)&#xD;
{&#xD;
		&lt;p&gt;{ $v/@tag/string() }: { $v/* }&lt;/p&gt;&#xD;
};&#xD;
&#xD;
(:~ &#xD;
 :The @see tag provides the ability to hypertext link to an external web site, a library or main module contained in xqDoc, &#xD;
 :a specific function (or variable) defined in a library or main module contained in xqDoc, or arbitrary text. To link to  &#xD;
 :an external site, use a complete URL such as http://www.xquery.com. To link to a library or main module contained in  &#xD;
 :   &#xD;
 :xqDoc, simply provide the URI for the library or main module. To link to a specific function (or variable) defined in an &#xD;
 :xqDoc library or main module, simply provide the URI for the library or main module followed by a ';' and finally the     &#xD;
 :function or variable name. To provide a name for a link, simply include a second ';' followed by the name. To provide     &#xD;
 :text, simply include the 'text'. Multiple @see tags can be specified (one per link or string of text). &#xD;
 : @see http://www.xquery.com&#xD;
 : @see xqdoc/xqdoc-display&#xD;
 : @see xqdoc/xqdoc-display;build-link&#xD;
 : @see xqdoc/xqdoc-display;$months&#xD;
 : @see xqdoc/xqdoc-display;$months;month variable&#xD;
 : @see http://www.xquery.com;;xquery&#xD;
 : @see some text&#xD;
 :)&#xD;
declare function xqh:see($v as element(xqdoc:see))&#xD;
as element(span)&#xD;
{&#xD;
  let $items:=tokenize($v,";")&#xD;
  let $first:=$items[1]&#xD;
  return  &lt;span&gt;&#xD;
          {switch(true())&#xD;
          case count($items) eq 3 return &lt;a href="{ $first }"&gt;{ $items[3] }&lt;/a&gt;&#xD;
          case count($items) eq 2 return &lt;a href="{ $first }#{ $items[2] }"&gt;{ $items[2] }&lt;/a&gt;&#xD;
          default return if(page:is-url($first)) then &lt;a href="{ $first }"&gt;{ $first }&lt;/a&gt; else $first&#xD;
        }&lt;/span&gt;&#xD;
};&#xD;
  &#xD;
declare function xqh:annotations($v as element(xqdoc:annotations))&#xD;
as element(*)&#xD;
{&#xD;
		&lt;details&gt;&#xD;
			&lt;summary&gt;Annotations ({count($v/xqdoc:annotation)})&lt;/summary&gt;&#xD;
			&lt;table class="data"&gt;&#xD;
				&lt;tbody&gt;{ &#xD;
       for $a in $v/xqdoc:annotation&#xD;
       return 	&#xD;
             &lt;tr&gt;&#xD;
                &lt;td&gt;&#xD;
                  &lt;code class="function"&gt;%{ $a/@name/string() }&lt;/code&gt;&#xD;
                &lt;/td&gt;&#xD;
                &lt;td&gt;&#xD;
                  &lt;code class="arg"&gt;{ xqa:literals($a/xqdoc:literal) }&lt;/code&gt;&#xD;
                &lt;/td&gt;&#xD;
              &lt;/tr&gt;&#xD;
    }&lt;/tbody&gt;&#xD;
			&lt;/table&gt;&#xD;
		&lt;/details&gt;&#xD;
};&#xD;
&#xD;
&#xD;
&#xD;
declare function xqh:namespaces($namespaces as element(xqdoc:namespace)*,$model as map(*))&#xD;
as element(section)&#xD;
{&#xD;
     &lt;section id="namespaces"&gt;&#xD;
			&lt;h2&gt;Namespaces&lt;/h2&gt;&#xD;
			&lt;p&gt;The following namespaces are defined:&lt;/p&gt;&#xD;
			&lt;table class="data" style="float:none"&gt;&#xD;
				&lt;thead&gt;&#xD;
					&lt;tr&gt;&#xD;
						&lt;th&gt;Prefix&lt;/th&gt;&#xD;
						&lt;th&gt;Uri&lt;/th&gt;&#xD;
					&lt;/tr&gt;&#xD;
				&lt;/thead&gt;&#xD;
				&lt;tbody&gt;{ &#xD;
        for $ns in $namespaces&#xD;
                   group by $url:=$ns/@uri&#xD;
					order by lower-case($ns[1]/@prefix)&#xD;
          return&#xD;
						&lt;tr&gt;&#xD;
							&lt;td&gt;{string($ns[1]/@prefix) }&lt;/td&gt;&#xD;
							&lt;td&gt;{ page:link-module(string($url),$model) }&lt;/td&gt;&#xD;
						&lt;/tr&gt;&#xD;
			}&lt;/tbody&gt;&#xD;
			&lt;/table&gt;&#xD;
		&lt;/section&gt;&#xD;
};&#xD;
&#xD;
declare function xqh:parameters($v as element(xqdoc:parameters))&#xD;
as element(*)*&#xD;
{&#xD;
	&lt;dt class="label"&gt;Parameters&lt;/dt&gt;,&#xD;
		&lt;dd&gt;&#xD;
			&lt;ul&gt;{&#xD;
         for $p in $v/xqdoc:parameter&#xD;
         return 	&lt;li&gt;&#xD;
                    { $p/xqdoc:name/string() }&#xD;
                    &lt;code class="as"&gt;&amp;#160;as&amp;#160;&lt;/code&gt;&#xD;
                    &lt;code class="return-type"&gt;&#xD;
                      { $p/xqdoc:type/string() }&#xD;
                      { $p/xqdoc:type/@occurrence/string() }&#xD;
                    &lt;/code&gt;&#xD;
                    {   page:comment-for(string($p/xqdoc:name),$v) }&#xD;
                &lt;/li&gt;&#xD;
    }&lt;/ul&gt;&#xD;
		&lt;/dd&gt;&#xD;
};&#xD;
&#xD;
&#xD;
&#xD;
declare function xqh:return($f as element(xqdoc:function))&#xD;
as element(*)*&#xD;
{&#xD;
		&lt;dt class="label"&gt;Return&lt;/dt&gt;,&#xD;
		&lt;dd&gt;&#xD;
			&lt;ul&gt;&#xD;
				&lt;li&gt;&#xD;
					&lt;code class="return-type"&gt;&#xD;
					{ $f/xqdoc:return/xqdoc:type/(string(),@occurrence/string()) }&#xD;
					&lt;/code&gt;&#xD;
					{for $comment in $f/xqdoc:comment/xqdoc:return&#xD;
					return " " || $comment/(node()|text())&#xD;
        }&#xD;
				&lt;/li&gt;&#xD;
			&lt;/ul&gt;&#xD;
		&lt;/dd&gt;&#xD;
};&#xD;
 &#xD;
declare function xqh:error($v as element(xqdoc:error))&#xD;
as element(*)*{&#xD;
		&lt;dt class="label"&gt;Error&lt;/dt&gt;,&#xD;
		&lt;dd&gt;&#xD;
		{ $v/(node()|text()) }&#xD;
		&lt;/dd&gt;&#xD;
};&#xD;
&#xD;
declare function xqh:function-signature($v as element(xqdoc:function))&#xD;
as element(div){&#xD;
		&lt;div class="proto"&gt;&#xD;
			&lt;code class="function"&gt;{ $v/xqdoc:name/string() }&lt;/code&gt;&#xD;
		  ( &#xD;
			{&#xD;
        for $p in $v/xqdoc:parameters/xqdoc:parameter&#xD;
          return	(&#xD;
            &lt;code class="arg"&gt;${ $p/xqdoc:name/string() }&lt;/code&gt;&#xD;
            ,xqh:as($p/xqdoc:type)&#xD;
            ,if(not($p is $v/xqdoc:parameters/xqdoc:parameter[last()] )) then ", " else "" &#xD;
          )&#xD;
       ,")"&#xD;
       ,xqh:as($v/xqdoc:return/xqdoc:type)&#xD;
     }&#xD;
      &lt;/div&gt;&#xD;
};&#xD;
&#xD;
declare function xqh:as($t as element(xqdoc:type)?)&#xD;
as element(code)*&#xD;
{&#xD;
  if(exists($t))&#xD;
  then (&#xD;
    &lt;code class="as"&gt;&amp;#160;as&amp;#160;&lt;/code&gt;&#xD;
    ,&lt;code class="type"&gt;&#xD;
        { string($t)  }&#xD;
        { $t/@occurrence/string() }&#xD;
    &lt;/code&gt;&#xD;
  )&#xD;
};&#xD;
&#xD;
declare function xqh:description($v as element(xqdoc:description))&#xD;
as element(*)*&#xD;
{&#xD;
  	&lt;dt class="label"&gt;Summary&lt;/dt&gt;,&#xD;
		&lt;dd&gt;&#xD;
			{ $v/(node()|text()) }&#xD;
		&lt;/dd&gt;&#xD;
};&#xD;
&#xD;
(:~ tags list :)&#xD;
declare function xqh:tags($title as xs:string,$tags as element(*)*)&#xD;
as element(dl)?{ &#xD;
  if($tags)&#xD;
  then &lt;dl&gt;&#xD;
        &lt;dt title="{count($tags)}"&gt;{ $title  }&lt;/dt&gt;&#xD;
        &lt;dd&gt;&#xD;
          &lt;ul&gt;{ $tags ! &lt;li&gt;{ xqh:tag(.) }&lt;/li&gt; }&lt;/ul&gt;&#xD;
        &lt;/dd&gt;&#xD;
      &lt;/dl&gt;&#xD;
};&#xD;
&#xD;
(:~ html for tag, often &lt;span/&gt; :)&#xD;
declare function xqh:tag($tag as element(*))&#xD;
as element(span)?{&#xD;
  let $name:=if($tag instance of element(xqdoc:custom))&#xD;
             then $tag/@tag/string()&#xD;
             else local-name($tag)&#xD;
&#xD;
return typeswitch ($tag)&#xD;
       case element (xqdoc:param) | element(xqdoc:return)&#xD;
          return () (: ignore :)&#xD;
&#xD;
       case element (xqdoc:see) &#xD;
          return xqh:see($tag)&#xD;
&#xD;
       case element (xqdoc:author) &#xD;
          return &lt;span&gt;{string($tag)}&lt;/span&gt;&#xD;
&#xD;
       default return&#xD;
            &lt;span&gt;&#xD;
                &lt;span class="badge badge-pill badge-light" &gt;@{ $name }&lt;/span&gt;:&#xD;
                &lt;span&gt;{ string($tag) }&lt;/span&gt;&#xD;
            &lt;/span&gt;&#xD;
};&#xD;
 &#xD;
declare function xqh:restxq($xqd,$file as map(*))&#xD;
as element(div)&#xD;
{&#xD;
   let $ns:= $file?namespaces&#xD;
   let $rest:=filter($xqd//xqdoc:annotation,xqa:is-rest(?,"path",$ns))&#xD;
   return &lt;div class="div2"&gt;&#xD;
			&lt;h2&gt;&lt;a id="restxq"/&gt;6 RestXQ&lt;/h2&gt;&#xD;
      {if(empty($rest)) then&#xD;
            &lt;p&gt;None&lt;/p&gt;&#xD;
       else(&#xD;
      &lt;p&gt;Paths defined {count($rest)}.&lt;/p&gt;,&#xD;
      &lt;table class="data"&gt;&#xD;
      &lt;thead&gt;&lt;tr&gt;&#xD;
        &lt;th&gt;Path&lt;/th&gt;&#xD;
         &lt;th&gt;Method&lt;/th&gt;&#xD;
        &lt;th&gt;Function&lt;/th&gt;&#xD;
      &lt;/tr&gt;&lt;/thead&gt;&#xD;
      &lt;tbody&gt;{ for $r in $rest&#xD;
               let $path:= $r/xqdoc:literal/string()&#xD;
               let $obj:=xqa:name-detail($r/../..,$file)  (: map{ "given": $name/string(), "uri": $qmap?uri, "name": $lname, "xqdoc": $e} :)&#xD;
               let $methods:=xqa:methods($obj?xqdoc//xqdoc:annotation, $file?namespaces) &#xD;
               order by $path&#xD;
              return &lt;tr&gt;&#xD;
                &lt;td&gt;{  $r/xqdoc:literal/string() }&lt;/td&gt;&#xD;
                &lt;td&gt;{$methods!page:link-restxq($path,. , true())}&lt;/td&gt;&#xD;
                &lt;td&gt;{  page:link-function2($obj?uri, $obj?name, $file, true())  }&lt;/td&gt;&#xD;
                &lt;/tr&gt;&#xD;
    }&lt;/tbody&gt;&#xD;
      &lt;/table&gt;)&#xD;
    }&#xD;
    &lt;/div&gt;&#xD;
};&#xD;
&#xD;
(:~ run function when value is non empty :)&#xD;
declare function xqh:when($value,$fun as function(*))&#xD;
{&#xD;
 if($value) then $fun($value) else ()&#xD;
};&#xD;
&#xD;
</xqdoc:body></xqdoc:module><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>quodatum:xqdoca.model</xqdoc:uri><xqdoc:at>../lib/model.xqm</xqdoc:at></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>quodatum:xqdoca.model.annotations</xqdoc:uri><xqdoc:at>../lib/annotations.xqm</xqdoc:at></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>quodatum:xqdoca.page</xqdoc:uri><xqdoc:at>../lib/xqdoc-page.xqm</xqdoc:at></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>quodatum:xqdoca.namespaces</xqdoc:uri><xqdoc:at>../lib/xqdoc-namespace.xqm</xqdoc:at></xqdoc:import></xqdoc:imports><xqdoc:namespaces><xqdoc:namespace prefix="xqh" uri="quodatum:xqdoca.mod-html"/><xqdoc:namespace prefix="xqd" uri="quodatum:xqdoca.model"/><xqdoc:namespace prefix="xqa" uri="quodatum:xqdoca.model.annotations"/><xqdoc:namespace prefix="page" uri="quodatum:xqdoca.page"/><xqdoc:namespace prefix="xqn" uri="quodatum:xqdoca.namespaces"/><xqdoc:namespace prefix="xqdoc" uri="http://www.xqdoc.org/1.0"/><xqdoc:namespace prefix="xqdoca" uri="https://github.com/Quodatum/xqdoca"/><xqdoc:namespace prefix="xs" uri="http://www.w3.org/2001/XMLSchema"/></xqdoc:namespaces><xqdoc:variables/><xqdoc:functions><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description><pre>map { "root": "../../",
"cache": false(),
"resources": "resources/",
"filename": "src\main\lib\parsepaths.xq",
"show-private": true(),
"project": "xqdoca",
"source": () }</pre></xqdoc:description></xqdoc:comment><xqdoc:name>xqh:xqdoc-html2</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="xqdoca:module"><xqdoc:literal type="xs:string">module</xqdoc:literal><xqdoc:literal type="xs:string">Report on the XQuery source</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="xqdoca:output"><xqdoc:literal type="xs:string">index.html</xqdoc:literal><xqdoc:literal type="xs:string">xhtml</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>function xqh:xqdoc-html2 ( $file as map(*), $model as map(*), $opts as map(*) ) as document-node() { let $xqd:=$file?xqdoc let $_:=trace(concat($file?path,"-&gt;",$file?href),"module: ") let $d:=if($file?isParsed) then &lt;div&gt; &lt;h1&gt; &lt;span class="badge badge-info"&gt;{ $file?namespace }&lt;/span&gt;&amp;#160; &lt;small&gt;{ $xqd/xqdoc:module/@type/string() } module&lt;/small&gt; &lt;div style="float:right"&gt;{ xqa:badges($xqd//xqdoc:annotation, $file,page:badge#3) }&lt;/div&gt; &lt;/h1&gt; { xqh:toc($xqd,$opts,$file), xqh:summary($xqd/xqdoc:module,$opts), xqh:imports($xqd,$model), xqh:variables($xqd/xqdoc:variables,$file), xqh:functions($xqd/xqdoc:functions, $file, $model), xqh:when($xqd/xqdoc:namespaces/xqdoc:namespace,xqh:namespaces(?,$model)), xqh:restxq($xqd,$file), &lt;section id="source"&gt; &lt;h2 &gt;Source Code&lt;/h2&gt; &lt;pre style="white-space:pre-wrap;" class="line-numbers" data-src="plugins/line-numbers/index.html" &gt; &lt;code class="language-xquery" data-prismjs-copy="Copy to clipboard"&gt;{ $xqd/xqdoc:module/xqdoc:body/string() }&lt;/code&gt;&lt;/pre&gt; &lt;/section&gt; } &lt;/div&gt; else "Parse Failed" return document{ page:wrap($d, $opts ) } }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>file</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>model</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>document-node()</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:xqdoc-html2($file as map(*),         &#xD;
                         $model as map(*),&#xD;
                         $opts as map(*)&#xD;
                        )&#xD;
as document-node()                         &#xD;
{&#xD;
let $xqd:=$file?xqdoc&#xD;
let $_:=trace(concat($file?path,"-&gt;",$file?href),"module: ")&#xD;
let $d:=if($file?isParsed)&#xD;
        then  &lt;div&gt;&#xD;
                  &lt;h1&gt;&#xD;
                    &lt;span class="badge badge-info"&gt;{ $file?namespace }&lt;/span&gt;&amp;#160;&#xD;
                    &lt;small&gt;{ $xqd/xqdoc:module/@type/string() } module&lt;/small&gt;&#xD;
                    &lt;div style="float:right"&gt;{ xqa:badges($xqd//xqdoc:annotation, $file,page:badge#3) }&lt;/div&gt;&#xD;
                  &lt;/h1&gt;&#xD;
                  { xqh:toc($xqd,$opts,$file),&#xD;
                    xqh:summary($xqd/xqdoc:module,$opts),&#xD;
                    xqh:imports($xqd,$model), &#xD;
                    xqh:variables($xqd/xqdoc:variables,$file),&#xD;
                    xqh:functions($xqd/xqdoc:functions, $file, $model),&#xD;
                    xqh:when($xqd/xqdoc:namespaces/xqdoc:namespace,xqh:namespaces(?,$model)),&#xD;
                    xqh:restxq($xqd,$file),&#xD;
                      &lt;section id="source"&gt;&#xD;
                        &lt;h2 &gt;Source Code&lt;/h2&gt;&#xD;
                        &lt;pre style="white-space:pre-wrap;" class="line-numbers" data-src="plugins/line-numbers/index.html" &gt;&#xD;
                        &lt;code class="language-xquery"  data-prismjs-copy="Copy to clipboard"&gt;{ &#xD;
                          $xqd/xqdoc:module/xqdoc:body/string() &#xD;
                          }&lt;/code&gt;&lt;/pre&gt;&#xD;
                      &lt;/section&gt;&#xD;
                            }&#xD;
                    &lt;/div&gt;&#xD;
          else "Parse Failed"&#xD;
 return document{ page:wrap($d, $opts )  }                 &#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>xqh:summary</xqdoc:name><xqdoc:signature>function xqh:summary ( $mod as element(xqdoc:module)?, $opts as map(*) ) as element(section) { &lt;section id="summary"&gt; &lt;h2&gt;Summary&lt;/h2&gt; { if($mod/xqdoc:comment) then xqh:comment($mod/xqdoc:comment,$opts) } { page:related-links("module","module", $opts) } &lt;/section&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>mod</xqdoc:name><xqdoc:type occurrence="?">element(xqdoc:module)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(section)</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:summary($mod as element(xqdoc:module)?,&#xD;
                            $opts as map(*)&#xD;
                            )&#xD;
 as element(section)&#xD;
 {&#xD;
    &lt;section id="summary"&gt;&#xD;
    &lt;h2&gt;Summary&lt;/h2&gt;&#xD;
       { if($mod/xqdoc:comment) then xqh:comment($mod/xqdoc:comment,$opts) } &#xD;
		   { page:related-links("module","module", $opts) }&#xD;
    &lt;/section&gt;&#xD;
  }</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>xqh:comment</xqdoc:name><xqdoc:signature>function xqh:comment ( $comment as element(xqdoc:comment), $opts as map(*) ) as element(*)+ { let $desc:=$comment/xqdoc:description/(node()|text()) let $result:= if(exists($desc)) then &lt;div&gt;{$desc}&lt;/div&gt; else &lt;div&gt;MISSING&lt;/div&gt; return ($result ,xqh:tags("See also",$comment/xqdoc:see) ,xqh:tags("Authors",$comment/xqdoc:author) ,xqh:tags("Parameters",$comment/xqdoc:param) ,xqh:tags("Return",$comment/xqdoc:return) ,xqh:tags("Errors",$comment/xqdoc:error) ,xqh:tags("Deprecated",$comment/xqdoc:deprecated) ,xqh:tags("Since",$comment/xqdoc:since) ,xqh:tags("Custom",$comment/xqdoc:custom) ) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>comment</xqdoc:name><xqdoc:type>element(xqdoc:comment)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="+">element(*)</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:comment($comment as element(xqdoc:comment),&#xD;
                            $opts as map(*)&#xD;
                            )&#xD;
 as element(*)+&#xD;
 {&#xD;
  let $desc:=$comment/xqdoc:description/(node()|text())&#xD;
  let $result:= if(exists($desc))&#xD;
                then &lt;div&gt;{$desc}&lt;/div&gt;&#xD;
                else  &lt;div&gt;MISSING&lt;/div&gt;&#xD;
&#xD;
  return ($result&#xD;
          ,xqh:tags("See also",$comment/xqdoc:see)&#xD;
          ,xqh:tags("Authors",$comment/xqdoc:author)&#xD;
          ,xqh:tags("Parameters",$comment/xqdoc:param)&#xD;
          ,xqh:tags("Return",$comment/xqdoc:return)&#xD;
          ,xqh:tags("Errors",$comment/xqdoc:error)&#xD;
          ,xqh:tags("Deprecated",$comment/xqdoc:deprecated)&#xD;
          ,xqh:tags("Since",$comment/xqdoc:since)&#xD;
          ,xqh:tags("Custom",$comment/xqdoc:custom)      &#xD;
  )&#xD;
 }</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>&#xD;
Table of contents</xqdoc:description></xqdoc:comment><xqdoc:name>xqh:toc</xqdoc:name><xqdoc:signature>function xqh:toc ( $xqd,$opts,$file as map(*) ) as element(nav) { let $vars:=$xqd//xqdoc:variable (: [$opts?show-private or not(xqdoc:annotations/xqdoc:annotation/@name='private')] :) let $funs:=$xqd//xqdoc:function (: [$opts?show-private or not(xqdoc:annotations/xqdoc:annotation/@name='private')] :) return &lt;nav id="toc"&gt; &lt;h2&gt; &lt;a href="{ $opts?root || "index.html" }" &gt;{ $opts?project }&lt;/a&gt; / Module &lt;/h2&gt; &lt;h3&gt; &lt;a id="contents"&gt;&lt;/a&gt; &lt;span class=""&gt;{ $xqd/xqdoc:module/xqdoc:uri/string() }&lt;/span&gt; &lt;/h3&gt; &lt;ol class="toc"&gt; &lt;li&gt; &lt;a href="#summary"&gt; &lt;span class="secno"&gt;1 &lt;/span&gt; &lt;span class="content"&gt;Summary&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#imports"&gt; &lt;span class="secno"&gt;2 &lt;/span&gt; &lt;span class="content"&gt;Imports&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#variables"&gt; &lt;span class="secno"&gt;3 &lt;/span&gt; &lt;span class="content"&gt;Variables&lt;/span&gt; &lt;/a&gt; &lt;ol class="toc"&gt; {for $var in $vars order by $var/xqdoc:name let $id:=concat('$',$var/xqdoc:name) count $pos return &lt;li&gt; &lt;a href="#{$id}"&gt; &lt;span class="secno"&gt;{ concat('3.',$pos) }&lt;/span&gt; &lt;span class="content"&gt;{ $id }&lt;/span&gt; &lt;div style="float:right"&gt; {xqa:badges($var/xqdoc:annotations/xqdoc:annotation, $file, page:badge#3)} &lt;/div&gt; &lt;/a&gt; &lt;/li&gt; } &lt;/ol&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#functions"&gt; &lt;span class="secno"&gt;4 &lt;/span&gt; &lt;span class="content"&gt;Functions&lt;/span&gt; &lt;/a&gt; &lt;ol class="toc"&gt; {for $fun in $funs group by $name:=$fun/xqdoc:name order by $name count $pos let $display:=substring-after($name,":") let $display:=if($display eq "") then $name else $display let $desc:= $fun[1]/xqdoc:comment/xqdoc:description/string() return &lt;li&gt; &lt;a href="#{$name}"&gt; &lt;span class="secno"&gt;{ concat('4.',$pos[1]) }&lt;/span&gt; &lt;span class="content" title="{ $desc }"&gt;{ $display } &lt;div style="float:right"&gt; {xqa:badges($fun/xqdoc:annotations/xqdoc:annotation,$file,page:badge#3)} &lt;/div&gt; &lt;/span&gt; &lt;/a&gt; &lt;/li&gt; } &lt;/ol&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#namespaces"&gt; &lt;span class="secno"&gt;5 &lt;/span&gt; &lt;span class="content"&gt;Namespaces&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#restxq"&gt; &lt;span class="secno"&gt;6 &lt;/span&gt; &lt;span class="content"&gt;RestXQ&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#source"&gt; &lt;span class="secno"&gt;7 &lt;/span&gt; &lt;span class="content"&gt;Source&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/nav&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>xqd</xqdoc:name></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name></xqdoc:parameter><xqdoc:parameter><xqdoc:name>file</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(nav)</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:toc($xqd,$opts,$file as map(*))&#xD;
as element(nav){&#xD;
  let $vars:=$xqd//xqdoc:variable (: [$opts?show-private or not(xqdoc:annotations/xqdoc:annotation/@name='private')] :)&#xD;
  let $funs:=$xqd//xqdoc:function   (: [$opts?show-private or not(xqdoc:annotations/xqdoc:annotation/@name='private')] :)&#xD;
	return	&lt;nav id="toc"&gt;&#xD;
			&lt;h2&gt;&#xD;
			    &lt;a href="{ $opts?root || "index.html" }" &gt;{ $opts?project }&lt;/a&gt;&#xD;
                / Module&#xD;
       &lt;/h2&gt;&#xD;
			&lt;h3&gt;&#xD;
				&lt;a id="contents"&gt;&lt;/a&gt;&#xD;
				&lt;span class=""&gt;{ $xqd/xqdoc:module/xqdoc:uri/string() }&lt;/span&gt;&#xD;
			&lt;/h3&gt;&#xD;
			&lt;ol class="toc"&gt;&#xD;
				&lt;li&gt;&#xD;
					&lt;a href="#summary"&gt;&#xD;
						&lt;span class="secno"&gt;1 &lt;/span&gt;&#xD;
						&lt;span class="content"&gt;Summary&lt;/span&gt;&#xD;
					&lt;/a&gt;&#xD;
				&lt;/li&gt;&#xD;
				&lt;li&gt;&#xD;
		          &lt;a href="#imports"&gt;&#xD;
		            &lt;span class="secno"&gt;2 &lt;/span&gt;&#xD;
		            &lt;span class="content"&gt;Imports&lt;/span&gt;&#xD;
		          &lt;/a&gt;&#xD;
		        &lt;/li&gt;&#xD;
				&#xD;
          &lt;li&gt;&#xD;
            &lt;a href="#variables"&gt;&#xD;
              &lt;span class="secno"&gt;3 &lt;/span&gt;&#xD;
              &lt;span class="content"&gt;Variables&lt;/span&gt;&#xD;
            &lt;/a&gt;&#xD;
            &lt;ol class="toc"&gt;&#xD;
            {for $var  in $vars&#xD;
            order by $var/xqdoc:name&#xD;
            let $id:=concat('$',$var/xqdoc:name)&#xD;
            count $pos&#xD;
            return&#xD;
                &lt;li&gt;&#xD;
                  &lt;a href="#{$id}"&gt;&#xD;
                    &lt;span class="secno"&gt;{ concat('3.',$pos) }&lt;/span&gt;&#xD;
                    &lt;span class="content"&gt;{ $id }&lt;/span&gt;&#xD;
                    &lt;div style="float:right"&gt;&#xD;
                     {xqa:badges($var/xqdoc:annotations/xqdoc:annotation, $file, page:badge#3)}&#xD;
                        &lt;/div&gt;&#xD;
                  &lt;/a&gt;&#xD;
                &lt;/li&gt;&#xD;
            }&#xD;
            &lt;/ol&gt;&#xD;
          &lt;/li&gt;&#xD;
				&#xD;
				&lt;li&gt;&#xD;
&#xD;
							&lt;a href="#functions"&gt;&#xD;
								&lt;span class="secno"&gt;4 &lt;/span&gt;&#xD;
								&lt;span class="content"&gt;Functions&lt;/span&gt;&#xD;
							&lt;/a&gt;&#xD;
							&lt;ol class="toc"&gt;&#xD;
                {for $fun  in $funs&#xD;
              group by $name:=$fun/xqdoc:name&#xD;
              order by $name&#xD;
              count $pos&#xD;
              let $display:=substring-after($name,":")&#xD;
              let $display:=if($display eq "") then $name else $display&#xD;
              let $desc:= $fun[1]/xqdoc:comment/xqdoc:description/string()&#xD;
              return&#xD;
									&lt;li&gt;&#xD;
										&lt;a href="#{$name}"&gt;&#xD;
											&lt;span class="secno"&gt;{ concat('4.',$pos[1]) }&lt;/span&gt;&#xD;
											&lt;span class="content" title="{ $desc }"&gt;{ $display }&#xD;
                      &lt;div style="float:right"&gt;&#xD;
                     {xqa:badges($fun/xqdoc:annotations/xqdoc:annotation,$file,page:badge#3)}&#xD;
                        &lt;/div&gt;&#xD;
                        &lt;/span&gt;  &#xD;
										&lt;/a&gt;&#xD;
									&lt;/li&gt;&#xD;
							}&#xD;
							&#xD;
							&lt;/ol&gt;&#xD;
		&#xD;
				&lt;/li&gt;&#xD;
				&lt;li&gt;&#xD;
					&lt;a href="#namespaces"&gt;&#xD;
						&lt;span class="secno"&gt;5 &lt;/span&gt;&#xD;
						&lt;span class="content"&gt;Namespaces&lt;/span&gt;&#xD;
					&lt;/a&gt;&#xD;
				&lt;/li&gt;&#xD;
				&lt;li&gt;&#xD;
							&lt;a href="#restxq"&gt;&#xD;
								&lt;span class="secno"&gt;6 &lt;/span&gt;&#xD;
								&lt;span class="content"&gt;RestXQ&lt;/span&gt;&#xD;
							&lt;/a&gt;&#xD;
				&lt;/li&gt;&#xD;
       	&lt;li&gt;&#xD;
					&lt;a href="#source"&gt;&#xD;
						&lt;span class="secno"&gt;7 &lt;/span&gt;&#xD;
						&lt;span class="content"&gt;Source&lt;/span&gt;&#xD;
					&lt;/a&gt;&#xD;
				&lt;/li&gt; &#xD;
			&lt;/ol&gt;&#xD;
		&lt;/nav&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
create section&#xD;
</xqdoc:description></xqdoc:comment><xqdoc:name>xqh:imports</xqdoc:name><xqdoc:signature>function xqh:imports ( $xqd as element(xqdoc:xqdoc),$model as map(*) ) as element(section) { let $x:= xqd:import-count($xqd,$model) return &lt;section id="imports"&gt; &lt;h2&gt;Imports&lt;/h2&gt; &lt;p&gt; This module is imported by &lt;span class="badge badge-info"&gt;{ count($x?importedby) }&lt;/span&gt; modules. It imports &lt;span class="badge badge-info"&gt;{ count($x?imports) }&lt;/span&gt; modules. &lt;/p&gt;{ page:calls( $x?importedby?namespace!page:link-module(.,$model), $x?uri, $x?imports/xqdoc:uri/string()!page:link-module(.,$model) ) } &lt;/section&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>xqd</xqdoc:name><xqdoc:type>element(xqdoc:xqdoc)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>model</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(section)</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:imports($xqd as element(xqdoc:xqdoc),$model as map(*))&#xD;
as element(section){&#xD;
  let $x:= xqd:import-count($xqd,$model)&#xD;
  return  &#xD;
    &lt;section id="imports"&gt;&#xD;
    &lt;h2&gt;Imports&lt;/h2&gt;&#xD;
&#xD;
    &lt;p&gt;&#xD;
    This module is imported by&#xD;
    &lt;span class="badge badge-info"&gt;{ count($x?importedby) }&lt;/span&gt; modules. It imports&#xD;
    &lt;span class="badge badge-info"&gt;{ count($x?imports) }&lt;/span&gt; modules.&#xD;
    &lt;/p&gt;{&#xD;
     page:calls(&#xD;
		     $x?importedby?namespace!page:link-module(.,$model),&#xD;
		     $x?uri,&#xD;
		     $x?imports/xqdoc:uri/string()!page:link-module(.,$model)&#xD;
   )&#xD;
  }&#xD;
    &lt;/section&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>xqh:variables</xqdoc:name><xqdoc:signature>function xqh:variables ( $vars as element(xqdoc:variables)?,$file as map(*) ) as element(section) { &lt;section id="variables"&gt; &lt;h2&gt;Variables&lt;/h2&gt; {for $v in $vars/xqdoc:variable order by lower-case($v/xqdoc:name) count $index return xqh:variable($v,(3,$index),$file), if(empty( $vars/xqdoc:variable)) then &lt;p&gt;None&lt;/p&gt; else () } &lt;/section&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>vars</xqdoc:name><xqdoc:type occurrence="?">element(xqdoc:variables)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>file</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(section)</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:variables($vars as element(xqdoc:variables)?,$file as map(*))&#xD;
as element(section)&#xD;
{&#xD;
  &lt;section id="variables"&gt;&#xD;
			&lt;h2&gt;Variables&lt;/h2&gt;&#xD;
		{for $v in $vars/xqdoc:variable&#xD;
      order by  lower-case($v/xqdoc:name)&#xD;
      count $index&#xD;
	   return xqh:variable($v,(3,$index),$file),&#xD;
     if(empty( $vars/xqdoc:variable)) then &lt;p&gt;None&lt;/p&gt; else ()&#xD;
   }&#xD;
		&lt;/section&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:name>xqh:variable</xqdoc:name><xqdoc:signature>function xqh:variable ( $v as element(xqdoc:variable), $section as xs:anyAtomicType*, $file as map(*) ) as element(div) { let $name:= concat('$',$v/xqdoc:name) (: =&gt;trace("VNAME:") :) let $qmap:=xqn:qmap($v/xqdoc:name,$file?namespaces, $file?default-fn-uri) let $summary:= $v/xqdoc:comment/xqdoc:description/(node()|text()) return &lt;div class="div3"&gt; &lt;h3&gt; &lt;a id="{$name }"/&gt; &lt;a id="{ xqn:clark-name($qmap?uri, "$" || $qmap?name) }"/&gt; &lt;a href="#{ $name }"&gt;{ page:section($section) }&lt;/a&gt; {$name } {if(boolean($v/@external)) then &lt;div style="float:right" class="badge badge-info"&gt;EXTERNAL&lt;/div&gt;} &lt;/h3&gt; &lt;dl&gt; &lt;dt class="label"&gt;Summary&lt;/dt&gt; &lt;dd&gt;{ $summary }&lt;/dd&gt; &lt;dt class="label"&gt;Type&lt;/dt&gt; &lt;dd&gt;{ $v/xqdoc:type/string() } { $v/xqdoc:type/@occurrence/string() }&lt;/dd&gt; &lt;/dl&gt; {xqh:when($v/xqdoc:comment/(* except xqdoc:description),xqh:tags("Tags",?)) } { xqh:when($v/xqdoc:annotations,xqh:annotations#1) } &lt;details open="open"&gt; &lt;summary&gt;Source ( {sum($v !xqdoc:body/page:line-count(.)) } lines)&lt;/summary&gt; { $v! &lt;pre &gt;&lt;code class="language-xquery" data-prismjs-copy="Copy to clipboard"&gt;{ xqdoc:body/string() }&lt;/code&gt;&lt;/pre&gt; } &lt;/details&gt; &lt;/div&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>v</xqdoc:name><xqdoc:type>element(xqdoc:variable)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>section</xqdoc:name><xqdoc:type occurrence="*">xs:anyAtomicType</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>file</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(div)</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:variable($v as element(xqdoc:variable),&#xD;
                              $section as xs:anyAtomicType*,&#xD;
                              $file as map(*))&#xD;
as element(div)&#xD;
{&#xD;
let $name:= concat('$',$v/xqdoc:name) (: =&gt;trace("VNAME:") :)&#xD;
let $qmap:=xqn:qmap($v/xqdoc:name,$file?namespaces, $file?default-fn-uri)&#xD;
let $summary:= $v/xqdoc:comment/xqdoc:description/(node()|text())&#xD;
return&#xD;
		&lt;div class="div3"&gt;&#xD;
			&lt;h3&gt;&#xD;
      &lt;a id="{$name }"/&gt; &#xD;
      &lt;a id="{ xqn:clark-name($qmap?uri, "$" || $qmap?name) }"/&gt;&#xD;
      &lt;a href="#{ $name }"&gt;{ page:section($section) }&lt;/a&gt; &#xD;
      {$name }&#xD;
      {if(boolean($v/@external))&#xD;
       then &lt;div style="float:right" class="badge badge-info"&gt;EXTERNAL&lt;/div&gt;}&#xD;
      &lt;/h3&gt;&#xD;
			&lt;dl&gt;&#xD;
        &lt;dt class="label"&gt;Summary&lt;/dt&gt;&#xD;
		   &lt;dd&gt;{ $summary }&lt;/dd&gt;&#xD;
				&lt;dt class="label"&gt;Type&lt;/dt&gt;&#xD;
				&lt;dd&gt;{ $v/xqdoc:type/string() }	{ $v/xqdoc:type/@occurrence/string() }&lt;/dd&gt;&#xD;
			&lt;/dl&gt;&#xD;
      {xqh:when($v/xqdoc:comment/(* except xqdoc:description),xqh:tags("Tags",?)) }&#xD;
      { xqh:when($v/xqdoc:annotations,xqh:annotations#1) }&#xD;
       &lt;details open="open"&gt;&#xD;
        &lt;summary&gt;Source ( {sum($v !xqdoc:body/page:line-count(.)) } lines)&lt;/summary&gt;&#xD;
        { $v! &lt;pre &gt;&lt;code class="language-xquery" data-prismjs-copy="Copy to clipboard"&gt;{ xqdoc:body/string() }&lt;/code&gt;&lt;/pre&gt; }&#xD;
      &lt;/details&gt;&#xD;
		&lt;/div&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:name>xqh:functions</xqdoc:name><xqdoc:signature>function xqh:functions ( $funs as element(xqdoc:functions)?, $file as map(*), $model as map(*) ) as element(section) { &lt;section id="functions"&gt; &lt;h2&gt;Functions&lt;/h2&gt; { for $f in $funs/xqdoc:function group by $name:=$f/xqdoc:name order by $name count $pos return xqh:function($f,(4,$pos),$file, $model ), if(empty( $funs/xqdoc:function)) then &lt;p&gt;None&lt;/p&gt; else () } &lt;/section&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>funs</xqdoc:name><xqdoc:type occurrence="?">element(xqdoc:functions)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>file</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>model</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(section)</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:functions(&#xD;
                     $funs as element(xqdoc:functions)?,&#xD;
                     $file as map(*),&#xD;
                     $model as map(*)&#xD;
                   )&#xD;
as element(section)&#xD;
{&#xD;
  &lt;section id="functions"&gt;&#xD;
			&lt;h2&gt;Functions&lt;/h2&gt;&#xD;
		{ for $f in $funs/xqdoc:function&#xD;
      group by $name:=$f/xqdoc:name&#xD;
      order by  $name&#xD;
      count $pos&#xD;
	   return xqh:function($f,(4,$pos),$file, $model ),&#xD;
      if(empty( $funs/xqdoc:function)) then &lt;p&gt;None&lt;/p&gt; else ()&#xD;
   }&#xD;
		&lt;/section&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="4"><xqdoc:comment><xqdoc:description>&#xD;
o/p details for function $funs has all defined arities&#xD;
</xqdoc:description><xqdoc:param>$section no.</xqdoc:param></xqdoc:comment><xqdoc:name>xqh:function</xqdoc:name><xqdoc:signature>function xqh:function ( $funs as element(xqdoc:function)*, $section as xs:anyAtomicType*, $file as map(*), $model as map(*) ) as element(div) { let $funs:=sort($funs,(),function($f){number($f/@arity)}) let $maxfn:=$funs[last()] (: assume max arity has comments :) let $name:=$funs[1]/xqdoc:name/string() let $qmap:= xqn:qmap($name, $file?namespaces, $file?default-fn-uri) return &lt;div class="div3"&gt; &lt;h3&gt;&lt;a id="{$name}"/&gt; { $funs!&lt;a id="{ xqn:clark-name($qmap?uri, $qmap?name) }#{ @arity }"/&gt; } &lt;a href="#{ $name }"&gt;{ page:section($section) }&lt;/a&gt; { $name } &lt;/h3&gt; &lt;p&gt;Arities: { $funs ! &lt;span style="margin-left:1em" &gt; &lt;a href="#{ xqn:clark-name($qmap?uri, $qmap?name) }#{ @arity }"&gt;#{ string(@arity) }&lt;/a&gt; { xqa:badges(xqdoc:annotations/xqdoc:annotation,$file,page:badge#3) } &lt;/span&gt; } &lt;/p&gt; { xqh:when ($funs/xqdoc:comment/xqdoc:description=&gt;head(),xqh:description#1) } &lt;dt class="label"&gt;Signatures&lt;/dt&gt; &lt;dd&gt; {$funs!xqh:function-signature(.) } &lt;/dd&gt; { $maxfn/xqdoc:parameters!xqh:parameters(.) } { $maxfn!xqh:return(.) } { $maxfn/xqdoc:comment/xqdoc:error!xqh:error(.) } {xqh:when($funs/xqdoc:comment/(* except (xqdoc:description|xqdoc:param|xqdoc:return)),xqh:tags("Tags",?)) } {xqh:invoked-by($funs, $qmap , $model)} { xqh:when ($funs/xqdoc:invoked,xqh:invoked(?, $file, $model) )} { $funs/xqdoc:annotations!xqh:annotations(.) } &lt;details&gt; &lt;summary&gt;Source ( {sum($funs !xqdoc:body/page:line-count(.)) } lines)&lt;/summary&gt; { $funs! &lt;pre class="no-line-numbers" style="white-space:pre-wrap;"&gt; &lt;code class="language-xquery" data-prismjs-copy="Copy to clipboard"&gt;{ xqdoc:body/string() }&lt;/code&gt; &lt;/pre&gt; } &lt;/details&gt; &lt;/div&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>funs</xqdoc:name><xqdoc:type occurrence="*">element(xqdoc:function)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>section</xqdoc:name><xqdoc:type occurrence="*">xs:anyAtomicType</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>file</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>model</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(div)</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:function($funs as element(xqdoc:function)*,&#xD;
                              $section as xs:anyAtomicType*,&#xD;
                              $file as map(*),&#xD;
                              $model as map(*))&#xD;
as element(div)&#xD;
{&#xD;
    let $funs:=sort($funs,(),function($f){number($f/@arity)})&#xD;
    let $maxfn:=$funs[last()] (: assume max arity has comments :)&#xD;
		let $name:=$funs[1]/xqdoc:name/string()&#xD;
    let $qmap:= xqn:qmap($name, $file?namespaces, $file?default-fn-uri)&#xD;
	  return&#xD;
		&lt;div class="div3"&gt;&#xD;
			&lt;h3&gt;&lt;a id="{$name}"/&gt; &#xD;
      {  $funs!&lt;a id="{ xqn:clark-name($qmap?uri, $qmap?name) }#{ @arity }"/&gt; }&#xD;
      &lt;a href="#{ $name }"&gt;{ page:section($section) }&lt;/a&gt;   &#xD;
      { $name }&#xD;
			&lt;/h3&gt;&#xD;
     &#xD;
    &lt;p&gt;Arities: {  $funs &#xD;
                  ! &lt;span style="margin-left:1em" &gt;&#xD;
                      &lt;a href="#{ xqn:clark-name($qmap?uri, $qmap?name) }#{ @arity }"&gt;#{ string(@arity) }&lt;/a&gt;&#xD;
                      { xqa:badges(xqdoc:annotations/xqdoc:annotation,$file,page:badge#3) }                     &#xD;
                    &lt;/span&gt;                          &#xD;
                 }&#xD;
    &lt;/p&gt;&#xD;
    { xqh:when ($funs/xqdoc:comment/xqdoc:description=&gt;head(),xqh:description#1) }&#xD;
    &lt;dt class="label"&gt;Signatures&lt;/dt&gt;&#xD;
		&lt;dd&gt;&#xD;
			{$funs!xqh:function-signature(.) }&#xD;
		&lt;/dd&gt;	&#xD;
			{ $maxfn/xqdoc:parameters!xqh:parameters(.) } &#xD;
	    { $maxfn!xqh:return(.) }&#xD;
		  { $maxfn/xqdoc:comment/xqdoc:error!xqh:error(.) }&#xD;
      {xqh:when($funs/xqdoc:comment/(* except (xqdoc:description|xqdoc:param|xqdoc:return)),xqh:tags("Tags",?)) }    &#xD;
       {xqh:invoked-by($funs, $qmap , $model)}   &#xD;
      { xqh:when ($funs/xqdoc:invoked,xqh:invoked(?, $file, $model) )}&#xD;
   &#xD;
     { $funs/xqdoc:annotations!xqh:annotations(.) }&#xD;
     &lt;details&gt;&#xD;
        &lt;summary&gt;Source ( {sum($funs !xqdoc:body/page:line-count(.)) } lines)&lt;/summary&gt;&#xD;
        { $funs! &lt;pre class="no-line-numbers" style="white-space:pre-wrap;"&gt;&#xD;
        &lt;code class="language-xquery" data-prismjs-copy="Copy to clipboard"&gt;{ xqdoc:body/string() }&lt;/code&gt;&#xD;
        &lt;/pre&gt; }&#xD;
      &lt;/details&gt;&#xD;
		&lt;/div&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
list of functions called&#xD;
</xqdoc:description></xqdoc:comment><xqdoc:name>xqh:invoked</xqdoc:name><xqdoc:signature>function xqh:invoked ( $invoked as element(xqdoc:invoked)*, $file as map(*), $model as map(*) ) as element(details) { let $di:=for $i in $invoked let $name:= concat($i/xqdoc:name,"#",$i/@arity) group by $key:= $i/xqdoc:uri || $name order by $key return map{"name":$name[1], "uri": $i[1]/xqdoc:uri/string()} let $msg:= ``[Invokes `{ count($di) }` functions from `{ count(distinct-values($di?uri)) }` modules ]`` return &lt;details&gt; &lt;summary&gt;{ $msg }&lt;/summary&gt; &lt;ul&gt; { $di! &lt;li&gt;{ page:link-function(?uri, ?name, $file, $model) }&lt;/li&gt; } &lt;/ul&gt; &lt;/details&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>invoked</xqdoc:name><xqdoc:type occurrence="*">element(xqdoc:invoked)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>file</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>model</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(details)</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:invoked(&#xD;
       $invoked as element(xqdoc:invoked)*,&#xD;
       $file as map(*),&#xD;
       $model as map(*)&#xD;
     )&#xD;
as element(details)&#xD;
{&#xD;
 let $di:=for $i in $invoked&#xD;
       let $name:= concat($i/xqdoc:name,"#",$i/@arity)&#xD;
       group by $key:= $i/xqdoc:uri || $name&#xD;
       order by $key&#xD;
       return map{"name":$name[1], "uri": $i[1]/xqdoc:uri/string()}&#xD;
 let $msg:= ``[Invokes `{ count($di) }` functions from `{ count(distinct-values($di?uri)) }` modules ]``&#xD;
&#xD;
 return &lt;details&gt;&#xD;
      &lt;summary&gt;{ $msg }&lt;/summary&gt;&#xD;
      &lt;ul&gt; {&#xD;
         $di! &lt;li&gt;{ page:link-function(?uri, ?name, $file, $model) }&lt;/li&gt;&#xD;
     } &lt;/ul&gt;&#xD;
      &lt;/details&gt; &#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
list of functions invoking&#xD;
</xqdoc:description></xqdoc:comment><xqdoc:name>xqh:invoked-by</xqdoc:name><xqdoc:signature>function xqh:invoked-by ( $funs as element(xqdoc:function)*,$qmap as map(*), $model ) as element(details) { let $hits:=for $file in $model?files, $function in $file?xqdoc//xqdoc:function where $function[xqdoc:invoked[ xqdoc:name = $qmap?name and @arity=$funs/@arity and xqdoc:uri= $qmap?uri ]] let $qname:=xqn:qmap($function/xqdoc:name,$file?namespaces,$file?default-fn-uri) return map{"file": $file, "name": concat($qname?name,"#",$function/@arity), "qname": $qname} let $sum:= ``[Invoked by `{ count($hits) }` functions from `{ count(distinct-values($hits?file?href)) }` modules]`` return &lt;details&gt; &lt;summary&gt;{$sum}&lt;/summary&gt; &lt;ul&gt; { $hits!&lt;li&gt;{ page:link-function2(?qname?uri, ?name, ?file, true()) }&lt;/li&gt; } &lt;/ul&gt; &lt;/details&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>funs</xqdoc:name><xqdoc:type occurrence="*">element(xqdoc:function)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>qmap</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>model</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(details)</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:invoked-by($funs as element(xqdoc:function)*,$qmap as map(*), $model)&#xD;
as element(details){&#xD;
&#xD;
let $hits:=for $file in $model?files, $function in $file?xqdoc//xqdoc:function&#xD;
                     where $function[xqdoc:invoked[&#xD;
                                         xqdoc:name = $qmap?name&#xD;
                                     and @arity=$funs/@arity &#xD;
                                     and xqdoc:uri= $qmap?uri &#xD;
                                ]]&#xD;
                    let $qname:=xqn:qmap($function/xqdoc:name,$file?namespaces,$file?default-fn-uri)                         &#xD;
                    return map{"file": $file, "name": concat($qname?name,"#",$function/@arity), "qname": $qname}&#xD;
                    &#xD;
          let $sum:= ``[Invoked by `{ count($hits) }` functions from `{ count(distinct-values($hits?file?href)) }` modules]``&#xD;
          return  &lt;details&gt;&#xD;
                    &lt;summary&gt;{$sum}&lt;/summary&gt;&#xD;
                    &lt;ul&gt;&#xD;
                     { $hits!&lt;li&gt;{&#xD;
                       page:link-function2(?qname?uri, ?name, ?file, true()) &#xD;
                     }&lt;/li&gt; }&#xD;
                 &#xD;
                    &lt;/ul&gt;              &#xD;
                    &lt;/details&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:name>xqh:custom</xqdoc:name><xqdoc:signature>function xqh:custom ( $v as element(xqdoc:custom) ) as element(p) { &lt;p&gt;{ $v/@tag/string() }: { $v/* }&lt;/p&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>v</xqdoc:name><xqdoc:type>element(xqdoc:custom)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(p)</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:custom($v as element(xqdoc:custom))&#xD;
as element(p)&#xD;
{&#xD;
		&lt;p&gt;{ $v/@tag/string() }: { $v/* }&lt;/p&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
The @see tag provides the ability to hypertext link to an external web site, a library or main module contained in xqDoc,&#xD;
a specific function (or variable) defined in a library or main module contained in xqDoc, or arbitrary text. To link to&#xD;
an external site, use a complete URL such as http://www.xquery.com. To link to a library or main module contained in&#xD;
&#xD;
xqDoc, simply provide the URI for the library or main module. To link to a specific function (or variable) defined in an&#xD;
xqDoc library or main module, simply provide the URI for the library or main module followed by a ';' and finally the&#xD;
function or variable name. To provide a name for a link, simply include a second ';' followed by the name. To provide&#xD;
text, simply include the 'text'. Multiple @see tags can be specified (one per link or string of text).&#xD;
</xqdoc:description><xqdoc:see>http://www.xquery.com</xqdoc:see><xqdoc:see>xqdoc/xqdoc-display</xqdoc:see><xqdoc:see>xqdoc/xqdoc-display;build-link</xqdoc:see><xqdoc:see>xqdoc/xqdoc-display;$months</xqdoc:see><xqdoc:see>xqdoc/xqdoc-display;$months;month variable</xqdoc:see><xqdoc:see>http://www.xquery.com;;xquery</xqdoc:see><xqdoc:see>some text</xqdoc:see></xqdoc:comment><xqdoc:name>xqh:see</xqdoc:name><xqdoc:signature>function xqh:see ( $v as element(xqdoc:see) ) as element(span) { let $items:=tokenize($v,";") let $first:=$items[1] return &lt;span&gt; {switch(true()) case count($items) eq 3 return &lt;a href="{ $first }"&gt;{ $items[3] }&lt;/a&gt; case count($items) eq 2 return &lt;a href="{ $first }#{ $items[2] }"&gt;{ $items[2] }&lt;/a&gt; default return if(page:is-url($first)) then &lt;a href="{ $first }"&gt;{ $first }&lt;/a&gt; else $first }&lt;/span&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>v</xqdoc:name><xqdoc:type>element(xqdoc:see)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(span)</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:see($v as element(xqdoc:see))&#xD;
as element(span)&#xD;
{&#xD;
  let $items:=tokenize($v,";")&#xD;
  let $first:=$items[1]&#xD;
  return  &lt;span&gt;&#xD;
          {switch(true())&#xD;
          case count($items) eq 3 return &lt;a href="{ $first }"&gt;{ $items[3] }&lt;/a&gt;&#xD;
          case count($items) eq 2 return &lt;a href="{ $first }#{ $items[2] }"&gt;{ $items[2] }&lt;/a&gt;&#xD;
          default return if(page:is-url($first)) then &lt;a href="{ $first }"&gt;{ $first }&lt;/a&gt; else $first&#xD;
        }&lt;/span&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:name>xqh:annotations</xqdoc:name><xqdoc:signature>function xqh:annotations ( $v as element(xqdoc:annotations) ) as element(*) { &lt;details&gt; &lt;summary&gt;Annotations ({count($v/xqdoc:annotation)})&lt;/summary&gt; &lt;table class="data"&gt; &lt;tbody&gt;{ for $a in $v/xqdoc:annotation return &lt;tr&gt; &lt;td&gt; &lt;code class="function"&gt;%{ $a/@name/string() }&lt;/code&gt; &lt;/td&gt; &lt;td&gt; &lt;code class="arg"&gt;{ xqa:literals($a/xqdoc:literal) }&lt;/code&gt; &lt;/td&gt; &lt;/tr&gt; }&lt;/tbody&gt; &lt;/table&gt; &lt;/details&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>v</xqdoc:name><xqdoc:type>element(xqdoc:annotations)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(*)</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:annotations($v as element(xqdoc:annotations))&#xD;
as element(*)&#xD;
{&#xD;
		&lt;details&gt;&#xD;
			&lt;summary&gt;Annotations ({count($v/xqdoc:annotation)})&lt;/summary&gt;&#xD;
			&lt;table class="data"&gt;&#xD;
				&lt;tbody&gt;{ &#xD;
       for $a in $v/xqdoc:annotation&#xD;
       return 	&#xD;
             &lt;tr&gt;&#xD;
                &lt;td&gt;&#xD;
                  &lt;code class="function"&gt;%{ $a/@name/string() }&lt;/code&gt;&#xD;
                &lt;/td&gt;&#xD;
                &lt;td&gt;&#xD;
                  &lt;code class="arg"&gt;{ xqa:literals($a/xqdoc:literal) }&lt;/code&gt;&#xD;
                &lt;/td&gt;&#xD;
              &lt;/tr&gt;&#xD;
    }&lt;/tbody&gt;&#xD;
			&lt;/table&gt;&#xD;
		&lt;/details&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>xqh:namespaces</xqdoc:name><xqdoc:signature>function xqh:namespaces ( $namespaces as element(xqdoc:namespace)*,$model as map(*) ) as element(section) { &lt;section id="namespaces"&gt; &lt;h2&gt;Namespaces&lt;/h2&gt; &lt;p&gt;The following namespaces are defined:&lt;/p&gt; &lt;table class="data" style="float:none"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Prefix&lt;/th&gt; &lt;th&gt;Uri&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt;{ for $ns in $namespaces group by $url:=$ns/@uri order by lower-case($ns[1]/@prefix) return &lt;tr&gt; &lt;td&gt;{string($ns[1]/@prefix) }&lt;/td&gt; &lt;td&gt;{ page:link-module(string($url),$model) }&lt;/td&gt; &lt;/tr&gt; }&lt;/tbody&gt; &lt;/table&gt; &lt;/section&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>namespaces</xqdoc:name><xqdoc:type occurrence="*">element(xqdoc:namespace)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>model</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(section)</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:namespaces($namespaces as element(xqdoc:namespace)*,$model as map(*))&#xD;
as element(section)&#xD;
{&#xD;
     &lt;section id="namespaces"&gt;&#xD;
			&lt;h2&gt;Namespaces&lt;/h2&gt;&#xD;
			&lt;p&gt;The following namespaces are defined:&lt;/p&gt;&#xD;
			&lt;table class="data" style="float:none"&gt;&#xD;
				&lt;thead&gt;&#xD;
					&lt;tr&gt;&#xD;
						&lt;th&gt;Prefix&lt;/th&gt;&#xD;
						&lt;th&gt;Uri&lt;/th&gt;&#xD;
					&lt;/tr&gt;&#xD;
				&lt;/thead&gt;&#xD;
				&lt;tbody&gt;{ &#xD;
        for $ns in $namespaces&#xD;
                   group by $url:=$ns/@uri&#xD;
					order by lower-case($ns[1]/@prefix)&#xD;
          return&#xD;
						&lt;tr&gt;&#xD;
							&lt;td&gt;{string($ns[1]/@prefix) }&lt;/td&gt;&#xD;
							&lt;td&gt;{ page:link-module(string($url),$model) }&lt;/td&gt;&#xD;
						&lt;/tr&gt;&#xD;
			}&lt;/tbody&gt;&#xD;
			&lt;/table&gt;&#xD;
		&lt;/section&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:name>xqh:parameters</xqdoc:name><xqdoc:signature>function xqh:parameters ( $v as element(xqdoc:parameters) ) as element(*)* { &lt;dt class="label"&gt;Parameters&lt;/dt&gt;, &lt;dd&gt; &lt;ul&gt;{ for $p in $v/xqdoc:parameter return &lt;li&gt; { $p/xqdoc:name/string() } &lt;code class="as"&gt;&amp;#160;as&amp;#160;&lt;/code&gt; &lt;code class="return-type"&gt; { $p/xqdoc:type/string() } { $p/xqdoc:type/@occurrence/string() } &lt;/code&gt; { page:comment-for(string($p/xqdoc:name),$v) } &lt;/li&gt; }&lt;/ul&gt; &lt;/dd&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>v</xqdoc:name><xqdoc:type>element(xqdoc:parameters)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">element(*)</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:parameters($v as element(xqdoc:parameters))&#xD;
as element(*)*&#xD;
{&#xD;
	&lt;dt class="label"&gt;Parameters&lt;/dt&gt;,&#xD;
		&lt;dd&gt;&#xD;
			&lt;ul&gt;{&#xD;
         for $p in $v/xqdoc:parameter&#xD;
         return 	&lt;li&gt;&#xD;
                    { $p/xqdoc:name/string() }&#xD;
                    &lt;code class="as"&gt;&amp;#160;as&amp;#160;&lt;/code&gt;&#xD;
                    &lt;code class="return-type"&gt;&#xD;
                      { $p/xqdoc:type/string() }&#xD;
                      { $p/xqdoc:type/@occurrence/string() }&#xD;
                    &lt;/code&gt;&#xD;
                    {   page:comment-for(string($p/xqdoc:name),$v) }&#xD;
                &lt;/li&gt;&#xD;
    }&lt;/ul&gt;&#xD;
		&lt;/dd&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:name>xqh:return</xqdoc:name><xqdoc:signature>function xqh:return ( $f as element(xqdoc:function) ) as element(*)* { &lt;dt class="label"&gt;Return&lt;/dt&gt;, &lt;dd&gt; &lt;ul&gt; &lt;li&gt; &lt;code class="return-type"&gt; { $f/xqdoc:return/xqdoc:type/(string(),@occurrence/string()) } &lt;/code&gt; {for $comment in $f/xqdoc:comment/xqdoc:return return " " || $comment/(node()|text()) } &lt;/li&gt; &lt;/ul&gt; &lt;/dd&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>f</xqdoc:name><xqdoc:type>element(xqdoc:function)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">element(*)</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:return($f as element(xqdoc:function))&#xD;
as element(*)*&#xD;
{&#xD;
		&lt;dt class="label"&gt;Return&lt;/dt&gt;,&#xD;
		&lt;dd&gt;&#xD;
			&lt;ul&gt;&#xD;
				&lt;li&gt;&#xD;
					&lt;code class="return-type"&gt;&#xD;
					{ $f/xqdoc:return/xqdoc:type/(string(),@occurrence/string()) }&#xD;
					&lt;/code&gt;&#xD;
					{for $comment in $f/xqdoc:comment/xqdoc:return&#xD;
					return " " || $comment/(node()|text())&#xD;
        }&#xD;
				&lt;/li&gt;&#xD;
			&lt;/ul&gt;&#xD;
		&lt;/dd&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:name>xqh:error</xqdoc:name><xqdoc:signature>function xqh:error ( $v as element(xqdoc:error) ) as element(*)* { &lt;dt class="label"&gt;Error&lt;/dt&gt;, &lt;dd&gt; { $v/(node()|text()) } &lt;/dd&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>v</xqdoc:name><xqdoc:type>element(xqdoc:error)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">element(*)</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:error($v as element(xqdoc:error))&#xD;
as element(*)*{&#xD;
		&lt;dt class="label"&gt;Error&lt;/dt&gt;,&#xD;
		&lt;dd&gt;&#xD;
		{ $v/(node()|text()) }&#xD;
		&lt;/dd&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:name>xqh:function-signature</xqdoc:name><xqdoc:signature>function xqh:function-signature ( $v as element(xqdoc:function) ) as element(div) { &lt;div class="proto"&gt; &lt;code class="function"&gt;{ $v/xqdoc:name/string() }&lt;/code&gt; ( { for $p in $v/xqdoc:parameters/xqdoc:parameter return ( &lt;code class="arg"&gt;${ $p/xqdoc:name/string() }&lt;/code&gt; ,xqh:as($p/xqdoc:type) ,if(not($p is $v/xqdoc:parameters/xqdoc:parameter[last()] )) then ", " else "" ) ,")" ,xqh:as($v/xqdoc:return/xqdoc:type) } &lt;/div&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>v</xqdoc:name><xqdoc:type>element(xqdoc:function)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(div)</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:function-signature($v as element(xqdoc:function))&#xD;
as element(div){&#xD;
		&lt;div class="proto"&gt;&#xD;
			&lt;code class="function"&gt;{ $v/xqdoc:name/string() }&lt;/code&gt;&#xD;
		  ( &#xD;
			{&#xD;
        for $p in $v/xqdoc:parameters/xqdoc:parameter&#xD;
          return	(&#xD;
            &lt;code class="arg"&gt;${ $p/xqdoc:name/string() }&lt;/code&gt;&#xD;
            ,xqh:as($p/xqdoc:type)&#xD;
            ,if(not($p is $v/xqdoc:parameters/xqdoc:parameter[last()] )) then ", " else "" &#xD;
          )&#xD;
       ,")"&#xD;
       ,xqh:as($v/xqdoc:return/xqdoc:type)&#xD;
     }&#xD;
      &lt;/div&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:name>xqh:as</xqdoc:name><xqdoc:signature>function xqh:as ( $t as element(xqdoc:type)? ) as element(code)* { if(exists($t)) then ( &lt;code class="as"&gt;&amp;#160;as&amp;#160;&lt;/code&gt; ,&lt;code class="type"&gt; { string($t) } { $t/@occurrence/string() } &lt;/code&gt; ) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>t</xqdoc:name><xqdoc:type occurrence="?">element(xqdoc:type)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">element(code)</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:as($t as element(xqdoc:type)?)&#xD;
as element(code)*&#xD;
{&#xD;
  if(exists($t))&#xD;
  then (&#xD;
    &lt;code class="as"&gt;&amp;#160;as&amp;#160;&lt;/code&gt;&#xD;
    ,&lt;code class="type"&gt;&#xD;
        { string($t)  }&#xD;
        { $t/@occurrence/string() }&#xD;
    &lt;/code&gt;&#xD;
  )&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:name>xqh:description</xqdoc:name><xqdoc:signature>function xqh:description ( $v as element(xqdoc:description) ) as element(*)* { &lt;dt class="label"&gt;Summary&lt;/dt&gt;, &lt;dd&gt; { $v/(node()|text()) } &lt;/dd&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>v</xqdoc:name><xqdoc:type>element(xqdoc:description)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">element(*)</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:description($v as element(xqdoc:description))&#xD;
as element(*)*&#xD;
{&#xD;
  	&lt;dt class="label"&gt;Summary&lt;/dt&gt;,&#xD;
		&lt;dd&gt;&#xD;
			{ $v/(node()|text()) }&#xD;
		&lt;/dd&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
tags list</xqdoc:description></xqdoc:comment><xqdoc:name>xqh:tags</xqdoc:name><xqdoc:signature>function xqh:tags ( $title as xs:string,$tags as element(*)* ) as element(dl)? { if($tags) then &lt;dl&gt; &lt;dt title="{count($tags)}"&gt;{ $title }&lt;/dt&gt; &lt;dd&gt; &lt;ul&gt;{ $tags ! &lt;li&gt;{ xqh:tag(.) }&lt;/li&gt; }&lt;/ul&gt; &lt;/dd&gt; &lt;/dl&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>title</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>tags</xqdoc:name><xqdoc:type occurrence="*">element(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="?">element(dl)</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:tags($title as xs:string,$tags as element(*)*)&#xD;
as element(dl)?{ &#xD;
  if($tags)&#xD;
  then &lt;dl&gt;&#xD;
        &lt;dt title="{count($tags)}"&gt;{ $title  }&lt;/dt&gt;&#xD;
        &lt;dd&gt;&#xD;
          &lt;ul&gt;{ $tags ! &lt;li&gt;{ xqh:tag(.) }&lt;/li&gt; }&lt;/ul&gt;&#xD;
        &lt;/dd&gt;&#xD;
      &lt;/dl&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description><span/></xqdoc:description></xqdoc:comment><xqdoc:name>xqh:tag</xqdoc:name><xqdoc:signature>function xqh:tag ( $tag as element(*) ) as element(span)? { let $name:=if($tag instance of element(xqdoc:custom)) then $tag/@tag/string() else local-name($tag) return typeswitch ($tag) case element (xqdoc:param) | element(xqdoc:return) return () (: ignore :) case element (xqdoc:see) return xqh:see($tag) case element (xqdoc:author) return &lt;span&gt;{string($tag)}&lt;/span&gt; default return &lt;span&gt; &lt;span class="badge badge-pill badge-light" &gt;@{ $name }&lt;/span&gt;: &lt;span&gt;{ string($tag) }&lt;/span&gt; &lt;/span&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>tag</xqdoc:name><xqdoc:type>element(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="?">element(span)</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:tag($tag as element(*))&#xD;
as element(span)?{&#xD;
  let $name:=if($tag instance of element(xqdoc:custom))&#xD;
             then $tag/@tag/string()&#xD;
             else local-name($tag)&#xD;
&#xD;
return typeswitch ($tag)&#xD;
       case element (xqdoc:param) | element(xqdoc:return)&#xD;
          return () (: ignore :)&#xD;
&#xD;
       case element (xqdoc:see) &#xD;
          return xqh:see($tag)&#xD;
&#xD;
       case element (xqdoc:author) &#xD;
          return &lt;span&gt;{string($tag)}&lt;/span&gt;&#xD;
&#xD;
       default return&#xD;
            &lt;span&gt;&#xD;
                &lt;span class="badge badge-pill badge-light" &gt;@{ $name }&lt;/span&gt;:&#xD;
                &lt;span&gt;{ string($tag) }&lt;/span&gt;&#xD;
            &lt;/span&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>xqh:restxq</xqdoc:name><xqdoc:signature>function xqh:restxq ( $xqd,$file as map(*) ) as element(div) { let $ns:= $file?namespaces let $rest:=filter($xqd//xqdoc:annotation,xqa:is-rest(?,"path",$ns)) return &lt;div class="div2"&gt; &lt;h2&gt;&lt;a id="restxq"/&gt;6 RestXQ&lt;/h2&gt; {if(empty($rest)) then &lt;p&gt;None&lt;/p&gt; else( &lt;p&gt;Paths defined {count($rest)}.&lt;/p&gt;, &lt;table class="data"&gt; &lt;thead&gt;&lt;tr&gt; &lt;th&gt;Path&lt;/th&gt; &lt;th&gt;Method&lt;/th&gt; &lt;th&gt;Function&lt;/th&gt; &lt;/tr&gt;&lt;/thead&gt; &lt;tbody&gt;{ for $r in $rest let $path:= $r/xqdoc:literal/string() let $obj:=xqa:name-detail($r/../..,$file) (: map{ "given": $name/string(), "uri": $qmap?uri, "name": $lname, "xqdoc": $e} :) let $methods:=xqa:methods($obj?xqdoc//xqdoc:annotation, $file?namespaces) order by $path return &lt;tr&gt; &lt;td&gt;{ $r/xqdoc:literal/string() }&lt;/td&gt; &lt;td&gt;{$methods!page:link-restxq($path,. , true())}&lt;/td&gt; &lt;td&gt;{ page:link-function2($obj?uri, $obj?name, $file, true()) }&lt;/td&gt; &lt;/tr&gt; }&lt;/tbody&gt; &lt;/table&gt;) } &lt;/div&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>xqd</xqdoc:name></xqdoc:parameter><xqdoc:parameter><xqdoc:name>file</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(div)</xqdoc:type></xqdoc:return><xqdoc:body>function xqh:restxq($xqd,$file as map(*))&#xD;
as element(div)&#xD;
{&#xD;
   let $ns:= $file?namespaces&#xD;
   let $rest:=filter($xqd//xqdoc:annotation,xqa:is-rest(?,"path",$ns))&#xD;
   return &lt;div class="div2"&gt;&#xD;
			&lt;h2&gt;&lt;a id="restxq"/&gt;6 RestXQ&lt;/h2&gt;&#xD;
      {if(empty($rest)) then&#xD;
            &lt;p&gt;None&lt;/p&gt;&#xD;
       else(&#xD;
      &lt;p&gt;Paths defined {count($rest)}.&lt;/p&gt;,&#xD;
      &lt;table class="data"&gt;&#xD;
      &lt;thead&gt;&lt;tr&gt;&#xD;
        &lt;th&gt;Path&lt;/th&gt;&#xD;
         &lt;th&gt;Method&lt;/th&gt;&#xD;
        &lt;th&gt;Function&lt;/th&gt;&#xD;
      &lt;/tr&gt;&lt;/thead&gt;&#xD;
      &lt;tbody&gt;{ for $r in $rest&#xD;
               let $path:= $r/xqdoc:literal/string()&#xD;
               let $obj:=xqa:name-detail($r/../..,$file)  (: map{ "given": $name/string(), "uri": $qmap?uri, "name": $lname, "xqdoc": $e} :)&#xD;
               let $methods:=xqa:methods($obj?xqdoc//xqdoc:annotation, $file?namespaces) &#xD;
               order by $path&#xD;
              return &lt;tr&gt;&#xD;
                &lt;td&gt;{  $r/xqdoc:literal/string() }&lt;/td&gt;&#xD;
                &lt;td&gt;{$methods!page:link-restxq($path,. , true())}&lt;/td&gt;&#xD;
                &lt;td&gt;{  page:link-function2($obj?uri, $obj?name, $file, true())  }&lt;/td&gt;&#xD;
                &lt;/tr&gt;&#xD;
    }&lt;/tbody&gt;&#xD;
      &lt;/table&gt;)&#xD;
    }&#xD;
    &lt;/div&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
run function when value is non empty</xqdoc:description></xqdoc:comment><xqdoc:name>xqh:when</xqdoc:name><xqdoc:signature>function xqh:when ( $value,$fun as function(*) ) { if($value) then $fun($value) else () }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>value</xqdoc:name></xqdoc:parameter><xqdoc:parameter><xqdoc:name>fun</xqdoc:name><xqdoc:type>function(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:body>function xqh:when($value,$fun as function(*))&#xD;
{&#xD;
 if($value) then $fun($value) else ()&#xD;
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>