<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2025-05-17T18:35:19.705+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>quodatum:xqdoca.generator.index</xqdoc:uri><xqdoc:name>xqhtml</xqdoc:name><xqdoc:comment><xqdoc:description><p>Library to support html5 rendering of xqdoc</p></xqdoc:description><xqdoc:author>Andy Bunce, Quodatum, License: Apache-2.0</xqdoc:author><xqdoc:custom tag="copyright">Copyright (c) 2019-2026 Quodatum Ltd</xqdoc:custom></xqdoc:comment><xqdoc:body>xquery version "3.1";&#xD;
(:~&#xD;
 &lt;p&gt;Library to support html5 rendering of xqdoc&lt;/p&gt;&#xD;
 @copyright Copyright (c) 2019-2026 Quodatum Ltd&#xD;
 @author Andy Bunce, Quodatum, License: Apache-2.0&#xD;
:)&#xD;
 &#xD;
(:~&#xD;
 : Generate XQuery  documentation in html&#xD;
 :)&#xD;
module namespace xqhtml = 'quodatum:xqdoca.generator.index';&#xD;
&#xD;
import module namespace tree = 'quodatum:data.tree' at "../lib/tree.xqm";&#xD;
import module namespace xqd = 'quodatum:xqdoca.model' at "../lib/model.xqm";&#xD;
import module namespace xqa = 'quodatum:xqdoca.model.annotations' at "../lib/annotations.xqm";&#xD;
import module namespace page = 'quodatum:xqdoca.page'  at "../lib/xqdoc-page.xqm";&#xD;
&#xD;
declare namespace xqdoc="http://www.xqdoc.org/1.0";&#xD;
declare namespace xqdoca="https://github.com/Quodatum/xqdoca";&#xD;
&#xD;
(:~ left arrow :)&#xD;
declare variable $xqhtml:larr:="&amp;#8598;";&#xD;
&#xD;
(:~ transform files to html&#xD;
 : @param $opts  keys: resources &#xD;
 : "project": "vue-poc"&#xD;
 :)&#xD;
declare &#xD;
%xqdoca:global("report","Index of sources")&#xD;
%xqdoca:output("index.html","xhtml") &#xD;
function xqhtml:index-html($model as map(*),&#xD;
                            $opts as map(*)&#xD;
                            )&#xD;
as document-node()                            &#xD;
{&#xD;
 let $sections:=(&#xD;
                 xqhtml:summary($model,$opts),&#xD;
                 xqhtml:modules("main_mods" ,"XQuery Main",$model?files[?xqdoc/xqdoc:module/@type="main"],$model),&#xD;
                 xqhtml:modules("library_mods" ,"XQuery Library",$model?files[?xqdoc/xqdoc:module/@type="library"],$model),&#xD;
                 xqhtml:files($model,$opts),&#xD;
                 xqhtml:annot($model,$opts)&#xD;
             )&#xD;
let $links:= page:related-buttons("global","report", $opts)                 &#xD;
let $d:=&lt;div&gt;&#xD;
             &lt;h1&gt;&#xD;
                 Project &lt;span class="badge badge-info"&gt;&#xD;
                      { $opts?project }&#xD;
                  &lt;/span&gt;&#xD;
                  &amp;#160;XQuery source documentation &#xD;
              &lt;/h1&gt;&#xD;
             { page:toc($opts?project,$sections,$links) }&#xD;
        &lt;/div&gt;&#xD;
return document{ page:wrap(($d,$sections), $opts ) }&#xD;
};&#xD;
&#xD;
&#xD;
&#xD;
declare function xqhtml:summary($model as map(*),$opts as map(*))&#xD;
as element(section)&#xD;
{&#xD;
  &lt;section id="summary"&gt;&#xD;
    &lt;h2&gt;Summary&lt;/h2&gt;&#xD;
     &#xD;
    &lt;p&gt;The project &#xD;
    &lt;span class="badge badge-info"&gt;{ $opts?project }&lt;/span&gt; contains&#xD;
    { count($model?files) } XQuery source files, and uses&#xD;
 { $model?files?annotations?annotation?uri=&gt;distinct-values()=&gt;count() } annotation namespaces.&#xD;
    &lt;/p&gt;&#xD;
     &lt;p&gt;This document was built from source folder &lt;kbd&gt;{ $model?base-uri }&lt;/kbd&gt; on&#xD;
     { page:date()}.&lt;/p&gt;&#xD;
   { page:related-links("global","index.html", $opts) }&#xD;
 &lt;/section&gt;&#xD;
};&#xD;
&#xD;
&#xD;
(:~ &#xD;
 : summary of all annotations  in project&#xD;
 :)&#xD;
declare function xqhtml:annot($model as map(*), $opts as map(*))&#xD;
as element(section)&#xD;
{&#xD;
   let $ns-map:=map:merge(&#xD;
                        for $a in $model?files?annotations&#xD;
                        group by $uri:=$a?annotation?uri&#xD;
                         return map:entry($uri,$a)&#xD;
                       )&#xD;
   return &lt;section id="annotation"&gt;&#xD;
              &lt;h2&gt;{ ``[Annotation namespaces (`{ map:size($ns-map) }`)]`` }&lt;/h2&gt;&#xD;
              &lt;p&gt; A total of {count( $model?files?annotations)} annotations are defined. &#xD;
              &lt;/p&gt;{&#xD;
               for $ns in map:keys($ns-map)&#xD;
               order by $ns&#xD;
               return &lt;section id="{$ns}"&gt;&#xD;
                        &lt;h3&gt;{ $ns }&lt;/h3&gt;&#xD;
                        &lt;div&gt;&#xD;
                        {for $a in $ns-map?($ns)&#xD;
                        group by $name:=$a?annotation?name&#xD;
                        order by lower-case($name)&#xD;
                        return &lt;span style="margin-right:1em;"&gt;&#xD;
                                  &lt;a href="annotations.html#{{{ $ns }}}{ $name }" &gt;{$name}&lt;/a&gt;&#xD;
                                  &lt;span class="badge badge-info"&gt;{count($a)}&lt;/span&gt;&#xD;
                               &lt;/span&gt;&#xD;
                      }&lt;/div&gt;&#xD;
                     &lt;/section&gt;&#xD;
      }&lt;/section&gt;&#xD;
}; &#xD;
               &#xD;
(:~ create module table section :)&#xD;
declare function xqhtml:modules($id,$title,$mods, $model)&#xD;
as element(section)&#xD;
{&#xD;
 &lt;section id="{ $id }"&gt;&#xD;
  &#xD;
    &lt;h2&gt;{ ``[ `{ $title }` (`{ count($mods) }`)]`` }&lt;/h2&gt;&#xD;
    { xqhtml:modtable($mods,$model) }&#xD;
&#xD;
&lt;/section&gt;&#xD;
};&#xD;
&#xD;
(:~ file summary section :)&#xD;
declare function xqhtml:files($model as map(*),$opts as map(*))&#xD;
as element(section)&#xD;
{&#xD;
       let $t:=tree:build( $model?files?path)&#xD;
       let $fmap:=map:merge($model?files!map:entry(?path,?href))&#xD;
       let $f:=function($pos,$el){&#xD;
          if($el/@target) then&#xD;
            let $href:=substring($el/@target,2)&#xD;
            let $a:=map:get($fmap,$href) &#xD;
            return &lt;a href="{ $a }index.html"&gt;{ $el/@name/string() }&lt;/a&gt;&#xD;
          else&#xD;
             $el/@name/string() &#xD;
       }&#xD;
       return&#xD;
      &lt;section  id="file"&gt;&#xD;
	      &lt;h2&gt;{ ``[File view (`{ count($model?files) }`)]`` }&lt;/h2&gt;&#xD;
	   &#xD;
	      {&#xD;
	        &lt;ul class="tree"&gt;&#xD;
	          { $t/*!page:tree-list2(.,(),$f,99) }&#xD;
	       &lt;/ul&gt;&#xD;
	      }&#xD;
	    &lt;/section&gt;&#xD;
};&#xD;
&#xD;
declare function xqhtml:modtable($files as map(*)*,$model as map(*))&#xD;
as element(div)&#xD;
{&#xD;
  &lt;div&gt;{if (count($files)=0) then&#xD;
          &lt;p&gt;None&lt;/p&gt;&#xD;
        else&#xD;
     &lt;table class="data"&gt;&#xD;
           &lt;colgroup&gt;&#xD;
               &lt;col  style="width: 35%;"/&gt;&#xD;
                &lt;col  style="width: 10%;"/&gt;&#xD;
                &lt;col  style="width: 25%;"/&gt;&#xD;
                &lt;col  style="width: 10%;"/&gt;&#xD;
                &lt;col  style="width: 10%;"/&gt;&#xD;
		            &lt;col  style="width: 10%;"/&gt;&#xD;
		    &lt;/colgroup&gt;&#xD;
		    &lt;thead&gt;&#xD;
		    &lt;tr&gt;&#xD;
          &lt;th&gt;Uri&lt;/th&gt;&#xD;
          &lt;th&gt;Prefix&lt;/th&gt;&#xD;
          &#xD;
          &lt;th&gt;Description&lt;/th&gt;&#xD;
          &lt;th&gt;Use&lt;/th&gt;&#xD;
          &lt;th title="Annotations"&gt;A&lt;/th&gt;&#xD;
          &lt;th&gt;Metrics&lt;/th&gt;&#xD;
		    &lt;/tr&gt;&#xD;
		    &lt;/thead&gt;&#xD;
    &lt;tbody&gt;&#xD;
   &#xD;
       { for $file  at $pos in $files&#xD;
        let $type:=xqd:file-parsed-type($file)&#xD;
         order by $type, $file?namespace&#xD;
         let $annots:= for $a in $file?annotations&#xD;
                       group by $ns:=$a?annotation?uri&#xD;
                       order by $ns&#xD;
                       return $ns&#xD;
         let $desc:= $file?xqdoc/xqdoc:module/xqdoc:comment/xqdoc:description=&gt;string()&#xD;
        return  &lt;tr&gt;&#xD;
                &lt;td style="word-break:break-all;"&gt;{page:link-module($file) }&lt;/td&gt;&#xD;
                &lt;td title="prefix"&gt;{ $file?prefix}&lt;/td&gt;&#xD;
                 &lt;td title="{ page:line-wrap($desc,60) }"&gt;{ xqhtml:truncate-text($desc,50) }&lt;/td&gt;&#xD;
                 &lt;td &gt;{   xqhtml:file-usage($file,$model) }&lt;/td&gt;&#xD;
&#xD;
                 &lt;td title="{ $annots }"&gt;{ xqa:badges($file?xqdoc//xqdoc:annotation, $file,page:badge#3) }&lt;/td&gt;       &#xD;
              &#xD;
                 &lt;td style="text-align: right"&gt;&#xD;
                 &lt;div&gt;V#{$file?xqdoc//xqdoc:variable=&gt;count() }&lt;/div&gt;&#xD;
                 &lt;div&gt;F#{$file?xqdoc//xqdoc:function=&gt;count() }&lt;/div&gt;&#xD;
                 &lt;/td&gt;&#xD;
              &lt;/tr&gt;&#xD;
        }&#xD;
    &lt;/tbody&gt;&#xD;
    &lt;/table&gt;&#xD;
  }&lt;/div&gt;&#xD;
};&#xD;
&#xD;
(:~ usage (import) info&#xD;
 :)&#xD;
declare &#xD;
function xqhtml:file-usage($file as map(*),$model as map(*))                       &#xD;
as element(div)&#xD;
{ &#xD;
   let $x:=xqd:import-count($file?xqdoc,$model)&#xD;
   return switch( xqd:file-parsed-type($file))&#xD;
   case "main"    &#xD;
   					return &lt;div&gt;&#xD;
   					          &lt;div title="Main module" class="badge badge-info"&gt;Main&lt;/div&gt;&#xD;
   					          &lt;div title="imports" style="float:right"&gt;{ $xqhtml:larr }{ count($x?imports)}&lt;/div&gt;&#xD;
   					       &lt;/div&gt;&#xD;
   					&#xD;
   case "library" &#xD;
             return &lt;div&gt;&#xD;
                        &lt;div title="imported by"&gt;{ count($x?importedby) }&lt;span&gt;{ $xqhtml:larr }&lt;/span&gt;&lt;/div&gt;&#xD;
                        &lt;div title="Library module" class="badge badge-info"&gt;Library&lt;/div&gt;&#xD;
                        &lt;div title="imports" style="float:right"&gt;{ $xqhtml:larr }{ count($x?imports)}&lt;/div&gt;&#xD;
                    &lt;/div&gt;&#xD;
   &#xD;
   default        return &lt;div&gt;#ERROR&lt;/div&gt;&#xD;
};&#xD;
&#xD;
(:~ chop long text :)&#xD;
declare &#xD;
function xqhtml:truncate-text($text as xs:string,$max as xs:integer) &#xD;
as xs:string{&#xD;
if(string-length($text) lt $max)&#xD;
then $text&#xD;
else substring($text,1, $max -3) || "..."&#xD;
};  </xqdoc:body></xqdoc:module><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>quodatum:data.tree</xqdoc:uri><xqdoc:at>../lib/tree.xqm</xqdoc:at></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>quodatum:xqdoca.model</xqdoc:uri><xqdoc:at>../lib/model.xqm</xqdoc:at></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>quodatum:xqdoca.model.annotations</xqdoc:uri><xqdoc:at>../lib/annotations.xqm</xqdoc:at></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>quodatum:xqdoca.page</xqdoc:uri><xqdoc:at>../lib/xqdoc-page.xqm</xqdoc:at></xqdoc:import></xqdoc:imports><xqdoc:namespaces><xqdoc:namespace prefix="xqhtml" uri="quodatum:xqdoca.generator.index"/><xqdoc:namespace prefix="tree" uri="quodatum:data.tree"/><xqdoc:namespace prefix="xqd" uri="quodatum:xqdoca.model"/><xqdoc:namespace prefix="xqa" uri="quodatum:xqdoca.model.annotations"/><xqdoc:namespace prefix="page" uri="quodatum:xqdoca.page"/><xqdoc:namespace prefix="xqdoc" uri="http://www.xqdoc.org/1.0"/><xqdoc:namespace prefix="xqdoca" uri="https://github.com/Quodatum/xqdoca"/><xqdoc:namespace prefix="map" uri="http://www.w3.org/2005/xpath-functions/map"/><xqdoc:namespace prefix="xs" uri="http://www.w3.org/2001/XMLSchema"/></xqdoc:namespaces><xqdoc:variables><xqdoc:variable><xqdoc:name>xqhtml:larr</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
left arrow</xqdoc:description></xqdoc:comment><xqdoc:body>variable $xqhtml:larr:="&amp;#8598;"</xqdoc:body></xqdoc:variable></xqdoc:variables><xqdoc:functions><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
transform files to html&#xD;
"project": "vue-poc"&#xD;
</xqdoc:description><xqdoc:param>$opts  keys: resources</xqdoc:param></xqdoc:comment><xqdoc:name>xqhtml:index-html</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="xqdoca:global"><xqdoc:literal type="xs:string">report</xqdoc:literal><xqdoc:literal type="xs:string">Index of sources</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="xqdoca:output"><xqdoc:literal type="xs:string">index.html</xqdoc:literal><xqdoc:literal type="xs:string">xhtml</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>function xqhtml:index-html ( $model as map(*), $opts as map(*) ) as document-node() { let $sections:=( xqhtml:summary($model,$opts), xqhtml:modules("main_mods" ,"XQuery Main",$model?files[?xqdoc/xqdoc:module/@type="main"],$model), xqhtml:modules("library_mods" ,"XQuery Library",$model?files[?xqdoc/xqdoc:module/@type="library"],$model), xqhtml:files($model,$opts), xqhtml:annot($model,$opts) ) let $links:= page:related-buttons("global","report", $opts) let $d:=&lt;div&gt; &lt;h1&gt; Project &lt;span class="badge badge-info"&gt; { $opts?project } &lt;/span&gt; &amp;#160;XQuery source documentation &lt;/h1&gt; { page:toc($opts?project,$sections,$links) } &lt;/div&gt; return document{ page:wrap(($d,$sections), $opts ) } }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>model</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>document-node()</xqdoc:type></xqdoc:return><xqdoc:body>function xqhtml:index-html($model as map(*),&#xD;
                            $opts as map(*)&#xD;
                            )&#xD;
as document-node()                            &#xD;
{&#xD;
 let $sections:=(&#xD;
                 xqhtml:summary($model,$opts),&#xD;
                 xqhtml:modules("main_mods" ,"XQuery Main",$model?files[?xqdoc/xqdoc:module/@type="main"],$model),&#xD;
                 xqhtml:modules("library_mods" ,"XQuery Library",$model?files[?xqdoc/xqdoc:module/@type="library"],$model),&#xD;
                 xqhtml:files($model,$opts),&#xD;
                 xqhtml:annot($model,$opts)&#xD;
             )&#xD;
let $links:= page:related-buttons("global","report", $opts)                 &#xD;
let $d:=&lt;div&gt;&#xD;
             &lt;h1&gt;&#xD;
                 Project &lt;span class="badge badge-info"&gt;&#xD;
                      { $opts?project }&#xD;
                  &lt;/span&gt;&#xD;
                  &amp;#160;XQuery source documentation &#xD;
              &lt;/h1&gt;&#xD;
             { page:toc($opts?project,$sections,$links) }&#xD;
        &lt;/div&gt;&#xD;
return document{ page:wrap(($d,$sections), $opts ) }&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>xqhtml:summary</xqdoc:name><xqdoc:signature>function xqhtml:summary ( $model as map(*),$opts as map(*) ) as element(section) { &lt;section id="summary"&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;The project &lt;span class="badge badge-info"&gt;{ $opts?project }&lt;/span&gt; contains { count($model?files) } XQuery source files, and uses { $model?files?annotations?annotation?uri=&gt;distinct-values()=&gt;count() } annotation namespaces. &lt;/p&gt; &lt;p&gt;This document was built from source folder &lt;kbd&gt;{ $model?base-uri }&lt;/kbd&gt; on { page:date()}.&lt;/p&gt; { page:related-links("global","index.html", $opts) } &lt;/section&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>model</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(section)</xqdoc:type></xqdoc:return><xqdoc:body>function xqhtml:summary($model as map(*),$opts as map(*))&#xD;
as element(section)&#xD;
{&#xD;
  &lt;section id="summary"&gt;&#xD;
    &lt;h2&gt;Summary&lt;/h2&gt;&#xD;
     &#xD;
    &lt;p&gt;The project &#xD;
    &lt;span class="badge badge-info"&gt;{ $opts?project }&lt;/span&gt; contains&#xD;
    { count($model?files) } XQuery source files, and uses&#xD;
 { $model?files?annotations?annotation?uri=&gt;distinct-values()=&gt;count() } annotation namespaces.&#xD;
    &lt;/p&gt;&#xD;
     &lt;p&gt;This document was built from source folder &lt;kbd&gt;{ $model?base-uri }&lt;/kbd&gt; on&#xD;
     { page:date()}.&lt;/p&gt;&#xD;
   { page:related-links("global","index.html", $opts) }&#xD;
 &lt;/section&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
summary of all annotations  in project&#xD;
</xqdoc:description></xqdoc:comment><xqdoc:name>xqhtml:annot</xqdoc:name><xqdoc:signature>function xqhtml:annot ( $model as map(*), $opts as map(*) ) as element(section) { let $ns-map:=map:merge( for $a in $model?files?annotations group by $uri:=$a?annotation?uri return map:entry($uri,$a) ) return &lt;section id="annotation"&gt; &lt;h2&gt;{ ``[Annotation namespaces (`{ map:size($ns-map) }`)]`` }&lt;/h2&gt; &lt;p&gt; A total of {count( $model?files?annotations)} annotations are defined. &lt;/p&gt;{ for $ns in map:keys($ns-map) order by $ns return &lt;section id="{$ns}"&gt; &lt;h3&gt;{ $ns }&lt;/h3&gt; &lt;div&gt; {for $a in $ns-map?($ns) group by $name:=$a?annotation?name order by lower-case($name) return &lt;span style="margin-right:1em;"&gt; &lt;a href="annotations.html#{{{ $ns }}}{ $name }" &gt;{$name}&lt;/a&gt; &lt;span class="badge badge-info"&gt;{count($a)}&lt;/span&gt; &lt;/span&gt; }&lt;/div&gt; &lt;/section&gt; }&lt;/section&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>model</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(section)</xqdoc:type></xqdoc:return><xqdoc:body>function xqhtml:annot($model as map(*), $opts as map(*))&#xD;
as element(section)&#xD;
{&#xD;
   let $ns-map:=map:merge(&#xD;
                        for $a in $model?files?annotations&#xD;
                        group by $uri:=$a?annotation?uri&#xD;
                         return map:entry($uri,$a)&#xD;
                       )&#xD;
   return &lt;section id="annotation"&gt;&#xD;
              &lt;h2&gt;{ ``[Annotation namespaces (`{ map:size($ns-map) }`)]`` }&lt;/h2&gt;&#xD;
              &lt;p&gt; A total of {count( $model?files?annotations)} annotations are defined. &#xD;
              &lt;/p&gt;{&#xD;
               for $ns in map:keys($ns-map)&#xD;
               order by $ns&#xD;
               return &lt;section id="{$ns}"&gt;&#xD;
                        &lt;h3&gt;{ $ns }&lt;/h3&gt;&#xD;
                        &lt;div&gt;&#xD;
                        {for $a in $ns-map?($ns)&#xD;
                        group by $name:=$a?annotation?name&#xD;
                        order by lower-case($name)&#xD;
                        return &lt;span style="margin-right:1em;"&gt;&#xD;
                                  &lt;a href="annotations.html#{{{ $ns }}}{ $name }" &gt;{$name}&lt;/a&gt;&#xD;
                                  &lt;span class="badge badge-info"&gt;{count($a)}&lt;/span&gt;&#xD;
                               &lt;/span&gt;&#xD;
                      }&lt;/div&gt;&#xD;
                     &lt;/section&gt;&#xD;
      }&lt;/section&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="4"><xqdoc:comment><xqdoc:description>&#xD;
create module table section</xqdoc:description></xqdoc:comment><xqdoc:name>xqhtml:modules</xqdoc:name><xqdoc:signature>function xqhtml:modules ( $id,$title,$mods, $model ) as element(section) { &lt;section id="{ $id }"&gt; &lt;h2&gt;{ ``[ `{ $title }` (`{ count($mods) }`)]`` }&lt;/h2&gt; { xqhtml:modtable($mods,$model) } &lt;/section&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>id</xqdoc:name></xqdoc:parameter><xqdoc:parameter><xqdoc:name>title</xqdoc:name></xqdoc:parameter><xqdoc:parameter><xqdoc:name>mods</xqdoc:name></xqdoc:parameter><xqdoc:parameter><xqdoc:name>model</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(section)</xqdoc:type></xqdoc:return><xqdoc:body>function xqhtml:modules($id,$title,$mods, $model)&#xD;
as element(section)&#xD;
{&#xD;
 &lt;section id="{ $id }"&gt;&#xD;
  &#xD;
    &lt;h2&gt;{ ``[ `{ $title }` (`{ count($mods) }`)]`` }&lt;/h2&gt;&#xD;
    { xqhtml:modtable($mods,$model) }&#xD;
&#xD;
&lt;/section&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
file summary section</xqdoc:description></xqdoc:comment><xqdoc:name>xqhtml:files</xqdoc:name><xqdoc:signature>function xqhtml:files ( $model as map(*),$opts as map(*) ) as element(section) { let $t:=tree:build( $model?files?path) let $fmap:=map:merge($model?files!map:entry(?path,?href)) let $f:=function($pos,$el){ if($el/@target) then let $href:=substring($el/@target,2) let $a:=map:get($fmap,$href) return &lt;a href="{ $a }index.html"&gt;{ $el/@name/string() }&lt;/a&gt; else $el/@name/string() } return &lt;section id="file"&gt; &lt;h2&gt;{ ``[File view (`{ count($model?files) }`)]`` }&lt;/h2&gt; { &lt;ul class="tree"&gt; { $t/*!page:tree-list2(.,(),$f,99) } &lt;/ul&gt; } &lt;/section&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>model</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(section)</xqdoc:type></xqdoc:return><xqdoc:body>function xqhtml:files($model as map(*),$opts as map(*))&#xD;
as element(section)&#xD;
{&#xD;
       let $t:=tree:build( $model?files?path)&#xD;
       let $fmap:=map:merge($model?files!map:entry(?path,?href))&#xD;
       let $f:=function($pos,$el){&#xD;
          if($el/@target) then&#xD;
            let $href:=substring($el/@target,2)&#xD;
            let $a:=map:get($fmap,$href) &#xD;
            return &lt;a href="{ $a }index.html"&gt;{ $el/@name/string() }&lt;/a&gt;&#xD;
          else&#xD;
             $el/@name/string() &#xD;
       }&#xD;
       return&#xD;
      &lt;section  id="file"&gt;&#xD;
	      &lt;h2&gt;{ ``[File view (`{ count($model?files) }`)]`` }&lt;/h2&gt;&#xD;
	   &#xD;
	      {&#xD;
	        &lt;ul class="tree"&gt;&#xD;
	          { $t/*!page:tree-list2(.,(),$f,99) }&#xD;
	       &lt;/ul&gt;&#xD;
	      }&#xD;
	    &lt;/section&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>xqhtml:modtable</xqdoc:name><xqdoc:signature>function xqhtml:modtable ( $files as map(*)*,$model as map(*) ) as element(div) { &lt;div&gt;{if (count($files)=0) then &lt;p&gt;None&lt;/p&gt; else &lt;table class="data"&gt; &lt;colgroup&gt; &lt;col style="width: 35%;"/&gt; &lt;col style="width: 10%;"/&gt; &lt;col style="width: 25%;"/&gt; &lt;col style="width: 10%;"/&gt; &lt;col style="width: 10%;"/&gt; &lt;col style="width: 10%;"/&gt; &lt;/colgroup&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Uri&lt;/th&gt; &lt;th&gt;Prefix&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;th&gt;Use&lt;/th&gt; &lt;th title="Annotations"&gt;A&lt;/th&gt; &lt;th&gt;Metrics&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; { for $file at $pos in $files let $type:=xqd:file-parsed-type($file) order by $type, $file?namespace let $annots:= for $a in $file?annotations group by $ns:=$a?annotation?uri order by $ns return $ns let $desc:= $file?xqdoc/xqdoc:module/xqdoc:comment/xqdoc:description=&gt;string() return &lt;tr&gt; &lt;td style="word-break:break-all;"&gt;{page:link-module($file) }&lt;/td&gt; &lt;td title="prefix"&gt;{ $file?prefix}&lt;/td&gt; &lt;td title="{ page:line-wrap($desc,60) }"&gt;{ xqhtml:truncate-text($desc,50) }&lt;/td&gt; &lt;td &gt;{ xqhtml:file-usage($file,$model) }&lt;/td&gt; &lt;td title="{ $annots }"&gt;{ xqa:badges($file?xqdoc//xqdoc:annotation, $file,page:badge#3) }&lt;/td&gt; &lt;td style="text-align: right"&gt; &lt;div&gt;V#{$file?xqdoc//xqdoc:variable=&gt;count() }&lt;/div&gt; &lt;div&gt;F#{$file?xqdoc//xqdoc:function=&gt;count() }&lt;/div&gt; &lt;/td&gt; &lt;/tr&gt; } &lt;/tbody&gt; &lt;/table&gt; }&lt;/div&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>files</xqdoc:name><xqdoc:type occurrence="*">map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>model</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(div)</xqdoc:type></xqdoc:return><xqdoc:body>function xqhtml:modtable($files as map(*)*,$model as map(*))&#xD;
as element(div)&#xD;
{&#xD;
  &lt;div&gt;{if (count($files)=0) then&#xD;
          &lt;p&gt;None&lt;/p&gt;&#xD;
        else&#xD;
     &lt;table class="data"&gt;&#xD;
           &lt;colgroup&gt;&#xD;
               &lt;col  style="width: 35%;"/&gt;&#xD;
                &lt;col  style="width: 10%;"/&gt;&#xD;
                &lt;col  style="width: 25%;"/&gt;&#xD;
                &lt;col  style="width: 10%;"/&gt;&#xD;
                &lt;col  style="width: 10%;"/&gt;&#xD;
		            &lt;col  style="width: 10%;"/&gt;&#xD;
		    &lt;/colgroup&gt;&#xD;
		    &lt;thead&gt;&#xD;
		    &lt;tr&gt;&#xD;
          &lt;th&gt;Uri&lt;/th&gt;&#xD;
          &lt;th&gt;Prefix&lt;/th&gt;&#xD;
          &#xD;
          &lt;th&gt;Description&lt;/th&gt;&#xD;
          &lt;th&gt;Use&lt;/th&gt;&#xD;
          &lt;th title="Annotations"&gt;A&lt;/th&gt;&#xD;
          &lt;th&gt;Metrics&lt;/th&gt;&#xD;
		    &lt;/tr&gt;&#xD;
		    &lt;/thead&gt;&#xD;
    &lt;tbody&gt;&#xD;
   &#xD;
       { for $file  at $pos in $files&#xD;
        let $type:=xqd:file-parsed-type($file)&#xD;
         order by $type, $file?namespace&#xD;
         let $annots:= for $a in $file?annotations&#xD;
                       group by $ns:=$a?annotation?uri&#xD;
                       order by $ns&#xD;
                       return $ns&#xD;
         let $desc:= $file?xqdoc/xqdoc:module/xqdoc:comment/xqdoc:description=&gt;string()&#xD;
        return  &lt;tr&gt;&#xD;
                &lt;td style="word-break:break-all;"&gt;{page:link-module($file) }&lt;/td&gt;&#xD;
                &lt;td title="prefix"&gt;{ $file?prefix}&lt;/td&gt;&#xD;
                 &lt;td title="{ page:line-wrap($desc,60) }"&gt;{ xqhtml:truncate-text($desc,50) }&lt;/td&gt;&#xD;
                 &lt;td &gt;{   xqhtml:file-usage($file,$model) }&lt;/td&gt;&#xD;
&#xD;
                 &lt;td title="{ $annots }"&gt;{ xqa:badges($file?xqdoc//xqdoc:annotation, $file,page:badge#3) }&lt;/td&gt;       &#xD;
              &#xD;
                 &lt;td style="text-align: right"&gt;&#xD;
                 &lt;div&gt;V#{$file?xqdoc//xqdoc:variable=&gt;count() }&lt;/div&gt;&#xD;
                 &lt;div&gt;F#{$file?xqdoc//xqdoc:function=&gt;count() }&lt;/div&gt;&#xD;
                 &lt;/td&gt;&#xD;
              &lt;/tr&gt;&#xD;
        }&#xD;
    &lt;/tbody&gt;&#xD;
    &lt;/table&gt;&#xD;
  }&lt;/div&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
usage (import) info&#xD;
</xqdoc:description></xqdoc:comment><xqdoc:name>xqhtml:file-usage</xqdoc:name><xqdoc:signature>function xqhtml:file-usage ( $file as map(*),$model as map(*) ) as element(div) { let $x:=xqd:import-count($file?xqdoc,$model) return switch( xqd:file-parsed-type($file)) case "main" return &lt;div&gt; &lt;div title="Main module" class="badge badge-info"&gt;Main&lt;/div&gt; &lt;div title="imports" style="float:right"&gt;{ $xqhtml:larr }{ count($x?imports)}&lt;/div&gt; &lt;/div&gt; case "library" return &lt;div&gt; &lt;div title="imported by"&gt;{ count($x?importedby) }&lt;span&gt;{ $xqhtml:larr }&lt;/span&gt;&lt;/div&gt; &lt;div title="Library module" class="badge badge-info"&gt;Library&lt;/div&gt; &lt;div title="imports" style="float:right"&gt;{ $xqhtml:larr }{ count($x?imports)}&lt;/div&gt; &lt;/div&gt; default return &lt;div&gt;#ERROR&lt;/div&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>file</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>model</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(div)</xqdoc:type></xqdoc:return><xqdoc:body>function xqhtml:file-usage($file as map(*),$model as map(*))                       &#xD;
as element(div)&#xD;
{ &#xD;
   let $x:=xqd:import-count($file?xqdoc,$model)&#xD;
   return switch( xqd:file-parsed-type($file))&#xD;
   case "main"    &#xD;
   					return &lt;div&gt;&#xD;
   					          &lt;div title="Main module" class="badge badge-info"&gt;Main&lt;/div&gt;&#xD;
   					          &lt;div title="imports" style="float:right"&gt;{ $xqhtml:larr }{ count($x?imports)}&lt;/div&gt;&#xD;
   					       &lt;/div&gt;&#xD;
   					&#xD;
   case "library" &#xD;
             return &lt;div&gt;&#xD;
                        &lt;div title="imported by"&gt;{ count($x?importedby) }&lt;span&gt;{ $xqhtml:larr }&lt;/span&gt;&lt;/div&gt;&#xD;
                        &lt;div title="Library module" class="badge badge-info"&gt;Library&lt;/div&gt;&#xD;
                        &lt;div title="imports" style="float:right"&gt;{ $xqhtml:larr }{ count($x?imports)}&lt;/div&gt;&#xD;
                    &lt;/div&gt;&#xD;
   &#xD;
   default        return &lt;div&gt;#ERROR&lt;/div&gt;&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
chop long text</xqdoc:description></xqdoc:comment><xqdoc:name>xqhtml:truncate-text</xqdoc:name><xqdoc:signature>function xqhtml:truncate-text ( $text as xs:string,$max as xs:integer ) as xs:string { if(string-length($text) lt $max) then $text else substring($text,1, $max -3) || "..." }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>text</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>max</xqdoc:name><xqdoc:type>xs:integer</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return><xqdoc:body>function xqhtml:truncate-text($text as xs:string,$max as xs:integer) &#xD;
as xs:string{&#xD;
if(string-length($text) lt $max)&#xD;
then $text&#xD;
else substring($text,1, $max -3) || "..."&#xD;
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>