<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2025-05-17T18:35:19.705+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="main"><xqdoc:uri>xqdoca.xq</xqdoc:uri><xqdoc:name/><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Generate documentation form XQuery sources&#xD;
</xqdoc:description><xqdoc:author>Andy Bunce (Quodatum)</xqdoc:author></xqdoc:comment><xqdoc:body>xquery version "3.1";&#xD;
(:~  &#xD;
  Generate documentation form XQuery sources&#xD;
  @author Andy Bunce (Quodatum)&#xD;
 :)&#xD;
&#xD;
&#xD;
import module namespace xqd = 'quodatum:xqdoca.model' at "lib/model.xqm";&#xD;
import module namespace xqo = 'quodatum:xqdoca.outputs' at "lib/xqdoc-outputs.xqm";&#xD;
import module namespace store = 'quodatum:xqdoca:store' at "lib/store.xqm";&#xD;
import module namespace opts = 'quodatum:xqdoca:options' at "lib/options.xqm"; &#xD;
&#xD;
 &#xD;
(:~  path to XML options file :)&#xD;
declare variable $config-path as xs:string  external;&#xD;
&#xD;
(:  fully resolve opts path :)&#xD;
let $config-path:=$config-path&#xD;
          =&gt;file:resolve-path(file:current-dir())&#xD;
          &#xD;
(: options with defaults:)&#xD;
let $options:=opts:as-map(doc($config-path)/*)&#xD;
               =&gt;opts:merge(opts:as-map(doc("config.xqdoca")/*))&#xD;
          (:     =&gt;trace("OPTS: ") :)&#xD;
&#xD;
let $efolder:=$options?source&#xD;
              =&gt;file:resolve-path($config-path)&#xD;
              =&gt;xs:anyURI()&#xD;
&#xD;
let $target:= $options?target&#xD;
              =&gt;file:resolve-path($config-path)&#xD;
              =&gt;file:path-to-uri()&#xD;
              =&gt;concat("/")&#xD;
              &#xD;
(: add computed defaults :)&#xD;
let $options:=opts:merge($options,map{&#xD;
                      "project": tokenize($efolder,"\" || file:dir-separator() )[last()-1],&#xD;
                      "xqdoca": doc("expath-pkg.xml")/*/@version/string()&#xD;
                      })&#xD;
&#xD;
let $files:=xqd:find-sources($efolder, $options?extensions)&#xD;
let $model:= xqd:snap($efolder, $files, $options)&#xD;
let $_:=trace(0,"SNAP complete") &#xD;
(: generate  outputs :)&#xD;
let $pages:= xqo:render($model,$options)&#xD;
let $target:=xqd:target($target,$options)   &#xD;
 &#xD;
return (&#xD;
       store:store($pages,$target),&#xD;
       xqo:export-resources($target),&#xD;
       (: xqo:zip($target, $options?project), :)&#xD;
      (: arbitrary result for reporting :) &#xD;
       update:output(&#xD;
         &lt;json type="object"&gt;&#xD;
            &lt;xqdoca&gt;{ $options?xqdoca }&lt;/xqdoca&gt;&#xD;
            &lt;project&gt;{ $options?project }&lt;/project&gt;&#xD;
              &lt;source&gt;{ $efolder }&lt;/source&gt;&#xD;
             &lt;target&gt;{ $target }&lt;/target&gt;&#xD;
              &lt;created&gt;{ current-dateTime() }&lt;/created&gt;&#xD;
             &lt;status&gt;completed&lt;/status&gt;&#xD;
             &lt;msg&gt;  {count($model?files)} files processed. Stored {count($pages)}&lt;/msg&gt;&#xD;
        &lt;/json&gt; &#xD;
       )&#xD;
)&#xD;
</xqdoc:body></xqdoc:module><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>quodatum:xqdoca.model</xqdoc:uri><xqdoc:at>lib/model.xqm</xqdoc:at></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>quodatum:xqdoca.outputs</xqdoc:uri><xqdoc:at>lib/xqdoc-outputs.xqm</xqdoc:at></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>quodatum:xqdoca:store</xqdoc:uri><xqdoc:at>lib/store.xqm</xqdoc:at></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>quodatum:xqdoca:options</xqdoc:uri><xqdoc:at>lib/options.xqm</xqdoc:at></xqdoc:import></xqdoc:imports><xqdoc:namespaces><xqdoc:namespace prefix="xqd" uri="quodatum:xqdoca.model"/><xqdoc:namespace prefix="xqo" uri="quodatum:xqdoca.outputs"/><xqdoc:namespace prefix="store" uri="quodatum:xqdoca:store"/><xqdoc:namespace prefix="opts" uri="quodatum:xqdoca:options"/><xqdoc:namespace prefix="xs" uri="http://www.w3.org/2001/XMLSchema"/><xqdoc:namespace prefix="file" uri="http://expath.org/ns/file"/><xqdoc:namespace prefix="update" uri="http://basex.org/modules/update"/></xqdoc:namespaces><xqdoc:variables><xqdoc:variable external="true"><xqdoc:name>config-path</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
path to XML options file</xqdoc:description></xqdoc:comment><xqdoc:type>xs:string</xqdoc:type><xqdoc:body>variable $config-path as xs:string  external</xqdoc:body></xqdoc:variable></xqdoc:variables><xqdoc:functions><xqdoc:function arity="0"><xqdoc:comment><xqdoc:description>The query body.</xqdoc:description><xqdoc:custom tag="note">pseudo main function as per http//xqdoc.org</xqdoc:custom></xqdoc:comment><xqdoc:name>local:xqDoc-main</xqdoc:name><xqdoc:signature>local:xqDoc-main()</xqdoc:signature><xqdoc:body>let $config-path:=$config-path&#xD;
          =&gt;file:resolve-path(file:current-dir())&#xD;
          &#xD;
(: options with defaults:)&#xD;
let $options:=opts:as-map(doc($config-path)/*)&#xD;
               =&gt;opts:merge(opts:as-map(doc("config.xqdoca")/*))&#xD;
          (:     =&gt;trace("OPTS: ") :)&#xD;
&#xD;
let $efolder:=$options?source&#xD;
              =&gt;file:resolve-path($config-path)&#xD;
              =&gt;xs:anyURI()&#xD;
&#xD;
let $target:= $options?target&#xD;
              =&gt;file:resolve-path($config-path)&#xD;
              =&gt;file:path-to-uri()&#xD;
              =&gt;concat("/")&#xD;
              &#xD;
(: add computed defaults :)&#xD;
let $options:=opts:merge($options,map{&#xD;
                      "project": tokenize($efolder,"\" || file:dir-separator() )[last()-1],&#xD;
                      "xqdoca": doc("expath-pkg.xml")/*/@version/string()&#xD;
                      })&#xD;
&#xD;
let $files:=xqd:find-sources($efolder, $options?extensions)&#xD;
let $model:= xqd:snap($efolder, $files, $options)&#xD;
let $_:=trace(0,"SNAP complete") &#xD;
(: generate  outputs :)&#xD;
let $pages:= xqo:render($model,$options)&#xD;
let $target:=xqd:target($target,$options)   &#xD;
 &#xD;
return (&#xD;
       store:store($pages,$target),&#xD;
       xqo:export-resources($target),&#xD;
       (: xqo:zip($target, $options?project), :)&#xD;
      (: arbitrary result for reporting :) &#xD;
       update:output(&#xD;
         &lt;json type="object"&gt;&#xD;
            &lt;xqdoca&gt;{ $options?xqdoca }&lt;/xqdoca&gt;&#xD;
            &lt;project&gt;{ $options?project }&lt;/project&gt;&#xD;
              &lt;source&gt;{ $efolder }&lt;/source&gt;&#xD;
             &lt;target&gt;{ $target }&lt;/target&gt;&#xD;
              &lt;created&gt;{ current-dateTime() }&lt;/created&gt;&#xD;
             &lt;status&gt;completed&lt;/status&gt;&#xD;
             &lt;msg&gt;  {count($model?files)} files processed. Stored {count($pages)}&lt;/msg&gt;&#xD;
        &lt;/json&gt; &#xD;
       )&#xD;
)</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>