<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2025-05-17T18:35:19.705+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>quodatum:xqdoca:options</xqdoc:uri><xqdoc:name>opts</xqdoc:name><xqdoc:comment><xqdoc:description><p>converting XML config to maps.</p></xqdoc:description><xqdoc:author>Andy Bunce, Quodatum, License: Apache-2.0</xqdoc:author><xqdoc:custom tag="Copyright">(c) 2026 Quodatum Ltd</xqdoc:custom></xqdoc:comment><xqdoc:body>xquery version "3.1";&#xD;
(:~&#xD;
 &lt;p&gt;converting XML config to maps.&lt;/p&gt;&#xD;
 @Copyright (c) 2026 Quodatum Ltd&#xD;
 @author Andy Bunce, Quodatum, License: Apache-2.0&#xD;
 :)&#xD;
module namespace opts = 'quodatum:xqdoca:options';&#xD;
&#xD;
(:~  convert xml  options to  a  map :)&#xD;
declare function opts:as-map($a as element(*))&#xD;
as map(*){&#xD;
 $a/* ! map:entry(name(.), if (*) then opts:as-map(.) else string(.))&#xD;
=&gt;map:merge()&#xD;
(: =&gt;trace("AS_MAP: ") :)&#xD;
};&#xD;
&#xD;
(: add defaults to opts :)&#xD;
declare function opts:merge($opts as map(*),$defaults as map(*))&#xD;
as map(*){&#xD;
distinct-values ((map:keys($opts), map:keys($defaults)))&#xD;
! map:entry(.,&#xD;
      if(map:contains($opts,.) and map:contains($defaults,.))&#xD;
      then if (map:get($opts,.) instance of map(*))&#xD;
           then opts:merge(map:get($opts,.),map:get($defaults,.))&#xD;
           else map:get($opts,.)&#xD;
      else (map:get($opts,.),map:get($defaults,.))&#xD;
)=&gt;map:merge()&#xD;
};</xqdoc:body></xqdoc:module><xqdoc:namespaces><xqdoc:namespace prefix="opts" uri="quodatum:xqdoca:options"/><xqdoc:namespace prefix="map" uri="http://www.w3.org/2005/xpath-functions/map"/></xqdoc:namespaces><xqdoc:variables/><xqdoc:functions><xqdoc:function arity="1"><xqdoc:name>opts:as-map</xqdoc:name><xqdoc:signature>function opts:as-map ( $a as element(*) ) as map(*) { $a/* ! map:entry(name(.), if (*) then opts:as-map(.) else string(.)) =&gt;map:merge() (: =&gt;trace("AS_MAP: ") :) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>a</xqdoc:name><xqdoc:type>element(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>map(*)</xqdoc:type></xqdoc:return><xqdoc:body>function opts:as-map($a as element(*))&#xD;
as map(*){&#xD;
 $a/* ! map:entry(name(.), if (*) then opts:as-map(.) else string(.))&#xD;
=&gt;map:merge()&#xD;
(: =&gt;trace("AS_MAP: ") :)&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>opts:merge</xqdoc:name><xqdoc:signature>function opts:merge ( $opts as map(*),$defaults as map(*) ) as map(*) { distinct-values ((map:keys($opts), map:keys($defaults))) ! map:entry(., if(map:contains($opts,.) and map:contains($defaults,.)) then if (map:get($opts,.) instance of map(*)) then opts:merge(map:get($opts,.),map:get($defaults,.)) else map:get($opts,.) else (map:get($opts,.),map:get($defaults,.)) )=&gt;map:merge() }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>defaults</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>map(*)</xqdoc:type></xqdoc:return><xqdoc:body>function opts:merge($opts as map(*),$defaults as map(*))&#xD;
as map(*){&#xD;
distinct-values ((map:keys($opts), map:keys($defaults)))&#xD;
! map:entry(.,&#xD;
      if(map:contains($opts,.) and map:contains($defaults,.))&#xD;
      then if (map:get($opts,.) instance of map(*))&#xD;
           then opts:merge(map:get($opts,.),map:get($defaults,.))&#xD;
           else map:get($opts,.)&#xD;
      else (map:get($opts,.),map:get($defaults,.))&#xD;
)=&gt;map:merge()&#xD;
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>