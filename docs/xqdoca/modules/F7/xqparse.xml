<XQuery><Module><VersionDecl><TOKEN>xquery</TOKEN> <TOKEN>version</TOKEN> <StringLiteral>"3.1"</StringLiteral><TOKEN>;</TOKEN></VersionDecl>
(:
 : Copyright (c) 2019 Quodatum Ltd
 :
 : Licensed under the Apache License, Version 2.0 (the "License");
 : you may not use this file except in compliance with the License.
 : You may obtain a copy of the License at
 :
 :     http://www.apache.org/licenses/LICENSE-2.0
 :
 : Unless required by applicable law or agreed to in writing, software
 : distributed under the License is distributed on an "AS IS" BASIS,
 : WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 : See the License for the specific language governing permissions and
 : limitations under the License.
 :)
 
 (:~
 : &lt;h1&gt;xqdoc-outputs.xqm&lt;/h1&gt;
 : &lt;p&gt;define availiable outputs&lt;/p&gt;
 :
 : @author Andy Bunce
 : @version 0.1
 :)
 

<LibraryModule><ModuleDecl><TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>xqo</NCName> <TOKEN>=</TOKEN> <StringLiteral>'quodatum:xqdoca.outputs'</StringLiteral><TOKEN>;</TOKEN></ModuleDecl>
<Prolog><ModuleImport><TOKEN>import</TOKEN> <TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>xqd</NCName> <TOKEN>=</TOKEN> <StringLiteral>'quodatum:xqdoca.xqdoc'</StringLiteral> <TOKEN>at</TOKEN> <StringLiteral>"xqdoc-proj.xqm"</StringLiteral></ModuleImport><TOKEN>;</TOKEN>
<ModuleImport><TOKEN>import</TOKEN> <TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>xqhtml</NCName> <TOKEN>=</TOKEN> <StringLiteral>'quodatum:build.xqdoc-html'</StringLiteral> <TOKEN>at</TOKEN> <StringLiteral>"xqdoc-html.xqm"</StringLiteral></ModuleImport><TOKEN>;</TOKEN>

<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>xqo:cache</QName>  <TOKEN>:=</TOKEN><FunctionCall><QName>false</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~  modules define an o/p created from the state :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>xqo:modules</QName><TOKEN>:=</TOKEN>
 <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
         <MapConstructorEntry><StringLiteral>"index"</StringLiteral><TOKEN>:</TOKEN>  <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
                      <MapConstructorEntry><StringLiteral>"title"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"Index of sources"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
                      <MapConstructorEntry><StringLiteral>"document"</StringLiteral><TOKEN>:</TOKEN> <NamedFunctionRef><QName>xqhtml:index-html2</QName><TOKEN>#</TOKEN><IntegerLiteral>2</IntegerLiteral></NamedFunctionRef></MapConstructorEntry><TOKEN>,</TOKEN> 
                      <MapConstructorEntry><StringLiteral>"uri"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>'index.html'</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN> <MapConstructorEntry><StringLiteral>"opts"</StringLiteral><TOKEN>:</TOKEN>  <VarRef><TOKEN>$</TOKEN><QName>xqd:HTML5</QName></VarRef></MapConstructorEntry>
         <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
         <MapConstructorEntry><StringLiteral>"restxq"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
                      <MapConstructorEntry><StringLiteral>"title"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"Http interface"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
                      <MapConstructorEntry><StringLiteral>"document"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN> <TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>state</QName></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>opts</QName></Param></ParamList><TOKEN>)</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <FunctionCall><QName>xqhtml:restxq</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>state</QName></VarRef><TOKEN>,</TOKEN> <FunctionCall><QName>xqd:rxq-paths</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>state</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>opts</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
                      <MapConstructorEntry><StringLiteral>"uri"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>'restxq.html'</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN> <MapConstructorEntry><StringLiteral>"opts"</StringLiteral><TOKEN>:</TOKEN>  <VarRef><TOKEN>$</TOKEN><QName>xqd:HTML5</QName></VarRef></MapConstructorEntry>
         <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
        <MapConstructorEntry><StringLiteral>"imports"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
                   <MapConstructorEntry><StringLiteral>"title"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"Module import"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
                   <MapConstructorEntry><StringLiteral>"document"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN> <TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>state</QName></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>opts</QName></Param></ParamList><TOKEN>)</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <FunctionCall><QName>xqhtml:imports</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>state</QName></VarRef><TOKEN>,</TOKEN><FunctionCall><QName>xqd:imports</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>state</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>opts</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
                   <MapConstructorEntry><StringLiteral>"uri"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>'imports.html'</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN> <MapConstructorEntry><StringLiteral>"opts"</StringLiteral><TOKEN>:</TOKEN>  <VarRef><TOKEN>$</TOKEN><QName>xqd:HTML5</QName></VarRef></MapConstructorEntry>
         <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
        <MapConstructorEntry><StringLiteral>"annotations"</StringLiteral><TOKEN>:</TOKEN><MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
                   <MapConstructorEntry><StringLiteral>"title"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"Annotation summary"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
                   <MapConstructorEntry><StringLiteral>"document"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN> <TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>state</QName></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>opts</QName></Param></ParamList><TOKEN>)</TOKEN><EnclosedExpr><TOKEN>{</TOKEN><FunctionCall><QName>xqhtml:annotations</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>state</QName></VarRef><TOKEN>,</TOKEN><FunctionCall><QName>xqd:annotations</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>state</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>opts</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
                   <MapConstructorEntry><StringLiteral>"uri"</StringLiteral><TOKEN>:</TOKEN><StringLiteral>'annotations.html'</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN> <MapConstructorEntry><StringLiteral>"opts"</StringLiteral><TOKEN>:</TOKEN>  <VarRef><TOKEN>$</TOKEN><QName>xqd:HTML5</QName></VarRef></MapConstructorEntry>
      <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry>
    <TOKEN>}</TOKEN></MapConstructor></VarDecl></AnnotatedDecl>
<TOKEN>;</TOKEN>

(:~  files define an o/p created from a source item :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>xqo:files</QName><TOKEN>:=</TOKEN>
 <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN> 
        <MapConstructorEntry><StringLiteral>"xqdoc"</StringLiteral><TOKEN>:</TOKEN>  <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
                   <MapConstructorEntry><StringLiteral>"title"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"XML file XQdoc format"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
                   <MapConstructorEntry><StringLiteral>"document"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>file</QName></Param><TOKEN>,</TOKEN> <Param><TOKEN>$</TOKEN><QName>params</QName></Param></ParamList><TOKEN>)</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>file</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>xqdoc</NCName></Lookup></PostfixExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
                    <MapConstructorEntry><StringLiteral>"uri"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>file</QName></Param><TOKEN>)</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <StringConcatExpr><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>file</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>href</NCName></Lookup></PostfixExpr> <TOKEN>||</TOKEN> <StringLiteral>"/xqdoc.xml"</StringLiteral></StringConcatExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN> <MapConstructorEntry><StringLiteral>"opts"</StringLiteral><TOKEN>:</TOKEN>  <VarRef><TOKEN>$</TOKEN><QName>xqd:XML</QName></VarRef></MapConstructorEntry>
                 <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
        <MapConstructorEntry><StringLiteral>"xqparse"</StringLiteral><TOKEN>:</TOKEN> <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
                   <MapConstructorEntry><StringLiteral>"title"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"XML file of xquery parse tree output"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
                   <MapConstructorEntry><StringLiteral>"document"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>file</QName></Param><TOKEN>,</TOKEN> <Param><TOKEN>$</TOKEN><QName>params</QName></Param></ParamList><TOKEN>)</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>file</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>xqparse</NCName></Lookup></PostfixExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
                    <MapConstructorEntry><StringLiteral>"uri"</StringLiteral><TOKEN>:</TOKEN>  <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>file</QName></Param><TOKEN>)</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <StringConcatExpr><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>file</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>href</NCName></Lookup></PostfixExpr> <TOKEN>||</TOKEN> <StringLiteral>"xqparse.xml"</StringLiteral></StringConcatExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN> <MapConstructorEntry><StringLiteral>"opts"</StringLiteral><TOKEN>:</TOKEN>  <VarRef><TOKEN>$</TOKEN><QName>xqd:XML</QName></VarRef></MapConstructorEntry>
                 <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
        <MapConstructorEntry><StringLiteral>"html2"</StringLiteral><TOKEN>:</TOKEN>    <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
                   <MapConstructorEntry><StringLiteral>"title"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"HTML page about the file"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN> 
                   <MapConstructorEntry><StringLiteral>"document"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>file</QName></Param><TOKEN>,</TOKEN> <Param><TOKEN>$</TOKEN><QName>params</QName></Param></ParamList><TOKEN>)</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <FunctionCall><QName>xqhtml:xqdoc-html</QName><ArgumentList><TOKEN>(</TOKEN><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>file</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>xqdoc</NCName></Lookup></PostfixExpr><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>params</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
                   <MapConstructorEntry><StringLiteral>"uri"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>file</QName></Param><TOKEN>)</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <StringConcatExpr><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>file</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>href</NCName></Lookup></PostfixExpr> <TOKEN>||</TOKEN> <StringLiteral>"index2.html"</StringLiteral></StringConcatExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN> <MapConstructorEntry><StringLiteral>"opts"</StringLiteral><TOKEN>:</TOKEN>  <VarRef><TOKEN>$</TOKEN><QName>xqd:HTML5</QName></VarRef></MapConstructorEntry>
                 <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
      <MapConstructorEntry><StringLiteral>"html"</StringLiteral><TOKEN>:</TOKEN>    <MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
                   <MapConstructorEntry><StringLiteral>"title"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"HTML page about the file (new)"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN> 
                   <MapConstructorEntry><StringLiteral>"document"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>file</QName></Param><TOKEN>,</TOKEN> <Param><TOKEN>$</TOKEN><QName>params</QName></Param></ParamList><TOKEN>)</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <FunctionCall><QName>xqhtml:xqdoc-html2</QName><ArgumentList><TOKEN>(</TOKEN><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>file</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>xqdoc</NCName></Lookup></PostfixExpr><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>params</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN>
                   <MapConstructorEntry><StringLiteral>"uri"</StringLiteral><TOKEN>:</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>file</QName></Param><TOKEN>)</TOKEN><EnclosedExpr><TOKEN>{</TOKEN> <StringConcatExpr><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>file</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>href</NCName></Lookup></PostfixExpr> <TOKEN>||</TOKEN> <StringLiteral>"index.html"</StringLiteral></StringConcatExpr><TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr></MapConstructorEntry><TOKEN>,</TOKEN> <MapConstructorEntry><StringLiteral>"opts"</StringLiteral><TOKEN>:</TOKEN>  <VarRef><TOKEN>$</TOKEN><QName>xqd:HTML5</QName></VarRef></MapConstructorEntry>
                 <TOKEN>}</TOKEN></MapConstructor></MapConstructorEntry>          
    <TOKEN>}</TOKEN></MapConstructor></VarDecl></AnnotatedDecl>
<TOKEN>;</TOKEN>


(: render :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqo:module</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>name</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>,</TOKEN>
                            <Param><TOKEN>$</TOKEN><QName>state</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param><TOKEN>,</TOKEN>
                            <Param><TOKEN>$</TOKEN><QName>opts</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType><EnclosedExpr><TOKEN>{</TOKEN>
  <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>def</QName><TOKEN>:=</TOKEN> <FunctionCall><QName>map:get</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xqo:modules</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>name</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
  <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>doc</QName><TOKEN>:=</TOKEN> <FunctionCall><QName>apply</QName><ArgumentList><TOKEN>(</TOKEN><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>def</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>document</NCName></Lookup></PostfixExpr><TOKEN>,</TOKEN><ArrayConstructor><TOKEN>[</TOKEN><Expr><VarRef><TOKEN>$</TOKEN><QName>state</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>opts</QName></VarRef></Expr><TOKEN>]</TOKEN></ArrayConstructor><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
  <ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>map:merge</QName><ArgumentList><TOKEN>(</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN><Expr><MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN><MapConstructorEntry><StringLiteral>"document"</StringLiteral><TOKEN>:</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>doc</QName></VarRef></MapConstructorEntry><TOKEN>}</TOKEN></MapConstructor><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>def</QName></VarRef></Expr><TOKEN>)</TOKEN></ParenthesizedExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ render a per file o/p
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqo:file</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>name</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>,</TOKEN>
                            <Param><TOKEN>$</TOKEN><QName>file</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param><TOKEN>,</TOKEN>
                            <Param><TOKEN>$</TOKEN><QName>params</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType><EnclosedExpr><TOKEN>{</TOKEN>
  <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>def</QName><TOKEN>:=</TOKEN> <FunctionCall><QName>map:get</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>xqo:files</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>name</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
  <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>doc</QName><TOKEN>:=</TOKEN> <FunctionCall><QName>apply</QName><ArgumentList><TOKEN>(</TOKEN><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>def</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>document</NCName></Lookup></PostfixExpr><TOKEN>,</TOKEN><ArrayConstructor><TOKEN>[</TOKEN><Expr><VarRef><TOKEN>$</TOKEN><QName>file</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>params</QName></VarRef></Expr><TOKEN>]</TOKEN></ArrayConstructor><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
  <LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>uri</QName><TOKEN>:=</TOKEN> <FunctionCall><QName>apply</QName><ArgumentList><TOKEN>(</TOKEN><PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>def</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>uri</NCName></Lookup></PostfixExpr><TOKEN>,</TOKEN><ArrayConstructor><TOKEN>[</TOKEN><VarRef><TOKEN>$</TOKEN><QName>file</QName></VarRef><TOKEN>]</TOKEN></ArrayConstructor><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
  <ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>map:merge</QName><ArgumentList><TOKEN>(</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN><Expr><MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN><MapConstructorEntry><StringLiteral>"document"</StringLiteral><TOKEN>:</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>doc</QName></VarRef></MapConstructorEntry><TOKEN>,</TOKEN> <MapConstructorEntry><StringLiteral>"uri"</StringLiteral><TOKEN>:</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>uri</QName></VarRef></MapConstructorEntry><TOKEN>}</TOKEN></MapConstructor><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>def</QName></VarRef></Expr><TOKEN>)</TOKEN></ParenthesizedExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~
 : render all outputs for all per file outputs 
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>xqo:files</QName><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>outputs</QName> <TypeDeclaration><TOKEN>as</TOKEN> <SequenceType><QName>xs:string</QName><TOKEN>*</TOKEN></SequenceType></TypeDeclaration></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>state</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param><TOKEN>,</TOKEN><Param><TOKEN>$</TOKEN><QName>opts</QName> <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param></ParamList><TOKEN>)</TOKEN>
<TOKEN>as</TOKEN> <SequenceType><MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><TOKEN>*</TOKEN><TOKEN>)</TOKEN></MapType><TOKEN>*</TOKEN></SequenceType>
<EnclosedExpr><TOKEN>{</TOKEN>
<FLWORExpr><ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>file</QName> <PositionalVar><TOKEN>at</TOKEN> <TOKEN>$</TOKEN><QName>pos</QName></PositionalVar> <TOKEN>in</TOKEN> <PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>state</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>files</NCName></Lookup></PostfixExpr></ForBinding></ForClause>
<LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>params</QName><TOKEN>:=</TOKEN><FunctionCall><QName>map:merge</QName><ArgumentList><TOKEN>(</TOKEN><ParenthesizedExpr><TOKEN>(</TOKEN><Expr><MapConstructor><TOKEN>map</TOKEN><TOKEN>{</TOKEN>
              <MapConstructorEntry><StringLiteral>"filename"</StringLiteral><TOKEN>:</TOKEN> <PostfixExpr><VarRef><TOKEN>$</TOKEN><QName>file</QName></VarRef><Lookup><TOKEN>?</TOKEN><NCName>path</NCName></Lookup></PostfixExpr></MapConstructorEntry><TOKEN>,</TOKEN>
              <MapConstructorEntry><StringLiteral>"cache"</StringLiteral><TOKEN>:</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>xqo:cache</QName></VarRef></MapConstructorEntry><TOKEN>,</TOKEN>
              <MapConstructorEntry><StringLiteral>"show-private"</StringLiteral><TOKEN>:</TOKEN> <FunctionCall><QName>true</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></MapConstructorEntry><TOKEN>,</TOKEN>
              <MapConstructorEntry><StringLiteral>"root"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"../../"</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
              <MapConstructorEntry><StringLiteral>"resources"</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>"../../resources/"</StringLiteral></MapConstructorEntry><TOKEN>}</TOKEN></MapConstructor><TOKEN>,</TOKEN>
              <VarRef><TOKEN>$</TOKEN><QName>opts</QName></VarRef></Expr><TOKEN>)</TOKEN></ParenthesizedExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
              
<ReturnClause><TOKEN>return</TOKEN> <RelativePathExpr><VarRef><TOKEN>$</TOKEN><QName>outputs</QName></VarRef><TOKEN>!</TOKEN><FunctionCall><QName>xqo:file</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>file</QName></VarRef><TOKEN>,</TOKEN><VarRef><TOKEN>$</TOKEN><QName>params</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></RelativePathExpr></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ save runtime support files to output
 : @param $target destination folder
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <Annotation><TOKEN>%</TOKEN><QName>updating</QName></Annotation>
<FunctionDecl><TOKEN>function</TOKEN> <QName>xqo:export-resources</QName><TOKEN>(</TOKEN><Param><TOKEN>$</TOKEN><QName>target</QName> <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>)</TOKEN>                       
<TOKEN>as</TOKEN> <SequenceType><TOKEN>empty-sequence</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></SequenceType><EnclosedExpr><TOKEN>{</TOKEN>  
<FunctionCall><QName>archive:extract-to</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>target</QName></VarRef><TOKEN>,</TOKEN> <FunctionCall><QName>file:read-binary</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>resolve-uri</QName><ArgumentList><TOKEN>(</TOKEN><StringLiteral>'resources.zip'</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN></Prolog></LibraryModule></Module><EOF/></XQuery>