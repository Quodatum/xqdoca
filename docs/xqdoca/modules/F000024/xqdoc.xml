<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2025-05-17T18:35:19.705+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>quodatum:xqdoca:store</xqdoc:uri><xqdoc:name>store</xqdoc:name><xqdoc:comment><xqdoc:description><p>Save documents to file system or database. Data is supplied as a map which
includes serialization options</p></xqdoc:description><xqdoc:author>Andy Bunce, Quodatum, License: Apache-2.0</xqdoc:author><xqdoc:custom tag="copyright">(c) 2019-2026 Quodatum Ltd</xqdoc:custom></xqdoc:comment><xqdoc:body>xquery version "3.1";&#xD;
(:~&#xD;
  &lt;p&gt;Save documents to file system or database. Data is supplied as a map which &#xD;
  includes serialization options&lt;/p&gt;&#xD;
  @copyright (c) 2019-2026 Quodatum Ltd&#xD;
  @author Andy Bunce, Quodatum, License: Apache-2.0&#xD;
 &#xD;
 :)&#xD;
module namespace store = 'quodatum:xqdoca:store';&#xD;
&#xD;
(:~&#xD;
  store a set of  o/ps below $base&#xD;
 @param $docs sequence of maps &#xD;
 @param $base a uri "file://..", "xmldb:.."&#xD;
 :)&#xD;
declare %updating &#xD;
function store:store($docs as map(*)*,$base as xs:string)&#xD;
{&#xD;
for $doc in $docs&#xD;
let $_:=if(empty($doc?output)) then trace($doc,"DOC")&#xD;
let $uri:=resolve-uri($doc?uri,$base)&#xD;
let $opts:=if(map:contains($doc,"output")) then $doc?output else map{}&#xD;
let $document:=store:doc-tweak($doc,$opts)&#xD;
&#xD;
return switch (substring-before($uri,":"))&#xD;
          case "file" return store:file($document,store:file-to-native($uri),$opts)&#xD;
          case "xmldb" return store:xmldb($document,$uri,$opts)&#xD;
          default return error("unknown protocol:" || $uri)&#xD;
};&#xD;
&#xD;
(:~ return document, set namespace if xhtml :)&#xD;
declare %private &#xD;
function store:doc-tweak($doc as map(*),$opts as map(*)){&#xD;
 if($opts?method eq "xhtml")&#xD;
 then &#xD;
    let $_:=($doc?uri,name($doc?document))&#xD;
    return store:as-xhtml($doc?document)&#xD;
  else $doc?document&#xD;
};&#xD;
&#xD;
(:~ set doc ns to html&#xD;
@param $doc html doc in no namespace&#xD;
@todo set contenttype&#xD;
:)&#xD;
declare %private&#xD;
function store:as-xhtml($doc)&#xD;
{&#xD;
  store:change-element-ns-deep($doc,"http:/www.w3.org/1999/xhtml","")&#xD;
};&#xD;
&#xD;
(:~ &#xD;
The functx:change-element-ns-deep function changes the namespace &#xD;
 of the XML elements in $nodes to $newns&#xD;
@see  http://www.xqueryfunctions.com/xq/functx_change-element-ns-deep.html&#xD;
:)&#xD;
declare %private&#xD;
function store:change-element-ns-deep&#xD;
  ( $nodes as node()* ,&#xD;
    $newns as xs:string ,&#xD;
    $prefix as xs:string )  as node()* {&#xD;
&#xD;
  for $node in $nodes&#xD;
  return if ($node instance of element())&#xD;
         then (element&#xD;
               {QName ($newns,&#xD;
                          concat($prefix,&#xD;
                                    if ($prefix = '')&#xD;
                                    then ''&#xD;
                                    else ':',&#xD;
                                    local-name($node)))}&#xD;
               {$node/@*,&#xD;
                store:change-element-ns-deep($node/node(),&#xD;
                                           $newns, $prefix)})&#xD;
         else if ($node instance of document-node())&#xD;
         then store:change-element-ns-deep($node/node(),&#xD;
                                           $newns, $prefix)&#xD;
         else $node&#xD;
 };&#xD;
&#xD;
declare %private &#xD;
function store:file-to-native($uri as xs:string)&#xD;
{&#xD;
  (: file:path-to-native errors if not exists :)&#xD;
substring-after($uri,"file:///")&#xD;
};&#xD;
(:~ &#xD;
 :save $data to file system $url , create folder tree if required&#xD;
 :)&#xD;
declare %updating %private&#xD;
function store:file($data,$uri as xs:string,$params as map(*))&#xD;
{  &#xD;
   let $p:=file:parent($uri)&#xD;
   return (&#xD;
           if(file:is-dir($p)) then () else file:create-dir($p),&#xD;
           file:write($uri,$data,$params)&#xD;
           )&#xD;
};&#xD;
&#xD;
(:~ &#xD;
 :save $data to $uri  Xml database&#xD;
 :)&#xD;
declare %updating %private&#xD;
function store:xmldb($data,$uri as xs:string,$params as map(*))&#xD;
{  &#xD;
  let $a:=analyze-string(substring-after($uri,":"),"/([^/]*)/(.*)")&#xD;
  let $db:=$a//*[@nr="1"]&#xD;
  let $path:=$a//*[@nr="2"]&#xD;
  return db:put($db,$data,$path)&#xD;
};&#xD;
&#xD;
</xqdoc:body></xqdoc:module><xqdoc:namespaces><xqdoc:namespace prefix="store" uri="quodatum:xqdoca:store"/><xqdoc:namespace prefix="xs" uri="http://www.w3.org/2001/XMLSchema"/><xqdoc:namespace prefix="map" uri="http://www.w3.org/2005/xpath-functions/map"/><xqdoc:namespace prefix="file" uri="http://expath.org/ns/file"/><xqdoc:namespace prefix="db" uri="http://basex.org/modules/db"/></xqdoc:namespaces><xqdoc:variables/><xqdoc:functions><xqdoc:function arity="2"><xqdoc:name>store:store</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="updating"/></xqdoc:annotations><xqdoc:signature>function store:store ( $docs as map(*)*,$base as xs:string ) { for $doc in $docs let $_:=if(empty($doc?output)) then trace($doc,"DOC") let $uri:=resolve-uri($doc?uri,$base) let $opts:=if(map:contains($doc,"output")) then $doc?output else map{} let $document:=store:doc-tweak($doc,$opts) return switch (substring-before($uri,":")) case "file" return store:file($document,store:file-to-native($uri),$opts) case "xmldb" return store:xmldb($document,$uri,$opts) default return error("unknown protocol:" || $uri) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>docs</xqdoc:name><xqdoc:type occurrence="*">map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>base</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:body>function store:store($docs as map(*)*,$base as xs:string)&#xD;
{&#xD;
for $doc in $docs&#xD;
let $_:=if(empty($doc?output)) then trace($doc,"DOC")&#xD;
let $uri:=resolve-uri($doc?uri,$base)&#xD;
let $opts:=if(map:contains($doc,"output")) then $doc?output else map{}&#xD;
let $document:=store:doc-tweak($doc,$opts)&#xD;
&#xD;
return switch (substring-before($uri,":"))&#xD;
          case "file" return store:file($document,store:file-to-native($uri),$opts)&#xD;
          case "xmldb" return store:xmldb($document,$uri,$opts)&#xD;
          default return error("unknown protocol:" || $uri)&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>&#xD;
return document, set namespace if xhtml</xqdoc:description></xqdoc:comment><xqdoc:name>store:doc-tweak</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function store:doc-tweak ( $doc as map(*),$opts as map(*) ) { if($opts?method eq "xhtml") then let $_:=($doc?uri,name($doc?document)) return store:as-xhtml($doc?document) else $doc?document }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>doc</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:body>function store:doc-tweak($doc as map(*),$opts as map(*)){&#xD;
 if($opts?method eq "xhtml")&#xD;
 then &#xD;
    let $_:=($doc?uri,name($doc?document))&#xD;
    return store:as-xhtml($doc?document)&#xD;
  else $doc?document&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>&#xD;
set doc ns to html&#xD;
</xqdoc:description><xqdoc:param>$doc html doc in no namespace</xqdoc:param><xqdoc:custom tag="todo">set contenttype</xqdoc:custom></xqdoc:comment><xqdoc:name>store:as-xhtml</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function store:as-xhtml ( $doc ) { store:change-element-ns-deep($doc,"http:/www.w3.org/1999/xhtml","") }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>doc</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:body>function store:as-xhtml($doc)&#xD;
{&#xD;
  store:change-element-ns-deep($doc,"http:/www.w3.org/1999/xhtml","")&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
The functx:change-element-ns-deep function changes the namespace&#xD;
of the XML elements in $nodes to $newns&#xD;
</xqdoc:description><xqdoc:see>http://www.xqueryfunctions.com/xq/functx_change-element-ns-deep.html</xqdoc:see></xqdoc:comment><xqdoc:name>store:change-element-ns-deep</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function store:change-element-ns-deep ( $nodes as node()* , $newns as xs:string , $prefix as xs:string ) as node()* { for $node in $nodes return if ($node instance of element()) then (element {QName ($newns, concat($prefix, if ($prefix = '') then '' else ':', local-name($node)))} {$node/@*, store:change-element-ns-deep($node/node(), $newns, $prefix)}) else if ($node instance of document-node()) then store:change-element-ns-deep($node/node(), $newns, $prefix) else $node }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>nodes</xqdoc:name><xqdoc:type occurrence="*">node()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>newns</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>prefix</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">node()</xqdoc:type></xqdoc:return><xqdoc:body>function store:change-element-ns-deep&#xD;
  ( $nodes as node()* ,&#xD;
    $newns as xs:string ,&#xD;
    $prefix as xs:string )  as node()* {&#xD;
&#xD;
  for $node in $nodes&#xD;
  return if ($node instance of element())&#xD;
         then (element&#xD;
               {QName ($newns,&#xD;
                          concat($prefix,&#xD;
                                    if ($prefix = '')&#xD;
                                    then ''&#xD;
                                    else ':',&#xD;
                                    local-name($node)))}&#xD;
               {$node/@*,&#xD;
                store:change-element-ns-deep($node/node(),&#xD;
                                           $newns, $prefix)})&#xD;
         else if ($node instance of document-node())&#xD;
         then store:change-element-ns-deep($node/node(),&#xD;
                                           $newns, $prefix)&#xD;
         else $node&#xD;
 }</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:name>store:file-to-native</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function store:file-to-native ( $uri as xs:string ) { (: file:path-to-native errors if not exists :) substring-after($uri,"file:///") }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>uri</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:body>function store:file-to-native($uri as xs:string)&#xD;
{&#xD;
  (: file:path-to-native errors if not exists :)&#xD;
substring-after($uri,"file:///")&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
save $data to file system $url , create folder tree if required&#xD;
</xqdoc:description></xqdoc:comment><xqdoc:name>store:file</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="updating"/><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function store:file ( $data,$uri as xs:string,$params as map(*) ) { let $p:=file:parent($uri) return ( if(file:is-dir($p)) then () else file:create-dir($p), file:write($uri,$data,$params) ) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>data</xqdoc:name></xqdoc:parameter><xqdoc:parameter><xqdoc:name>uri</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>params</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:body>function store:file($data,$uri as xs:string,$params as map(*))&#xD;
{  &#xD;
   let $p:=file:parent($uri)&#xD;
   return (&#xD;
           if(file:is-dir($p)) then () else file:create-dir($p),&#xD;
           file:write($uri,$data,$params)&#xD;
           )&#xD;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
save $data to $uri  Xml database&#xD;
</xqdoc:description></xqdoc:comment><xqdoc:name>store:xmldb</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="updating"/><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function store:xmldb ( $data,$uri as xs:string,$params as map(*) ) { let $a:=analyze-string(substring-after($uri,":"),"/([^/]*)/(.*)") let $db:=$a//*[@nr="1"] let $path:=$a//*[@nr="2"] return db:put($db,$data,$path) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>data</xqdoc:name></xqdoc:parameter><xqdoc:parameter><xqdoc:name>uri</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>params</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:body>function store:xmldb($data,$uri as xs:string,$params as map(*))&#xD;
{  &#xD;
  let $a:=analyze-string(substring-after($uri,":"),"/([^/]*)/(.*)")&#xD;
  let $db:=$a//*[@nr="1"]&#xD;
  let $path:=$a//*[@nr="2"]&#xD;
  return db:put($db,$data,$path)&#xD;
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>