<XQuery>(:~
 : Simple WebSocket chat. Utility functions.
 : @author BaseX Team 2005-21, BSD License
 :)
<LibraryModule><ModuleDecl><TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>chat-util</NCName> <TOKEN>=</TOKEN> <StringLiteral>'chat/util'</StringLiteral><TOKEN>;</TOKEN></ModuleDecl>

<Prolog><ModuleImport><TOKEN>import</TOKEN> <TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>session</NCName> <TOKEN>=</TOKEN> <StringLiteral>'http://basex.org/modules/session'</StringLiteral></ModuleImport><TOKEN>;</TOKEN>
<ModuleImport><TOKEN>import</TOKEN> <TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>ws</NCName> <TOKEN>=</TOKEN> <StringLiteral>'http://basex.org/modules/ws'</StringLiteral></ModuleImport><TOKEN>;</TOKEN>

(:~ User id (bound to sessions and WebSockets). :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>chat-util:id</QName> <TOKEN>:=</TOKEN> <StringLiteral>'id'</StringLiteral></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~
 : Sends a users list (all, active) to all registered clients.
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>chat-util:users</QName><TOKEN>(</TOKEN><TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><TOKEN>empty-sequence</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
  <FunctionCall><QName>ws:emit</QName><ArgumentList><TOKEN>(</TOKEN><MapConstructor><TOKEN>map</TOKEN> <TOKEN>{</TOKEN>
    <MapConstructorEntry><StringLiteral>'type'</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>'users'</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
    <MapConstructorEntry><StringLiteral>'users'</StringLiteral><TOKEN>:</TOKEN> <CurlyArrayConstructor><TOKEN>array</TOKEN> <EnclosedExpr><TOKEN>{</TOKEN> <FunctionCall><QName>sort</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>user:list</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall> <TOKEN>}</TOKEN></EnclosedExpr></CurlyArrayConstructor></MapConstructorEntry><TOKEN>,</TOKEN>
    <MapConstructorEntry><StringLiteral>'active'</StringLiteral><TOKEN>:</TOKEN> <CurlyArrayConstructor><TOKEN>array</TOKEN> <EnclosedExpr><TOKEN>{</TOKEN> <FunctionCall><QName>distinct-values</QName><ArgumentList><TOKEN>(</TOKEN>
      <FLWORExpr><ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>id</QName> <TOKEN>in</TOKEN> <FunctionCall><QName>ws:ids</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ForBinding></ForClause>
      <ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>ws:get</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>id</QName></VarRef><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>chat-util:id</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr>
    <TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>}</TOKEN></EnclosedExpr></CurlyArrayConstructor></MapConstructorEntry>
  <TOKEN>}</TOKEN></MapConstructor><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~ 
 : Sends a message to all clients, or to the clients of a specific user.
 : @param  $text  text to be sent
 : @param  $to    receiver of a private message (optional)
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>chat-util:message</QName><TOKEN>(</TOKEN>
  <ParamList><Param><TOKEN>$</TOKEN><TOKEN>text</TOKEN>  <TypeDeclaration><TOKEN>as</TOKEN> <QName>xs:string</QName></TypeDeclaration></Param><TOKEN>,</TOKEN>
  <Param><TOKEN>$</TOKEN><TOKEN>to</TOKEN>    <TypeDeclaration><TOKEN>as</TOKEN> <SequenceType><QName>xs:string</QName><TOKEN>?</TOKEN></SequenceType></TypeDeclaration></Param></ParamList>
<TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><TOKEN>empty-sequence</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
  <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>ws-ids</QName> <TOKEN>:=</TOKEN> <PostfixExpr><FunctionCall><QName>ws:ids</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><Predicate><TOKEN>[</TOKEN><OrExpr><FunctionCall><QName>not</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><TOKEN>to</TOKEN></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall> <TOKEN>or</TOKEN> <ComparisonExpr><FunctionCall><QName>ws:get</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>.</TOKEN><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>chat-util:id</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall> <TOKEN>=</TOKEN> <VarRef><TOKEN>$</TOKEN><TOKEN>to</TOKEN></VarRef></ComparisonExpr></OrExpr><TOKEN>]</TOKEN></Predicate></PostfixExpr></LetBinding></LetClause>
  <ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>ws:send</QName><ArgumentList><TOKEN>(</TOKEN><MapConstructor><TOKEN>map</TOKEN> <TOKEN>{</TOKEN>
    <MapConstructorEntry><StringLiteral>'type'</StringLiteral><TOKEN>:</TOKEN> <StringLiteral>'message'</StringLiteral></MapConstructorEntry><TOKEN>,</TOKEN>
    <MapConstructorEntry><StringLiteral>'text'</StringLiteral><TOKEN>:</TOKEN> <FunctionCall><QName>serialize</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><TOKEN>text</TOKEN></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></MapConstructorEntry><TOKEN>,</TOKEN>
    <MapConstructorEntry><StringLiteral>'from'</StringLiteral><TOKEN>:</TOKEN> <FunctionCall><QName>ws:get</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>ws:id</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>chat-util:id</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></MapConstructorEntry><TOKEN>,</TOKEN>
    <MapConstructorEntry><StringLiteral>'date'</StringLiteral><TOKEN>:</TOKEN> <FunctionCall><QName>format-time</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>current-time</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN> <StringLiteral>'[H02]:[m02]:[s02]'</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></MapConstructorEntry><TOKEN>,</TOKEN>
    <MapConstructorEntry><StringLiteral>'private'</StringLiteral><TOKEN>:</TOKEN> <FunctionCall><QName>boolean</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><TOKEN>to</TOKEN></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></MapConstructorEntry>
  <TOKEN>}</TOKEN></MapConstructor><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>ws-ids</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~
 : Closes all WebSocket connections from the specified user.
 : @param  $name  user name
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <FunctionDecl><TOKEN>function</TOKEN> <QName>chat-util:close</QName><TOKEN>(</TOKEN>
  <Param><TOKEN>$</TOKEN><QName>name</QName>  <TypeDeclaration><TOKEN>as</TOKEN>  <QName>xs:string</QName></TypeDeclaration></Param>
<TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <SequenceType><TOKEN>empty-sequence</TOKEN><TOKEN>(</TOKEN><TOKEN>)</TOKEN></SequenceType> <EnclosedExpr><TOKEN>{</TOKEN>
  <FLWORExpr><ForClause><TOKEN>for</TOKEN> <ForBinding><TOKEN>$</TOKEN><QName>id</QName> <TOKEN>in</TOKEN> <FunctionCall><QName>ws:ids</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ForBinding></ForClause>
  <WhereClause><TOKEN>where</TOKEN> <ComparisonExpr><FunctionCall><QName>ws:get</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>id</QName></VarRef><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>chat-util:id</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall> <TOKEN>=</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>name</QName></VarRef></ComparisonExpr></WhereClause>
  <ReturnClause><TOKEN>return</TOKEN> <FunctionCall><QName>ws:close</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>id</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN></Prolog></LibraryModule>
<EOF/></XQuery>