<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2019-05-24T10:38:14.137+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>dba/files</xqdoc:uri><xqdoc:name>files.xqm</xqdoc:name><xqdoc:comment><xqdoc:description>Files page.</xqdoc:description><xqdoc:author>Christian Grün, BaseX Team 2005-19, BSD License</xqdoc:author><xqdoc:custom tag="__source">files/files.xqm</xqdoc:custom></xqdoc:comment><xqdoc:body>(:~
 : Files page.
 :
 : @author Christian Grün, BaseX Team 2005-19, BSD License
 :)
module namespace dba = 'dba/files';

import module namespace html = 'dba/html' at '../modules/html.xqm';
import module namespace options = 'dba/options' at '../modules/options.xqm';
import module namespace session = 'dba/session' at '../modules/session.xqm';
import module namespace util = 'dba/util' at '../modules/util.xqm';

(:~ Top category :)
declare variable $dba:CAT := 'files';

(:~
 : Files page.
 : @param  $sort   table sort key
 : @param  $error  error message
 : @param  $info   info message
 : @return page
 :)
declare
  %rest:GET
  %rest:path("/dba/files")
  %rest:query-param("sort",  "{$sort}", "")
  %rest:query-param("error", "{$error}")
  %rest:query-param("info",  "{$info}")
  %rest:query-param("page",  "{$page}", "1")
  %output:method("html")
function dba:files(
  $sort   as xs:string,
  $error  as xs:string?,
  $info   as xs:string?,
  $page   as xs:string
) as element(html) {
  let $dir := session:directory()
  return html:wrap(map { 'header': $dba:CAT, 'info': $info, 'error': $error },
    &lt;tr&gt;
      &lt;td&gt;
        &lt;h2&gt;Directory&lt;/h2&gt;
        &lt;form action="dir-change" method="post"&gt;
          &lt;select name="dir" style="width: 350px;" onchange="this.form.submit();"&gt;{
            let $webapp := dba:dir(db:option('webpath'))[.]
            let $options := (
              ['DBA'       , $options:DBA-DIRECTORY],
              ['Webapp'    , $webapp],
              ['RESTXQ'    , dba:dir($webapp ! file:resolve-path(db:option('restxqpath'), .))],
              ['Repository', dba:dir(db:option('repopath'))],
              ['Home'      , Q{org.basex.util.Prop}HOMEDIR() ],
              ['Working'   , file:current-dir() ],
              ['Temporary' , file:temp-dir() ],
              Q{java:java.io.File}listRoots() ! ['Root', string(.)],
              ['Current'   , $dir]
            )
            let $selected := (
              for $option at $pos in $options
              where $option(2) = $dir
              return $pos
            )[1]
            for $option at $pos in $options
            let $name := $option(1), $path := $option(2)
            where $path
            return element option {
              attribute value { $path },
              attribute selected { }[$pos = $selected],
              $path[.] ! (($name || ': ')[$name] || .)
            }
          }&lt;/select&gt;&lt;![CDATA[ ]]&gt;
        &lt;/form&gt;

        &lt;form action="{ $dba:CAT }" method="post" class="update"&gt;{
          let $headers := (
            map { 'key': 'name', 'label': 'Name', 'type': 'xml' },
            map { 'key': 'date', 'label': 'Date', 'type': 'dateTime', 'order': 'desc' },
            map { 'key': 'bytes', 'label': 'Bytes', 'type': 'bytes', 'order': 'desc' },
            map { 'key': 'action', 'label': 'Action', 'type': 'xml' }
          )
          let $entries :=
            let $jobs := jobs:list-details()
            let $parent := if(file:parent($dir)) then ($dir || '..') else ()
            for $file in ($parent, file:children($dir))
            let $dir := file:is-dir($file)
            let $name := file:name($file)
            order by $dir descending, $name != '..', $name collation '?lang=en'

            (: skip files without access permissions :)
            for $modified in try { file:last-modified($file) } catch * { }
            let $size := file:size($file)
            return map {
              'name': function() {
                if($dir) then html:link($name, 'dir-change', map { 'dir': $name }) else $name
              },
              'date': $modified,
              'bytes': $size,
              'action': function() {
                util:item-join(
                  if($dir) then () else (
                    html:link('Download', 'file/' || encode-for-uri($name)),
                    if(matches($name, '\.xqm?$')) then (
                      html:link('Edit', 'queries', map { 'file': $name })
                    ) else (),
                    if(matches($name, '\.xq$')) then (
                      (: choose first running job :)
                      let $job := head(
                        let $uri := replace(file:path-to-uri($file), '^file:/*', '')
                        return $jobs[replace(., '^file:/*', '') = $uri]
                      )
                      let $id := string($job/@id)
                      return if(empty($job)) then (
                        html:link('Start', 'file-start', map { 'file': $name })
                      ) else (
                        html:link('Job', 'jobs', map { 'job': $id })
                      )
                    ) else ()
                  )
                , ' · ')
              }
            }
          let $buttons := html:button('file-delete', 'Delete', true())
          let $options := map { 'sort': $sort, 'page': xs:integer($page) }
          return html:table($headers, $entries, $buttons, map { }, $options)
        }&lt;/form&gt;

        &lt;h3&gt;Upload Files&lt;/h3&gt;
        &lt;form action="file-upload" method="post" enctype="multipart/form-data"&gt;
          &lt;input type="file" name="files" multiple="multiple"/&gt;
          &lt;input type="submit" value='Send'/&gt;
        &lt;/form&gt;

        &lt;h3&gt;Create Directory&lt;/h3&gt;
        &lt;form action="dir-create" method="post"&gt;
          &lt;input type="text" name="name"/&gt;&lt;![CDATA[ ]]&gt;
          &lt;input type="submit" value='Create'/&gt;
        &lt;/form&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  )
};

(:~
 : Redirects to the specified action.
 : @param  $action  action to perform
 : @param  $names   names of files
 : @param  $ids     ids
 : @return redirection
 :)
declare
  %rest:POST
  %rest:path("/dba/files")
  %rest:query-param("action", "{$action}")
  %rest:query-param("name",   "{$names}")
function dba:files-redirect(
  $action  as xs:string,
  $names   as xs:string*
) as element(rest:response) {
  web:redirect($action, map { 'name': $names, 'redirect': $dba:CAT })
};

(:~
 : Returns a native directory representation of the specified file.
 : @param  $dir  directory
 : @return native path (or empty sequence)
 :)
declare function dba:dir(
  $dir  as xs:string
) as xs:string? {
  try {
    file:path-to-native($dir)
  } catch file:* { }
};
</xqdoc:body></xqdoc:module><xqdoc:namespaces><xqdoc:namespace prefix="dba" uri="dba/files"/><xqdoc:namespace prefix="html" uri="dba/html"/><xqdoc:namespace prefix="options" uri="dba/options"/><xqdoc:namespace prefix="session" uri="dba/session"/><xqdoc:namespace prefix="util" uri="dba/util"/><xqdoc:namespace prefix="rest" uri="http://exquery.org/ns/restxq"/><xqdoc:namespace prefix="output" uri="http://www.w3.org/2010/xslt-xquery-serialization"/></xqdoc:namespaces><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>dba/html</xqdoc:uri></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>dba/options</xqdoc:uri></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>dba/session</xqdoc:uri></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>dba/util</xqdoc:uri></xqdoc:import></xqdoc:imports><xqdoc:variables><xqdoc:variable><xqdoc:name>dba:CAT</xqdoc:name><xqdoc:comment><xqdoc:description>Top category</xqdoc:description></xqdoc:comment><xqdoc:type>xs:string</xqdoc:type></xqdoc:variable></xqdoc:variables><xqdoc:functions><xqdoc:function arity="4"><xqdoc:comment><xqdoc:description>Files page.</xqdoc:description><xqdoc:param>$sort   table sort key</xqdoc:param><xqdoc:param>$error  error message</xqdoc:param><xqdoc:param>$info   info message</xqdoc:param><xqdoc:return>page</xqdoc:return></xqdoc:comment><xqdoc:name>dba:files</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:GET"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/dba/files</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">sort</xqdoc:literal><xqdoc:literal type="xs:string">{$sort}</xqdoc:literal><xqdoc:literal type="xs:string"/></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">error</xqdoc:literal><xqdoc:literal type="xs:string">{$error}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">info</xqdoc:literal><xqdoc:literal type="xs:string">{$info}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">page</xqdoc:literal><xqdoc:literal type="xs:string">{$page}</xqdoc:literal><xqdoc:literal type="xs:string">1</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="output:method"><xqdoc:literal type="xs:string">html</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>declare %rest:GET %rest:path("/dba/files") %rest:query-param("sort", "{$sort}", "") %rest:query-param("error", "{$error}") %rest:query-param("info", "{$info}") %rest:query-param("page", "{$page}", "1") %output:method("html") function dba:files($sort as xs:string, $error as xs:string?, $info as xs:string?, $page as xs:string) as element(html)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>sort</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>error</xqdoc:name><xqdoc:type occurrence="?">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>info</xqdoc:name><xqdoc:type occurrence="?">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>page</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(html)</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>Redirects to the specified action.</xqdoc:description><xqdoc:param>$action  action to perform</xqdoc:param><xqdoc:param>$names   names of files</xqdoc:param><xqdoc:param>$ids     ids</xqdoc:param><xqdoc:return>redirection</xqdoc:return></xqdoc:comment><xqdoc:name>dba:files-redirect</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:POST"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/dba/files</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">action</xqdoc:literal><xqdoc:literal type="xs:string">{$action}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">name</xqdoc:literal><xqdoc:literal type="xs:string">{$names}</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>declare %rest:POST %rest:path("/dba/files") %rest:query-param("action", "{$action}") %rest:query-param("name", "{$names}") function dba:files-redirect($action as xs:string, $names as xs:string*) as element(rest:response)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>action</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>names</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(rest:response)</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>Returns a native directory representation of the specified file.</xqdoc:description><xqdoc:param>$dir  directory</xqdoc:param><xqdoc:return>native path (or empty sequence)</xqdoc:return></xqdoc:comment><xqdoc:name>dba:dir</xqdoc:name><xqdoc:signature>declare function dba:dir($dir as xs:string) as xs:string?</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>dir</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="?">xs:string</xqdoc:type></xqdoc:return></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>