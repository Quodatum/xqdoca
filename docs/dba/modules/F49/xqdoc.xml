<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2019-06-06T22:43:09.974+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>dba/users</xqdoc:uri><xqdoc:name>user.xqm</xqdoc:name><xqdoc:comment><xqdoc:description>User page.</xqdoc:description><xqdoc:author>Christian Grün, BaseX Team 2005-19, BSD License</xqdoc:author><xqdoc:custom tag="__source">users/user.xqm</xqdoc:custom></xqdoc:comment><xqdoc:body>(:~
 : User page.
 :
 : @author Christian Grün, BaseX Team 2005-19, BSD License
 :)
module namespace dba = 'dba/users';

import module namespace html = 'dba/html' at '../modules/html.xqm';
import module namespace options = 'dba/options' at '../modules/options.xqm';

(:~ Top category :)
declare variable $dba:CAT := 'users';
(:~ Sub category :)
declare variable $dba:SUB := 'user';

(:~
 : Returns a single user page.
 : @param  $name     user name
 : @param  $newname  new name
 : @param  $pw       password
 : @param  $perm     permission
 : @param  $error    error string
 : @param  $info     info string
 : @return page
 :)
declare
  %rest:GET
  %rest:path("/dba/user")
  %rest:query-param("name",     "{$name}")
  %rest:query-param("newname",  "{$newname}")
  %rest:query-param("pw",       "{$pw}")
  %rest:query-param("perm",     "{$perm}")
  %rest:query-param("error",    "{$error}")
  %rest:query-param("info",     "{$info}")
  %output:method("html")
function dba:user(
  $name     as xs:string,
  $newname  as xs:string?,
  $pw       as xs:string?,
  $perm     as xs:string?,
  $error    as xs:string?,
  $info     as xs:string?
) as element(html) {
  let $user := user:list-details($name)
  let $admin := $name eq 'admin'
  return html:wrap(map { 'header': ($dba:CAT, $name), 'info': $info, 'error': $error },
    &lt;tr&gt;
      &lt;td width='49%'&gt;
        &lt;form action="user-edit" method="post" autocomplete="off"&gt;
          &lt;!--  force chrome not to autocomplete form --&gt;
          &lt;input style="display:none" type="text" name="fake1"/&gt;
          &lt;input style="display:none" type="password" name="fake2"/&gt;
          &lt;h2&gt;{
            html:link('Users', $dba:CAT), ' » ',
            $name, ' » ',
            html:button('save', 'Save')
          }&lt;/h2&gt;
          &lt;input type="hidden" name="name" value="{ $name }"/&gt;
          &lt;table&gt;{
            let $admin := $name eq 'admin' return (
              if($admin) then &lt;input type='hidden' name='newname' value='admin'/&gt; else (
                &lt;tr&gt;
                  &lt;td&gt;Name:&lt;/td&gt;
                  &lt;td&gt;
                    &lt;input type="text" name="newname"
                      value="{ head(($newname, $name)) }" id="newname"/&gt;
                    { html:focus('newname') }
                    &lt;div class='small'/&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
              ),
              &lt;tr&gt;
                &lt;td&gt;Password:&lt;/td&gt;
                &lt;td&gt;
                  &lt;input type="password" name="pw" value="{ $pw }" id="pw"/&gt; &amp;#xa0;
                  &lt;span class='note'&gt;
                    …only changed if a new one is entered&lt;br/&gt;
                  &lt;/span&gt;
                  &lt;div class='small'/&gt;
                &lt;/td&gt;
              &lt;/tr&gt;,
              if($admin) then &lt;input type='hidden' name='perm' value='admin'/&gt; else (
                &lt;tr&gt;
                  &lt;td&gt;Permission:&lt;/td&gt;
                  &lt;td&gt;
                    &lt;select name="perm" size="5"&gt;{
                      let $perm := head(($perm, $user/@permission))
                      for $p in $options:PERMISSIONS
                      return element option { attribute selected { }[$p = $perm], $p }
                    }&lt;/select&gt;
                    &lt;div class='small'/&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
              )
            )
          }&lt;/table&gt;
        &lt;/form&gt;
      {
        if($admin) then () else &lt;_&gt;
          &lt;hr/&gt;
          &lt;h3&gt;Local Permissions&lt;/h3&gt;
          &lt;form action="{ $dba:SUB }" method="post" id="{ $dba:SUB }" class="update"&gt;
            &lt;input type="hidden" name="name" value="{ $name }" id="name"/&gt;
            &lt;div class='small'/&gt;
            {
              let $headers := (
                map { 'key': 'pattern', 'label': 'Pattern' },
                map { 'key': 'permission', 'label': 'Local Permission' }
              )
              let $entries := $user/database ! map {
                'pattern': @pattern,
                'permission': @permission
              }
              let $buttons := if($admin) then () else (
                html:button('pattern-add', 'Add…'),
                html:button('pattern-drop', 'Drop', true())
              )
              return html:table($headers, $entries, $buttons, map { }, map { })
            }
          &lt;/form&gt;
          &lt;div class='note'&gt;
            A global permission can be overwritten by a local permission.&lt;br/&gt;
            Local permissions are applied to those databases that match&lt;br/&gt;
            a specified pattern. The pattern is based on the &lt;a target='_blank'
              href='http://docs.basex.org/wiki/Commands#Glob_Syntax'&gt;glob syntax&lt;/a&gt;.&lt;br/&gt;
          &lt;/div&gt;
        &lt;/_&gt;/node()
      }&lt;/td&gt;
    &lt;/tr&gt;
  )
};

(:~
 : Redirects to the specified action.
 : @param  $action    action to perform
 : @param  $name      user name
 : @param  $patterns  patterns
 : @return redirection
 :)
declare
  %rest:POST
  %rest:path("/dba/user")
  %rest:form-param("action",  "{$action}")
  %rest:form-param("name",    "{$name}")
  %rest:form-param("pattern", "{$patterns}")
function dba:user-redirect(
  $action    as xs:string,
  $name      as xs:string,
  $patterns  as xs:string*
) as element(rest:response) {
  web:redirect($action, map { 'name': $name, 'pattern': $patterns })
};
</xqdoc:body></xqdoc:module><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>dba/html</xqdoc:uri></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>dba/options</xqdoc:uri></xqdoc:import></xqdoc:imports><xqdoc:namespaces><xqdoc:namespace prefix="dba" uri="dba/users"/><xqdoc:namespace prefix="html" uri="dba/html"/><xqdoc:namespace prefix="options" uri="dba/options"/><xqdoc:namespace prefix="rest" uri="http://exquery.org/ns/restxq"/><xqdoc:namespace prefix="output" uri="http://www.w3.org/2010/xslt-xquery-serialization"/></xqdoc:namespaces><xqdoc:variables><xqdoc:variable><xqdoc:name>dba:CAT</xqdoc:name><xqdoc:comment><xqdoc:description>Top category</xqdoc:description></xqdoc:comment><xqdoc:type>xs:string</xqdoc:type></xqdoc:variable><xqdoc:variable><xqdoc:name>dba:SUB</xqdoc:name><xqdoc:comment><xqdoc:description>Sub category</xqdoc:description></xqdoc:comment><xqdoc:type>xs:string</xqdoc:type></xqdoc:variable></xqdoc:variables><xqdoc:functions><xqdoc:function arity="6"><xqdoc:comment><xqdoc:description>Returns a single user page.</xqdoc:description><xqdoc:param>$name     user name</xqdoc:param><xqdoc:param>$newname  new name</xqdoc:param><xqdoc:param>$pw       password</xqdoc:param><xqdoc:param>$perm     permission</xqdoc:param><xqdoc:param>$error    error string</xqdoc:param><xqdoc:param>$info     info string</xqdoc:param><xqdoc:return>page</xqdoc:return></xqdoc:comment><xqdoc:name>dba:user</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:GET"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/dba/user</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">name</xqdoc:literal><xqdoc:literal type="xs:string">{$name}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">newname</xqdoc:literal><xqdoc:literal type="xs:string">{$newname}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">pw</xqdoc:literal><xqdoc:literal type="xs:string">{$pw}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">perm</xqdoc:literal><xqdoc:literal type="xs:string">{$perm}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">error</xqdoc:literal><xqdoc:literal type="xs:string">{$error}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">info</xqdoc:literal><xqdoc:literal type="xs:string">{$info}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="output:method"><xqdoc:literal type="xs:string">html</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>declare %rest:GET %rest:path("/dba/user") %rest:query-param("name", "{$name}") %rest:query-param("newname", "{$newname}") %rest:query-param("pw", "{$pw}") %rest:query-param("perm", "{$perm}") %rest:query-param("error", "{$error}") %rest:query-param("info", "{$info}") %output:method("html") function dba:user($name as xs:string, $newname as xs:string?, $pw as xs:string?, $perm as xs:string?, $error as xs:string?, $info as xs:string?) as element(html)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>newname</xqdoc:name><xqdoc:type occurrence="?">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>pw</xqdoc:name><xqdoc:type occurrence="?">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>perm</xqdoc:name><xqdoc:type occurrence="?">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>error</xqdoc:name><xqdoc:type occurrence="?">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>info</xqdoc:name><xqdoc:type occurrence="?">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(html)</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://basex.org/modules/user</xqdoc:uri><xqdoc:name>list-details</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>dba/html</xqdoc:uri><xqdoc:name>wrap</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>dba/html</xqdoc:uri><xqdoc:name>link</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>dba/html</xqdoc:uri><xqdoc:name>button</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>head</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>dba/html</xqdoc:uri><xqdoc:name>focus</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>head</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>dba/html</xqdoc:uri><xqdoc:name>button</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="3"><xqdoc:uri>dba/html</xqdoc:uri><xqdoc:name>button</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>true</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="5"><xqdoc:uri>dba/html</xqdoc:uri><xqdoc:name>table</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>name</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>name</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>dba/users</xqdoc:uri><xqdoc:name>CAT</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>name</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>info</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>error</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>dba/users</xqdoc:uri><xqdoc:name>CAT</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>name</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>name</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>name</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>admin</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>newname</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>name</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>pw</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>admin</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>perm</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>user</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>dba/options</xqdoc:uri><xqdoc:name>PERMISSIONS</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>p</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>perm</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>p</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>admin</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>dba/users</xqdoc:uri><xqdoc:name>SUB</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>dba/users</xqdoc:uri><xqdoc:name>SUB</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>name</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>user</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>admin</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>headers</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>entries</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>buttons</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function dba:user(
  $name     as xs:string,
  $newname  as xs:string?,
  $pw       as xs:string?,
  $perm     as xs:string?,
  $error    as xs:string?,
  $info     as xs:string?
) as element(html) {
  let $user := user:list-details($name)
  let $admin := $name eq 'admin'
  return html:wrap(map { 'header': ($dba:CAT, $name), 'info': $info, 'error': $error },
    &lt;tr&gt;
      &lt;td width='49%'&gt;
        &lt;form action="user-edit" method="post" autocomplete="off"&gt;
          &lt;!--  force chrome not to autocomplete form --&gt;
          &lt;input style="display:none" type="text" name="fake1"/&gt;
          &lt;input style="display:none" type="password" name="fake2"/&gt;
          &lt;h2&gt;{
            html:link('Users', $dba:CAT), ' » ',
            $name, ' » ',
            html:button('save', 'Save')
          }&lt;/h2&gt;
          &lt;input type="hidden" name="name" value="{ $name }"/&gt;
          &lt;table&gt;{
            let $admin := $name eq 'admin' return (
              if($admin) then &lt;input type='hidden' name='newname' value='admin'/&gt; else (
                &lt;tr&gt;
                  &lt;td&gt;Name:&lt;/td&gt;
                  &lt;td&gt;
                    &lt;input type="text" name="newname"
                      value="{ head(($newname, $name)) }" id="newname"/&gt;
                    { html:focus('newname') }
                    &lt;div class='small'/&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
              ),
              &lt;tr&gt;
                &lt;td&gt;Password:&lt;/td&gt;
                &lt;td&gt;
                  &lt;input type="password" name="pw" value="{ $pw }" id="pw"/&gt; &amp;#xa0;
                  &lt;span class='note'&gt;
                    …only changed if a new one is entered&lt;br/&gt;
                  &lt;/span&gt;
                  &lt;div class='small'/&gt;
                &lt;/td&gt;
              &lt;/tr&gt;,
              if($admin) then &lt;input type='hidden' name='perm' value='admin'/&gt; else (
                &lt;tr&gt;
                  &lt;td&gt;Permission:&lt;/td&gt;
                  &lt;td&gt;
                    &lt;select name="perm" size="5"&gt;{
                      let $perm := head(($perm, $user/@permission))
                      for $p in $options:PERMISSIONS
                      return element option { attribute selected { }[$p = $perm], $p }
                    }&lt;/select&gt;
                    &lt;div class='small'/&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
              )
            )
          }&lt;/table&gt;
        &lt;/form&gt;
      {
        if($admin) then () else &lt;_&gt;
          &lt;hr/&gt;
          &lt;h3&gt;Local Permissions&lt;/h3&gt;
          &lt;form action="{ $dba:SUB }" method="post" id="{ $dba:SUB }" class="update"&gt;
            &lt;input type="hidden" name="name" value="{ $name }" id="name"/&gt;
            &lt;div class='small'/&gt;
            {
              let $headers := (
                map { 'key': 'pattern', 'label': 'Pattern' },
                map { 'key': 'permission', 'label': 'Local Permission' }
              )
              let $entries := $user/database ! map {
                'pattern': @pattern,
                'permission': @permission
              }
              let $buttons := if($admin) then () else (
                html:button('pattern-add', 'Add…'),
                html:button('pattern-drop', 'Drop', true())
              )
              return html:table($headers, $entries, $buttons, map { }, map { })
            }
          &lt;/form&gt;
          &lt;div class='note'&gt;
            A global permission can be overwritten by a local permission.&lt;br/&gt;
            Local permissions are applied to those databases that match&lt;br/&gt;
            a specified pattern. The pattern is based on the &lt;a target='_blank'
              href='http://docs.basex.org/wiki/Commands#Glob_Syntax'&gt;glob syntax&lt;/a&gt;.&lt;br/&gt;
          &lt;/div&gt;
        &lt;/_&gt;/node()
      }&lt;/td&gt;
    &lt;/tr&gt;
  )
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>Redirects to the specified action.</xqdoc:description><xqdoc:param>$action    action to perform</xqdoc:param><xqdoc:param>$name      user name</xqdoc:param><xqdoc:param>$patterns  patterns</xqdoc:param><xqdoc:return>redirection</xqdoc:return></xqdoc:comment><xqdoc:name>dba:user-redirect</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:POST"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/dba/user</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:form-param"><xqdoc:literal type="xs:string">action</xqdoc:literal><xqdoc:literal type="xs:string">{$action}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:form-param"><xqdoc:literal type="xs:string">name</xqdoc:literal><xqdoc:literal type="xs:string">{$name}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:form-param"><xqdoc:literal type="xs:string">pattern</xqdoc:literal><xqdoc:literal type="xs:string">{$patterns}</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>declare %rest:POST %rest:path("/dba/user") %rest:form-param("action", "{$action}") %rest:form-param("name", "{$name}") %rest:form-param("pattern", "{$patterns}") function dba:user-redirect($action as xs:string, $name as xs:string, $patterns as xs:string*) as element(rest:response)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>action</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>patterns</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(rest:response)</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>http://basex.org/modules/web</xqdoc:uri><xqdoc:name>redirect</xqdoc:name></xqdoc:invoked><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>action</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>name</xqdoc:name></xqdoc:ref-variable><xqdoc:ref-variable><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>patterns</xqdoc:name></xqdoc:ref-variable><xqdoc:body>function dba:user-redirect(
  $action    as xs:string,
  $name      as xs:string,
  $patterns  as xs:string*
) as element(rest:response) {
  web:redirect($action, map { 'name': $name, 'pattern': $patterns })
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>