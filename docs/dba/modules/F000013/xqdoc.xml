<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2025-05-17T18:53:12.962+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>dba/databases</xqdoc:uri><xqdoc:name>dba</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Database main page.&#xD;
&#xD;
</xqdoc:description><xqdoc:author>Christian Grün, BaseX Team 2005-23, BSD License</xqdoc:author></xqdoc:comment><xqdoc:body>(:~
 : Database main page.
 :
 : @author Christian Grün, BaseX Team 2005-23, BSD License
 :)
module namespace dba = 'dba/databases';

import module namespace html = 'dba/html' at '../lib/html.xqm';
import module namespace util = 'dba/util' at '../lib/util.xqm';

(:~ Top category :)
declare variable $dba:CAT := 'databases';
(:~ Sub category :)
declare variable $dba:SUB := 'database';

(:~
 : Manages a single database.
 : @param  $name      database
 : @param  $resource  resource
 : @param  $sort      table sort key
 : @param  $page      current page
 : @param  $info      info string
 : @param  $error     error string
 : @return page
 :)
declare
  %rest:GET
  %rest:path('/dba/database')
  %rest:query-param('name',     '{$name}', '')
  %rest:query-param('resource', '{$resource}')
  %rest:query-param('sort',     '{$sort}', '')
  %rest:query-param('page',     '{$page}', 1)
  %rest:query-param('info',     '{$info}')
  %rest:query-param('error',    '{$error}')
  %output:method('html')
function dba:database(
  $name      as xs:string,
  $resource  as xs:string?,
  $sort      as xs:string,
  $page      as xs:integer,
  $info      as xs:string?,
  $error     as xs:string?
) as element() {
  if(not($name)) then web:redirect('databases') else

  let $db-exists := db:exists($name)
  return html:wrap(
    map {
      'header': ($dba:CAT, $name), 'info': $info, 'error': $error,
      'css': 'codemirror/lib/codemirror.css',
      'scripts': ('codemirror/lib/codemirror.js', 'codemirror/mode/xml/xml.js')
    },
    &lt;tr&gt;{
      &lt;td&gt;
        &lt;form action='{ $dba:SUB }' method='post' id='{ $dba:SUB }' class='update'&gt;
          &lt;input type='hidden' name='name' value='{ $name }' id='name'/&gt;
          &lt;h2&gt;{
            html:link('Databases', $dba:CAT), ' » ',
            $name ! (if(empty($resource)) then . else html:link(., $dba:SUB, map { 'name': . } ))
          }&lt;/h2&gt;
          {
            if($db-exists) then (
              let $headers := (
                map { 'key': 'resource' , 'label': 'Name' },
                map { 'key': 'type' , 'label': 'Type' },
                map { 'key': 'binary' , 'label': 'Binary' },
                map { 'key': 'size' , 'label': 'Size', 'type': 'number', 'order': 'desc' }
              )
              let $entries :=
                let $start := util:start($page, $sort)
                let $end := util:end($page, $sort)
                for $res in db:list-details($name)[position() = $start to $end]
                return map {
                  'resource': $res,
                  'type': $res/@type,
                  'binary': if($res/@raw = 'true') then '✓' else '–',
                  'size': $res/@size
                }
              let $buttons := (
                html:button('db-put', 'Put…'),
                html:button('db-delete', 'Delete', true()),
                html:button('db-copy', 'Copy…', false()),
                html:button('db-alter', 'Rename…', false()),
                html:button('db-optimize', 'Optimize…', false(), map { 'class': 'global' })
              )
              let $params := map { 'name': $name }
              let $options := map {
                'sort': $sort,
                'link': $dba:SUB,
                'page': $page,
                'count': count(db:list($name))
              }
              return html:table($headers, $entries, $buttons, $params, $options)
            ) else ()
          }
        &lt;/form&gt;
      &lt;/td&gt;,
      if(not($resource)) then (
        &lt;td class='vertical'/&gt;,
        &lt;td&gt;
          &lt;form action='{ $dba:SUB }' method='post' class='update'&gt;
            &lt;input type='hidden' name='name' value='{ $name }'/&gt;
            &lt;h2&gt;Backups&lt;/h2&gt;
            {
              let $headers := (
                map { 'key': 'backup', 'label': 'Name', 'order': 'desc' },
                map { 'key': 'size', 'label': 'Size', 'type': 'bytes' },
                map { 'key': 'comment', 'label': 'Comment' },
                map { 'key': 'action', 'label': 'Action', 'type': 'dynamic' }
              )
              let $entries :=
                for $backup in db:backups($name)
                order by $backup descending
                return map {
                  'backup': substring-after($backup, $name || '-'),
                  'size': $backup/@size,
                  'comment': $backup/@comment,
                  'action': function() {
                    html:link('Download', 'backup/' || encode-for-uri($backup) || '.zip')
                  }
                }
              let $buttons := (
                html:button('backup-create', 'Create…', false(), map { 'class': 'global' }) update {
                  if($db-exists) then () else insert node attribute disabled { '' } into .
                },
                html:button('backup-restore', 'Restore', true()),
                html:button('backup-drop', 'Drop', true())
              )
              let $params := map { 'name': $name }
              return html:table($headers, $entries, $buttons, $params, map { })
            }
          &lt;/form&gt;
        &lt;/td&gt;
      ),
      &lt;td class='vertical'/&gt;,
      &lt;td&gt;{
        if($resource) then (
          &lt;h2&gt;Resource: { $resource }&lt;/h2&gt;,
          &lt;form action='resource' method='post' id='resources'&gt;
            &lt;input type='hidden' name='name' value='{ $name }'/&gt;
            &lt;input type='hidden' name='resource' value='{ $resource }' id='resource'/&gt;
            {
              html:button('db-rename', 'Rename…'), ' ',
              html:button('db-download', 'Download'), ' ',
              html:button('db-replace', 'Replace…')
            }
          &lt;/form&gt;,
          &lt;b&gt;Enter your query…&lt;/b&gt;,
          &lt;input type='text' style='width:100%' name='input' id='input'
                 onkeyup='queryResource(false)'/&gt;,
          &lt;div class='small'/&gt;,
          &lt;textarea name='output' id='output' readonly='' spellcheck='false'/&gt;,
          html:focus('input'),
          html:js('loadCodeMirror("xml", false, true); queryResource(true);')
        ) else if($db-exists) then (
          &lt;h2&gt;Information&lt;/h2&gt;,
          html:properties(db:info($name))
        ) else ()
      }&lt;/td&gt;
    }&lt;/tr&gt;
  )
};

(:~
 : Redirects to the specified action.
 : @param  $action     action to perform
 : @param  $name       database
 : @param  $resources  resources
 : @param  $backups    backups
 : @return redirection
 :)
declare
  %rest:POST
  %rest:path('/dba/database')
  %rest:form-param('action',   '{$action}')
  %rest:form-param('name',     '{$name}')
  %rest:form-param('resource', '{$resources}')
  %rest:form-param('backup',   '{$backups}')
function dba:database-redirect(
  $action     as xs:string,
  $name       as xs:string,
  $resources  as xs:string*,
  $backups    as xs:string*
) as element(rest:response) {
  web:redirect($action, map { 'name': $name, 'resource': $resources, 'backup': $backups })
};
</xqdoc:body></xqdoc:module><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>dba/html</xqdoc:uri><xqdoc:at>../lib/html.xqm</xqdoc:at></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>dba/util</xqdoc:uri><xqdoc:at>../lib/util.xqm</xqdoc:at></xqdoc:import></xqdoc:imports><xqdoc:namespaces><xqdoc:namespace prefix="dba" uri="dba/databases"/><xqdoc:namespace prefix="html" uri="dba/html"/><xqdoc:namespace prefix="util" uri="dba/util"/><xqdoc:namespace prefix="rest" uri="http://exquery.org/ns/restxq"/><xqdoc:namespace prefix="output" uri="http://www.w3.org/2010/xslt-xquery-serialization"/><xqdoc:namespace prefix="xs" uri="http://www.w3.org/2001/XMLSchema"/><xqdoc:namespace prefix="web" uri="http://basex.org/modules/web"/><xqdoc:namespace prefix="db" uri="http://basex.org/modules/db"/></xqdoc:namespaces><xqdoc:variables><xqdoc:variable><xqdoc:name>dba:CAT</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
Top category</xqdoc:description></xqdoc:comment><xqdoc:body>variable $dba:CAT := 'databases'</xqdoc:body></xqdoc:variable><xqdoc:variable><xqdoc:name>dba:SUB</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
Sub category</xqdoc:description></xqdoc:comment><xqdoc:body>variable $dba:SUB := 'database'</xqdoc:body></xqdoc:variable></xqdoc:variables><xqdoc:functions><xqdoc:function arity="6"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Manages a single database.&#xD;
</xqdoc:description><xqdoc:param>$name      database</xqdoc:param><xqdoc:param>$resource  resource</xqdoc:param><xqdoc:param>$sort      table sort key</xqdoc:param><xqdoc:param>$page      current page</xqdoc:param><xqdoc:param>$info      info string</xqdoc:param><xqdoc:param>$error     error string</xqdoc:param><xqdoc:return>page</xqdoc:return></xqdoc:comment><xqdoc:name>dba:database</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:GET"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/dba/database</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">name</xqdoc:literal><xqdoc:literal type="xs:string">{$name}</xqdoc:literal><xqdoc:literal type="xs:string"/></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">resource</xqdoc:literal><xqdoc:literal type="xs:string">{$resource}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">sort</xqdoc:literal><xqdoc:literal type="xs:string">{$sort}</xqdoc:literal><xqdoc:literal type="xs:string"/></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">page</xqdoc:literal><xqdoc:literal type="xs:string">{$page}</xqdoc:literal><xqdoc:literal type="xs:string">1</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">info</xqdoc:literal><xqdoc:literal type="xs:string">{$info}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">error</xqdoc:literal><xqdoc:literal type="xs:string">{$error}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="output:method"><xqdoc:literal type="xs:string">html</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>function dba:database ( $name as xs:string, $resource as xs:string?, $sort as xs:string, $page as xs:integer, $info as xs:string?, $error as xs:string? ) as element() { if(not($name)) then web:redirect('databases') else let $db-exists := db:exists($name) return html:wrap( map { 'header': ($dba:CAT, $name), 'info': $info, 'error': $error, 'css': 'codemirror/lib/codemirror.css', 'scripts': ('codemirror/lib/codemirror.js', 'codemirror/mode/xml/xml.js') }, &lt;tr&gt;{ &lt;td&gt; &lt;form action='{ $dba:SUB }' method='post' id='{ $dba:SUB }' class='update'&gt; &lt;input type='hidden' name='name' value='{ $name }' id='name'/&gt; &lt;h2&gt;{ html:link('Databases', $dba:CAT), ' » ', $name ! (if(empty($resource)) then . else html:link(., $dba:SUB, map { 'name': . } )) }&lt;/h2&gt; { if($db-exists) then ( let $headers := ( map { 'key': 'resource' , 'label': 'Name' }, map { 'key': 'type' , 'label': 'Type' }, map { 'key': 'binary' , 'label': 'Binary' }, map { 'key': 'size' , 'label': 'Size', 'type': 'number', 'order': 'desc' } ) let $entries := let $start := util:start($page, $sort) let $end := util:end($page, $sort) for $res in db:list-details($name)[position() = $start to $end] return map { 'resource': $res, 'type': $res/@type, 'binary': if($res/@raw = 'true') then '✓' else '–', 'size': $res/@size } let $buttons := ( html:button('db-put', 'Put…'), html:button('db-delete', 'Delete', true()), html:button('db-copy', 'Copy…', false()), html:button('db-alter', 'Rename…', false()), html:button('db-optimize', 'Optimize…', false(), map { 'class': 'global' }) ) let $params := map { 'name': $name } let $options := map { 'sort': $sort, 'link': $dba:SUB, 'page': $page, 'count': count(db:list($name)) } return html:table($headers, $entries, $buttons, $params, $options) ) else () } &lt;/form&gt; &lt;/td&gt;, if(not($resource)) then ( &lt;td class='vertical'/&gt;, &lt;td&gt; &lt;form action='{ $dba:SUB }' method='post' class='update'&gt; &lt;input type='hidden' name='name' value='{ $name }'/&gt; &lt;h2&gt;Backups&lt;/h2&gt; { let $headers := ( map { 'key': 'backup', 'label': 'Name', 'order': 'desc' }, map { 'key': 'size', 'label': 'Size', 'type': 'bytes' }, map { 'key': 'comment', 'label': 'Comment' }, map { 'key': 'action', 'label': 'Action', 'type': 'dynamic' } ) let $entries := for $backup in db:backups($name) order by $backup descending return map { 'backup': substring-after($backup, $name || '-'), 'size': $backup/@size, 'comment': $backup/@comment, 'action': function() { html:link('Download', 'backup/' || encode-for-uri($backup) || '.zip') } } let $buttons := ( html:button('backup-create', 'Create…', false(), map { 'class': 'global' }) update { if($db-exists) then () else insert node attribute disabled { '' } into . }, html:button('backup-restore', 'Restore', true()), html:button('backup-drop', 'Drop', true()) ) let $params := map { 'name': $name } return html:table($headers, $entries, $buttons, $params, map { }) } &lt;/form&gt; &lt;/td&gt; ), &lt;td class='vertical'/&gt;, &lt;td&gt;{ if($resource) then ( &lt;h2&gt;Resource: { $resource }&lt;/h2&gt;, &lt;form action='resource' method='post' id='resources'&gt; &lt;input type='hidden' name='name' value='{ $name }'/&gt; &lt;input type='hidden' name='resource' value='{ $resource }' id='resource'/&gt; { html:button('db-rename', 'Rename…'), ' ', html:button('db-download', 'Download'), ' ', html:button('db-replace', 'Replace…') } &lt;/form&gt;, &lt;b&gt;Enter your query…&lt;/b&gt;, &lt;input type='text' style='width:100%' name='input' id='input' onkeyup='queryResource(false)'/&gt;, &lt;div class='small'/&gt;, &lt;textarea name='output' id='output' readonly='' spellcheck='false'/&gt;, html:focus('input'), html:js('loadCodeMirror("xml", false, true); queryResource(true);') ) else if($db-exists) then ( &lt;h2&gt;Information&lt;/h2&gt;, html:properties(db:info($name)) ) else () }&lt;/td&gt; }&lt;/tr&gt; ) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>resource</xqdoc:name><xqdoc:type occurrence="?">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>sort</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>page</xqdoc:name><xqdoc:type>xs:integer</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>info</xqdoc:name><xqdoc:type occurrence="?">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>error</xqdoc:name><xqdoc:type occurrence="?">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element()</xqdoc:type></xqdoc:return><xqdoc:body>function dba:database(
  $name      as xs:string,
  $resource  as xs:string?,
  $sort      as xs:string,
  $page      as xs:integer,
  $info      as xs:string?,
  $error     as xs:string?
) as element() {
  if(not($name)) then web:redirect('databases') else

  let $db-exists := db:exists($name)
  return html:wrap(
    map {
      'header': ($dba:CAT, $name), 'info': $info, 'error': $error,
      'css': 'codemirror/lib/codemirror.css',
      'scripts': ('codemirror/lib/codemirror.js', 'codemirror/mode/xml/xml.js')
    },
    &lt;tr&gt;{
      &lt;td&gt;
        &lt;form action='{ $dba:SUB }' method='post' id='{ $dba:SUB }' class='update'&gt;
          &lt;input type='hidden' name='name' value='{ $name }' id='name'/&gt;
          &lt;h2&gt;{
            html:link('Databases', $dba:CAT), ' » ',
            $name ! (if(empty($resource)) then . else html:link(., $dba:SUB, map { 'name': . } ))
          }&lt;/h2&gt;
          {
            if($db-exists) then (
              let $headers := (
                map { 'key': 'resource' , 'label': 'Name' },
                map { 'key': 'type' , 'label': 'Type' },
                map { 'key': 'binary' , 'label': 'Binary' },
                map { 'key': 'size' , 'label': 'Size', 'type': 'number', 'order': 'desc' }
              )
              let $entries :=
                let $start := util:start($page, $sort)
                let $end := util:end($page, $sort)
                for $res in db:list-details($name)[position() = $start to $end]
                return map {
                  'resource': $res,
                  'type': $res/@type,
                  'binary': if($res/@raw = 'true') then '✓' else '–',
                  'size': $res/@size
                }
              let $buttons := (
                html:button('db-put', 'Put…'),
                html:button('db-delete', 'Delete', true()),
                html:button('db-copy', 'Copy…', false()),
                html:button('db-alter', 'Rename…', false()),
                html:button('db-optimize', 'Optimize…', false(), map { 'class': 'global' })
              )
              let $params := map { 'name': $name }
              let $options := map {
                'sort': $sort,
                'link': $dba:SUB,
                'page': $page,
                'count': count(db:list($name))
              }
              return html:table($headers, $entries, $buttons, $params, $options)
            ) else ()
          }
        &lt;/form&gt;
      &lt;/td&gt;,
      if(not($resource)) then (
        &lt;td class='vertical'/&gt;,
        &lt;td&gt;
          &lt;form action='{ $dba:SUB }' method='post' class='update'&gt;
            &lt;input type='hidden' name='name' value='{ $name }'/&gt;
            &lt;h2&gt;Backups&lt;/h2&gt;
            {
              let $headers := (
                map { 'key': 'backup', 'label': 'Name', 'order': 'desc' },
                map { 'key': 'size', 'label': 'Size', 'type': 'bytes' },
                map { 'key': 'comment', 'label': 'Comment' },
                map { 'key': 'action', 'label': 'Action', 'type': 'dynamic' }
              )
              let $entries :=
                for $backup in db:backups($name)
                order by $backup descending
                return map {
                  'backup': substring-after($backup, $name || '-'),
                  'size': $backup/@size,
                  'comment': $backup/@comment,
                  'action': function() {
                    html:link('Download', 'backup/' || encode-for-uri($backup) || '.zip')
                  }
                }
              let $buttons := (
                html:button('backup-create', 'Create…', false(), map { 'class': 'global' }) update {
                  if($db-exists) then () else insert node attribute disabled { '' } into .
                },
                html:button('backup-restore', 'Restore', true()),
                html:button('backup-drop', 'Drop', true())
              )
              let $params := map { 'name': $name }
              return html:table($headers, $entries, $buttons, $params, map { })
            }
          &lt;/form&gt;
        &lt;/td&gt;
      ),
      &lt;td class='vertical'/&gt;,
      &lt;td&gt;{
        if($resource) then (
          &lt;h2&gt;Resource: { $resource }&lt;/h2&gt;,
          &lt;form action='resource' method='post' id='resources'&gt;
            &lt;input type='hidden' name='name' value='{ $name }'/&gt;
            &lt;input type='hidden' name='resource' value='{ $resource }' id='resource'/&gt;
            {
              html:button('db-rename', 'Rename…'), ' ',
              html:button('db-download', 'Download'), ' ',
              html:button('db-replace', 'Replace…')
            }
          &lt;/form&gt;,
          &lt;b&gt;Enter your query…&lt;/b&gt;,
          &lt;input type='text' style='width:100%' name='input' id='input'
                 onkeyup='queryResource(false)'/&gt;,
          &lt;div class='small'/&gt;,
          &lt;textarea name='output' id='output' readonly='' spellcheck='false'/&gt;,
          html:focus('input'),
          html:js('loadCodeMirror("xml", false, true); queryResource(true);')
        ) else if($db-exists) then (
          &lt;h2&gt;Information&lt;/h2&gt;,
          html:properties(db:info($name))
        ) else ()
      }&lt;/td&gt;
    }&lt;/tr&gt;
  )
}</xqdoc:body></xqdoc:function><xqdoc:function arity="4"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Redirects to the specified action.&#xD;
</xqdoc:description><xqdoc:param>$action     action to perform</xqdoc:param><xqdoc:param>$name       database</xqdoc:param><xqdoc:param>$resources  resources</xqdoc:param><xqdoc:param>$backups    backups</xqdoc:param><xqdoc:return>redirection</xqdoc:return></xqdoc:comment><xqdoc:name>dba:database-redirect</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:POST"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/dba/database</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:form-param"><xqdoc:literal type="xs:string">action</xqdoc:literal><xqdoc:literal type="xs:string">{$action}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:form-param"><xqdoc:literal type="xs:string">name</xqdoc:literal><xqdoc:literal type="xs:string">{$name}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:form-param"><xqdoc:literal type="xs:string">resource</xqdoc:literal><xqdoc:literal type="xs:string">{$resources}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:form-param"><xqdoc:literal type="xs:string">backup</xqdoc:literal><xqdoc:literal type="xs:string">{$backups}</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>function dba:database-redirect ( $action as xs:string, $name as xs:string, $resources as xs:string*, $backups as xs:string* ) as element(rest:response) { web:redirect($action, map { 'name': $name, 'resource': $resources, 'backup': $backups }) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>action</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>resources</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>backups</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(rest:response)</xqdoc:type></xqdoc:return><xqdoc:body>function dba:database-redirect(
  $action     as xs:string,
  $name       as xs:string,
  $resources  as xs:string*,
  $backups    as xs:string*
) as element(rest:response) {
  web:redirect($action, map { 'name': $name, 'resource': $resources, 'backup': $backups })
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>