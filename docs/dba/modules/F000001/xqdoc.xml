<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2025-05-17T18:53:12.962+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>dba/databases</xqdoc:uri><xqdoc:name>dba</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Create backup.&#xD;
&#xD;
</xqdoc:description><xqdoc:author>Christian Grün, BaseX Team 2005-23, BSD License</xqdoc:author></xqdoc:comment><xqdoc:body>(:~
 : Create backup.
 :
 : @author Christian Grün, BaseX Team 2005-23, BSD License
 :)
module namespace dba = 'dba/databases';

import module namespace html = 'dba/html' at '../../lib/html.xqm';
import module namespace util = 'dba/util' at '../../lib/util.xqm';

(:~ Top category :)
declare variable $dba:CAT := 'databases';
(:~ Sub category :)
declare variable $dba:SUB := 'database';

(:~
 : Form for creating a backup.
 : @param  $name  database (empty string for general data)
 : @return page
 :)
declare
  %rest:GET
  %rest:path('/dba/backup-create')
  %rest:query-param('name', '{$name}', '')
  %output:method('html')
function dba:backup-create(
  $name  as xs:string
) as element(html) {
  html:wrap(map { 'header': ($dba:CAT, $name) },
    &lt;tr&gt;
      &lt;td&gt;
        &lt;form action='backup-create' method='post' autocomplete='off'&gt;
          &lt;input type='hidden' name='name' value='{ $name }'/&gt;
          &lt;h2&gt;{
            html:link('Databases', $dba:CAT), ' » ',
            (html:link($name, $dba:SUB, map { 'name': $name }), ' » ')[$name],
            html:button('backup-create', 'Create Backup')
          }&lt;/h2&gt;
          &lt;table&gt;
            &lt;tr&gt;
              &lt;td&gt;Comment:&lt;/td&gt;
              &lt;td&gt;
                &lt;input type='text' name='comment' id='comment' size='64' placeholder='optional'/&gt;
                { html:focus('comment') }
              &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;Compress Files:&lt;/td&gt;
              &lt;td&gt;{
                html:checkbox('compress', 'true', true(), '')
              }&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;
        &lt;/form&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  )
};

(:~
 : Creates a backup.
 : @param  $name      database (empty string for general data)
 : @param  $comment   comment
 : @param  $compress  compress files
 : @return redirection
 :)
declare
  %updating
  %rest:POST
  %rest:path('/dba/backup-create')
  %rest:query-param('name',     '{$name}', '')
  %rest:query-param('comment',  '{$comment}')
  %rest:query-param('compress', '{$compress}')
function dba:db-rename(
  $name      as xs:string,
  $comment   as xs:string,
  $compress  as xs:string?
) as empty-sequence() {
  try {
    db:create-backup($name, map { 'comment': $comment, 'compress': boolean($compress) }),
    util:redirect($dba:SUB, map { 'name': $name, 'info': 'Backup was created.' })
  } catch * {
    util:redirect($dba:SUB, map { 'name': $name, 'error': $err:description })
  }
};

(:~
 : Creates backups.
 : @param  $names  names of databases
 : @return redirection
 :)
declare
  %updating
  %rest:GET
  %rest:path('/dba/backup-create-all')
  %rest:query-param('name', '{$names}')
function dba:db-optimize-all(
  $names  as xs:string*
) as empty-sequence() {
  try {
    $names ! db:create-backup(.),
    util:redirect($dba:CAT, map { 'info': util:info($names, 'database', 'backed up') })
  } catch * {
    util:redirect($dba:CAT, map { 'error': $err:description })
  }
};
</xqdoc:body></xqdoc:module><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>dba/html</xqdoc:uri><xqdoc:at>../../lib/html.xqm</xqdoc:at></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>dba/util</xqdoc:uri><xqdoc:at>../../lib/util.xqm</xqdoc:at></xqdoc:import></xqdoc:imports><xqdoc:namespaces><xqdoc:namespace prefix="dba" uri="dba/databases"/><xqdoc:namespace prefix="html" uri="dba/html"/><xqdoc:namespace prefix="util" uri="dba/util"/><xqdoc:namespace prefix="rest" uri="http://exquery.org/ns/restxq"/><xqdoc:namespace prefix="output" uri="http://www.w3.org/2010/xslt-xquery-serialization"/><xqdoc:namespace prefix="xs" uri="http://www.w3.org/2001/XMLSchema"/><xqdoc:namespace prefix="db" uri="http://basex.org/modules/db"/><xqdoc:namespace prefix="err" uri="http://www.w3.org/2005/xqt-errors"/></xqdoc:namespaces><xqdoc:variables><xqdoc:variable><xqdoc:name>dba:CAT</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
Top category</xqdoc:description></xqdoc:comment><xqdoc:body>variable $dba:CAT := 'databases'</xqdoc:body></xqdoc:variable><xqdoc:variable><xqdoc:name>dba:SUB</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
Sub category</xqdoc:description></xqdoc:comment><xqdoc:body>variable $dba:SUB := 'database'</xqdoc:body></xqdoc:variable></xqdoc:variables><xqdoc:functions><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Form for creating a backup.&#xD;
</xqdoc:description><xqdoc:param>$name  database (empty string for general data)</xqdoc:param><xqdoc:return>page</xqdoc:return></xqdoc:comment><xqdoc:name>dba:backup-create</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:GET"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/dba/backup-create</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">name</xqdoc:literal><xqdoc:literal type="xs:string">{$name}</xqdoc:literal><xqdoc:literal type="xs:string"/></xqdoc:annotation><xqdoc:annotation name="output:method"><xqdoc:literal type="xs:string">html</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>function dba:backup-create ( $name as xs:string ) as element(html) { html:wrap(map { 'header': ($dba:CAT, $name) }, &lt;tr&gt; &lt;td&gt; &lt;form action='backup-create' method='post' autocomplete='off'&gt; &lt;input type='hidden' name='name' value='{ $name }'/&gt; &lt;h2&gt;{ html:link('Databases', $dba:CAT), ' » ', (html:link($name, $dba:SUB, map { 'name': $name }), ' » ')[$name], html:button('backup-create', 'Create Backup') }&lt;/h2&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;Comment:&lt;/td&gt; &lt;td&gt; &lt;input type='text' name='comment' id='comment' size='64' placeholder='optional'/&gt; { html:focus('comment') } &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Compress Files:&lt;/td&gt; &lt;td&gt;{ html:checkbox('compress', 'true', true(), '') }&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;/td&gt; &lt;/tr&gt; ) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(html)</xqdoc:type></xqdoc:return><xqdoc:body>function dba:backup-create(
  $name  as xs:string
) as element(html) {
  html:wrap(map { 'header': ($dba:CAT, $name) },
    &lt;tr&gt;
      &lt;td&gt;
        &lt;form action='backup-create' method='post' autocomplete='off'&gt;
          &lt;input type='hidden' name='name' value='{ $name }'/&gt;
          &lt;h2&gt;{
            html:link('Databases', $dba:CAT), ' » ',
            (html:link($name, $dba:SUB, map { 'name': $name }), ' » ')[$name],
            html:button('backup-create', 'Create Backup')
          }&lt;/h2&gt;
          &lt;table&gt;
            &lt;tr&gt;
              &lt;td&gt;Comment:&lt;/td&gt;
              &lt;td&gt;
                &lt;input type='text' name='comment' id='comment' size='64' placeholder='optional'/&gt;
                { html:focus('comment') }
              &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;Compress Files:&lt;/td&gt;
              &lt;td&gt;{
                html:checkbox('compress', 'true', true(), '')
              }&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;
        &lt;/form&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  )
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Creates a backup.&#xD;
</xqdoc:description><xqdoc:param>$name      database (empty string for general data)</xqdoc:param><xqdoc:param>$comment   comment</xqdoc:param><xqdoc:param>$compress  compress files</xqdoc:param><xqdoc:return>redirection</xqdoc:return></xqdoc:comment><xqdoc:name>dba:db-rename</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="updating"/><xqdoc:annotation name="rest:POST"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/dba/backup-create</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">name</xqdoc:literal><xqdoc:literal type="xs:string">{$name}</xqdoc:literal><xqdoc:literal type="xs:string"/></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">comment</xqdoc:literal><xqdoc:literal type="xs:string">{$comment}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">compress</xqdoc:literal><xqdoc:literal type="xs:string">{$compress}</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>function dba:db-rename ( $name as xs:string, $comment as xs:string, $compress as xs:string? ) as empty-sequence() { try { db:create-backup($name, map { 'comment': $comment, 'compress': boolean($compress) }), util:redirect($dba:SUB, map { 'name': $name, 'info': 'Backup was created.' }) } catch * { util:redirect($dba:SUB, map { 'name': $name, 'error': $err:description }) } }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>comment</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>compress</xqdoc:name><xqdoc:type occurrence="?">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>empty-sequence</xqdoc:type></xqdoc:return><xqdoc:body>function dba:db-rename(
  $name      as xs:string,
  $comment   as xs:string,
  $compress  as xs:string?
) as empty-sequence() {
  try {
    db:create-backup($name, map { 'comment': $comment, 'compress': boolean($compress) }),
    util:redirect($dba:SUB, map { 'name': $name, 'info': 'Backup was created.' })
  } catch * {
    util:redirect($dba:SUB, map { 'name': $name, 'error': $err:description })
  }
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Creates backups.&#xD;
</xqdoc:description><xqdoc:param>$names  names of databases</xqdoc:param><xqdoc:return>redirection</xqdoc:return></xqdoc:comment><xqdoc:name>dba:db-optimize-all</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="updating"/><xqdoc:annotation name="rest:GET"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/dba/backup-create-all</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">name</xqdoc:literal><xqdoc:literal type="xs:string">{$names}</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>function dba:db-optimize-all ( $names as xs:string* ) as empty-sequence() { try { $names ! db:create-backup(.), util:redirect($dba:CAT, map { 'info': util:info($names, 'database', 'backed up') }) } catch * { util:redirect($dba:CAT, map { 'error': $err:description }) } }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>names</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>empty-sequence</xqdoc:type></xqdoc:return><xqdoc:body>function dba:db-optimize-all(
  $names  as xs:string*
) as empty-sequence() {
  try {
    $names ! db:create-backup(.),
    util:redirect($dba:CAT, map { 'info': util:info($names, 'database', 'backed up') })
  } catch * {
    util:redirect($dba:CAT, map { 'error': $err:description })
  }
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>