<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2025-05-17T18:53:12.962+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>dba/users</xqdoc:uri><xqdoc:name>dba</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Users page.&#xD;
&#xD;
</xqdoc:description><xqdoc:author>Christian Grün, BaseX Team 2005-23, BSD License</xqdoc:author></xqdoc:comment><xqdoc:body>(:~
 : Users page.
 :
 : @author Christian Grün, BaseX Team 2005-23, BSD License
 :)
module namespace dba = 'dba/users';

import module namespace config = 'dba/config' at '../lib/config.xqm';
import module namespace html = 'dba/html' at '../lib/html.xqm';

(:~ Top category :)
declare variable $dba:CAT := 'users';

(:~
 : Returns the users page.
 : @param  $sort   table sort key
 : @param  $error  error message
 : @param  $info   info message
 : @return page
 :)
declare
  %rest:GET
  %rest:path('/dba/users')
  %rest:query-param('sort',  '{$sort}', 'name')
  %rest:query-param('error', '{$error}')
  %rest:query-param('info',  '{$info}')
  %output:method('html')
function dba:users(
  $sort   as xs:string,
  $error  as xs:string?,
  $info   as xs:string?
) as element(html) {
  html:wrap(
    map {
      'header': $dba:CAT, 'info': $info, 'error': $error,
      'css': 'codemirror/lib/codemirror.css',
      'scripts': ('codemirror/lib/codemirror.js', 'codemirror/mode/xml/xml.js')
    },
    &lt;tr&gt;
      &lt;td&gt;
        &lt;form action='{ $dba:CAT }' method='post' class='update'&gt;
        &lt;h2&gt;Users&lt;/h2&gt;
        {
          let $headers := (
            map { 'key': 'name', 'label': 'Name' },
            map { 'key': 'permission', 'label': 'Permission' },
            map { 'key': 'you', 'label': 'You' }
          )
          let $entries := (
            let $current := session:get($config:SESSION-KEY)
            for $user in user:list-details()
            let $name := string($user/@name)
            return map {
              'name': $name,
              'permission': $user/@permission,
              'you': if($current = $name) then '✓' else '–'
            }
          )
          let $buttons := (
            html:button('user-create', 'Create…'),
            html:button('user-drop', 'Drop', true())
          )
          let $options := map { 'link': 'user', 'sort': $sort }
          return html:table($headers, $entries, $buttons, map { }, $options)
        }
        &lt;/form&gt;
        &lt;div&gt;&amp;#xa0;&lt;/div&gt;
      &lt;/td&gt;
      &lt;td class='vertical'/&gt;
      &lt;td&gt;
        &lt;form action='users-info' method='post'&gt;{
          &lt;h2&gt;User Information&lt;/h2&gt;,
          html:button('update', 'Update'),
          &lt;div class='small'/&gt;,
          &lt;textarea name='info' id='editor' spellcheck='false'&gt;{
            serialize(user:info(), map { 'indent': true() } )
          }&lt;/textarea&gt;,
          html:js('loadCodeMirror("xml", true);')
        }&lt;/form&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  )
};

(:~
 : Redirects to the specified action.
 : @param  $action  action to perform
 : @param  $names   names of users
 : @param  $ids     ids
 : @return redirection
 :)
declare
  %rest:POST
  %rest:path('/dba/users')
  %rest:query-param('action', '{$action}')
  %rest:query-param('name',   '{$names}')
  %rest:query-param('id',     '{$ids}')
function dba:users-redirect(
  $action  as xs:string,
  $names   as xs:string*,
  $ids     as xs:string*
) as element(rest:response) {
  web:redirect($action,
    if($action = 'user-create') then map { }
    else map { 'name': $names, 'redirect': $dba:CAT }
  )
};
</xqdoc:body></xqdoc:module><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>dba/config</xqdoc:uri><xqdoc:at>../lib/config.xqm</xqdoc:at></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>dba/html</xqdoc:uri><xqdoc:at>../lib/html.xqm</xqdoc:at></xqdoc:import></xqdoc:imports><xqdoc:namespaces><xqdoc:namespace prefix="dba" uri="dba/users"/><xqdoc:namespace prefix="config" uri="dba/config"/><xqdoc:namespace prefix="html" uri="dba/html"/><xqdoc:namespace prefix="rest" uri="http://exquery.org/ns/restxq"/><xqdoc:namespace prefix="output" uri="http://www.w3.org/2010/xslt-xquery-serialization"/><xqdoc:namespace prefix="xs" uri="http://www.w3.org/2001/XMLSchema"/><xqdoc:namespace prefix="session" uri="http://basex.org/modules/session"/><xqdoc:namespace prefix="user" uri="http://basex.org/modules/user"/><xqdoc:namespace prefix="web" uri="http://basex.org/modules/web"/></xqdoc:namespaces><xqdoc:variables><xqdoc:variable><xqdoc:name>dba:CAT</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
Top category</xqdoc:description></xqdoc:comment><xqdoc:body>variable $dba:CAT := 'users'</xqdoc:body></xqdoc:variable></xqdoc:variables><xqdoc:functions><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Returns the users page.&#xD;
</xqdoc:description><xqdoc:param>$sort   table sort key</xqdoc:param><xqdoc:param>$error  error message</xqdoc:param><xqdoc:param>$info   info message</xqdoc:param><xqdoc:return>page</xqdoc:return></xqdoc:comment><xqdoc:name>dba:users</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:GET"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/dba/users</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">sort</xqdoc:literal><xqdoc:literal type="xs:string">{$sort}</xqdoc:literal><xqdoc:literal type="xs:string">name</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">error</xqdoc:literal><xqdoc:literal type="xs:string">{$error}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">info</xqdoc:literal><xqdoc:literal type="xs:string">{$info}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="output:method"><xqdoc:literal type="xs:string">html</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>function dba:users ( $sort as xs:string, $error as xs:string?, $info as xs:string? ) as element(html) { html:wrap( map { 'header': $dba:CAT, 'info': $info, 'error': $error, 'css': 'codemirror/lib/codemirror.css', 'scripts': ('codemirror/lib/codemirror.js', 'codemirror/mode/xml/xml.js') }, &lt;tr&gt; &lt;td&gt; &lt;form action='{ $dba:CAT }' method='post' class='update'&gt; &lt;h2&gt;Users&lt;/h2&gt; { let $headers := ( map { 'key': 'name', 'label': 'Name' }, map { 'key': 'permission', 'label': 'Permission' }, map { 'key': 'you', 'label': 'You' } ) let $entries := ( let $current := session:get($config:SESSION-KEY) for $user in user:list-details() let $name := string($user/@name) return map { 'name': $name, 'permission': $user/@permission, 'you': if($current = $name) then '✓' else '–' } ) let $buttons := ( html:button('user-create', 'Create…'), html:button('user-drop', 'Drop', true()) ) let $options := map { 'link': 'user', 'sort': $sort } return html:table($headers, $entries, $buttons, map { }, $options) } &lt;/form&gt; &lt;div&gt;&amp;#xa0;&lt;/div&gt; &lt;/td&gt; &lt;td class='vertical'/&gt; &lt;td&gt; &lt;form action='users-info' method='post'&gt;{ &lt;h2&gt;User Information&lt;/h2&gt;, html:button('update', 'Update'), &lt;div class='small'/&gt;, &lt;textarea name='info' id='editor' spellcheck='false'&gt;{ serialize(user:info(), map { 'indent': true() } ) }&lt;/textarea&gt;, html:js('loadCodeMirror("xml", true);') }&lt;/form&gt; &lt;/td&gt; &lt;/tr&gt; ) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>sort</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>error</xqdoc:name><xqdoc:type occurrence="?">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>info</xqdoc:name><xqdoc:type occurrence="?">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(html)</xqdoc:type></xqdoc:return><xqdoc:body>function dba:users(
  $sort   as xs:string,
  $error  as xs:string?,
  $info   as xs:string?
) as element(html) {
  html:wrap(
    map {
      'header': $dba:CAT, 'info': $info, 'error': $error,
      'css': 'codemirror/lib/codemirror.css',
      'scripts': ('codemirror/lib/codemirror.js', 'codemirror/mode/xml/xml.js')
    },
    &lt;tr&gt;
      &lt;td&gt;
        &lt;form action='{ $dba:CAT }' method='post' class='update'&gt;
        &lt;h2&gt;Users&lt;/h2&gt;
        {
          let $headers := (
            map { 'key': 'name', 'label': 'Name' },
            map { 'key': 'permission', 'label': 'Permission' },
            map { 'key': 'you', 'label': 'You' }
          )
          let $entries := (
            let $current := session:get($config:SESSION-KEY)
            for $user in user:list-details()
            let $name := string($user/@name)
            return map {
              'name': $name,
              'permission': $user/@permission,
              'you': if($current = $name) then '✓' else '–'
            }
          )
          let $buttons := (
            html:button('user-create', 'Create…'),
            html:button('user-drop', 'Drop', true())
          )
          let $options := map { 'link': 'user', 'sort': $sort }
          return html:table($headers, $entries, $buttons, map { }, $options)
        }
        &lt;/form&gt;
        &lt;div&gt;&amp;#xa0;&lt;/div&gt;
      &lt;/td&gt;
      &lt;td class='vertical'/&gt;
      &lt;td&gt;
        &lt;form action='users-info' method='post'&gt;{
          &lt;h2&gt;User Information&lt;/h2&gt;,
          html:button('update', 'Update'),
          &lt;div class='small'/&gt;,
          &lt;textarea name='info' id='editor' spellcheck='false'&gt;{
            serialize(user:info(), map { 'indent': true() } )
          }&lt;/textarea&gt;,
          html:js('loadCodeMirror("xml", true);')
        }&lt;/form&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  )
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Redirects to the specified action.&#xD;
</xqdoc:description><xqdoc:param>$action  action to perform</xqdoc:param><xqdoc:param>$names   names of users</xqdoc:param><xqdoc:param>$ids     ids</xqdoc:param><xqdoc:return>redirection</xqdoc:return></xqdoc:comment><xqdoc:name>dba:users-redirect</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:POST"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/dba/users</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">action</xqdoc:literal><xqdoc:literal type="xs:string">{$action}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">name</xqdoc:literal><xqdoc:literal type="xs:string">{$names}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">id</xqdoc:literal><xqdoc:literal type="xs:string">{$ids}</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>function dba:users-redirect ( $action as xs:string, $names as xs:string*, $ids as xs:string* ) as element(rest:response) { web:redirect($action, if($action = 'user-create') then map { } else map { 'name': $names, 'redirect': $dba:CAT } ) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>action</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>names</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>ids</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(rest:response)</xqdoc:type></xqdoc:return><xqdoc:body>function dba:users-redirect(
  $action  as xs:string,
  $names   as xs:string*,
  $ids     as xs:string*
) as element(rest:response) {
  web:redirect($action,
    if($action = 'user-create') then map { }
    else map { 'name': $names, 'redirect': $dba:CAT }
  )
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>