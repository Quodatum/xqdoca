<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2019-06-06T22:43:09.974+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>dba/html</xqdoc:uri><xqdoc:name>html.xqm</xqdoc:name><xqdoc:comment><xqdoc:description>Provides HTML components.</xqdoc:description><xqdoc:author>Christian Grün, BaseX Team 2005-19, BSD License</xqdoc:author><xqdoc:custom tag="__source">modules/html.xqm</xqdoc:custom></xqdoc:comment><xqdoc:body>(:~
 : Provides HTML components.
 :
 : @author Christian Grün, BaseX Team 2005-19, BSD License
 :)
module namespace html = 'dba/html';

import module namespace options = 'dba/options' at 'options.xqm';
import module namespace session = 'dba/session' at 'session.xqm';
import module namespace util = 'dba/util' at 'util.xqm';

(: Number formats. :)
declare variable $html:NUMBER := ('decimal', 'number', 'bytes');

(:~
 : Extends the specified table rows with the page template.
 : @param  $rows  tr elements
 : @return HTML page
 :)
declare function html:wrap(
  $rows  as element(tr)+
) as element(html) {
  html:wrap(map { }, $rows)
};

(:~
 : Extends the specified table rows with the page template.
 : The following options can be specified:
 : &lt;ul&gt;
 :   &lt;li&gt;&lt;b&gt;header&lt;/b&gt;: page headers&lt;/li&gt;
 :   &lt;li&gt;&lt;b&gt;error&lt;/b&gt;: error string&lt;/li&gt;
 :   &lt;li&gt;&lt;b&gt;css&lt;/b&gt;: CSS files&lt;/li&gt;
 :   &lt;li&gt;&lt;b&gt;scripts&lt;/b&gt;: JavaScript files&lt;/li&gt;
 : &lt;/ul&gt;
 : @param  $options  options
 : @param  $rows     tr elements
 : @return page
 :)
declare function html:wrap(
  $options  as map(*),
  $rows     as element(tr)+
) as element(html) {
  let $header := head($options?header) ! util:capitalize(.)
  let $user := $session:VALUE
  return &lt;html xml:space="preserve"&gt;
    &lt;head&gt;
      &lt;meta charset="utf-8"/&gt;
      &lt;title&gt;DBA{ ($header, tail($options?header)) ! (' » ' || .) }&lt;/title&gt;
      &lt;meta name="description" content="Database Administration"/&gt;
      &lt;meta name="author" content="BaseX Team 2005-19, BSD License"/&gt;
      &lt;link rel="stylesheet" type="text/css" href="static/style.css"/&gt;
      { $options?css ! &lt;link rel="stylesheet" type="text/css" href="static/{ . }"/&gt; }
      &lt;script type="text/javascript" src="static/js.js"/&gt;
      { $options?scripts ! &lt;script type="text/javascript" src="static/{ . }"/&gt; }
    &lt;/head&gt;
    &lt;body&gt;
      &lt;table cellpadding='0' cellspacing='0'&gt;
        &lt;tr&gt;
          &lt;td class='slick'&gt;
            &lt;table width='100%' cellpadding='0' cellspacing='0'&gt;
              &lt;tr&gt;
                &lt;td&gt;{
                  &lt;span style='float:left'&gt;
                    &lt;h1&gt;BaseX Database Administration&lt;/h1&gt;
                  &lt;/span&gt;,
                  if($user) then (
                    &lt;span style='float:right'&gt;
                      &lt;b&gt;{ $user }&lt;/b&gt; (&lt;a href='logout'&gt;logout&lt;/a&gt;)
                    &lt;/span&gt;
                  ) else ()
                }&lt;/td&gt;
              &lt;/tr&gt;
              &lt;tr&gt;
                &lt;td&gt;
                  &lt;div class='ellipsis'&gt;{
                    if($user) then (
                      let $cats := (
                        for $cat in ('Logs', 'Databases', 'Queries', 'Files', 'Jobs',
                          'Users', 'Sessions', 'Settings')
                        let $link := &lt;a href="{ lower-case($cat) }"&gt;{ $cat }&lt;/a&gt;
                        return if($link = $header) then (
                          &lt;b&gt;{ $link }&lt;/b&gt;
                        ) else (
                          $link
                        )
                      )
                      return (
                        head($cats),
                        tail($cats) ! (' · ', .),
                        (1 to 3) ! '&amp;#x2000;'
                      )
                    ) else (
                      &lt;div class='note'&gt;
                        Please enter your admin credentials:
                      &lt;/div&gt;
                    ),
                    &lt;span&gt;{
                      element b {
                        attribute id { 'info' },
                        let $error := $options?error[.], $info := $options?info[.]
                        return if($error) then (
                          attribute class { 'error' }, $error
                        ) else if($info) then (
                          attribute class { 'info' }, $info
                        ) else ()
                      }
                    }&lt;/span&gt;
                  }&lt;/div&gt;
                  &lt;hr/&gt;
                &lt;/td&gt;
              &lt;/tr&gt;
            &lt;/table&gt;
          &lt;/td&gt;
          &lt;td class='slick'&gt;
            &lt;a href='/'&gt;&lt;img src='static/basex.svg'/&gt;&lt;/a&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/table&gt;
      &lt;table width='100%'&gt;{ $rows }&lt;/table&gt;
      &lt;hr/&gt;
      &lt;div class='right'&gt;&lt;sup&gt;BaseX Team 2005-19, BSD License&lt;/sup&gt;&lt;/div&gt;
      &lt;div class='small'/&gt;
      { html:js('buttons();') }
    &lt;/body&gt;
  &lt;/html&gt;
};

(:~
 : Creates an option checkbox.
 : @param  $value  value
 : @param  $label  label
 : @param  $opts   checked options
 : @return checkbox
 :)
declare function html:option(
  $value  as xs:string,
  $label  as xs:string,
  $opts   as xs:string*
) as node()+ {
  html:checkbox('opts', $value, $opts = $value, $label)
};

(:~
 : Creates a checkbox.
 : @param  $name     name of checkbox
 : @param  $value    value
 : @param  $checked  checked state
 : @param  $label    label
 : @return checkbox
 :)
declare function html:checkbox(
  $name     as xs:string,
  $value    as xs:string,
  $checked  as xs:boolean,
  $label    as xs:string
) as node()+ {
  html:checkbox($label, map:merge((
    map { 'name':  $name },
    map { 'value': $value },
    if($checked) then map { 'checked': $checked } else ()
  )))
};

(:~
 : Creates a checkbox.
 : @param  $label  label of checkbox
 : @param  $map    additional attributes
 : @return checkbox
 :)
declare function html:checkbox(
  $label   as xs:string,
  $map     as map(*)
) as node()+ {
  element input {
    attribute type { 'checkbox' },
    map:for-each($map, function($key, $value) { attribute { $key } { $value } })
  },
  text { $label },
  element br { }
};

(:~
 : Creates a button.
 : @param  $value  button value
 : @param  $label  label
 : @return button
 :)
declare function html:button(
  $value  as xs:string,
  $label  as xs:string
) as element(button) {
  html:button($value, $label, false())
};

(:~
 : Creates a button.
 : @param  $value    button value
 : @param  $label    label
 : @param  $confirm  confirm click
 : @return button
 :)
declare function html:button(
  $value    as xs:string,
  $label    as xs:string,
  $confirm  as xs:boolean
) as element(button) {
  html:button($value, $label, $confirm, ())
};

(:~
 : Creates a button.
 : @param  $value    button value
 : @param  $label    label
 : @param  $confirm  confirm click
 : @param  $atts     additional attributes
 : @return button
 :)
declare function html:button(
  $value    as xs:string,
  $label    as xs:string,
  $confirm  as xs:boolean,
  $atts     as map(xs:string, xs:string)?
) as element(button) {
  element button {
    attribute name { 'action' },
    attribute value { $value },
    if($confirm) then (
      attribute onclick { 'return confirm("Are you sure?");' }
    ) else (),
    if(exists($atts)) then (
      map:for-each($atts, function($key, $value) { attribute { $key } { $value } })
    ) else (),
    $label
  }
};

(:~
 : Creates a property list.
 : @param  $props  properties
 : @return table
 :)
declare function html:properties(
  $props  as element()
) as element(table) {
  &lt;table&gt;{
    for $header in $props/*
    return (
      &lt;tr&gt;
        &lt;th colspan='2' align='left'&gt;
          &lt;h3&gt;{ upper-case(name($header)) }&lt;/h3&gt;
        &lt;/th&gt;
      &lt;/tr&gt;,
      for $option in $header/*
      let $value := $option/data()
      return &lt;tr&gt;
        &lt;td&gt;&lt;b&gt;{ upper-case($option/name()) }&lt;/b&gt;&lt;/td&gt;
        &lt;td&gt;{
          if($value = 'true') then '✓'
          else if($value = 'false') then '–'
          else $value
        }&lt;/td&gt;
      &lt;/tr&gt;
    )
  }&lt;/table&gt;
};

(:~
 : Creates a table for the specified entries.
 : * The table format is specified by the table headers:
 :   * The element names serve as column keys.
 :   * The string values are the header labels.
 :   * The 'type' attribute defines how the values are formatted and sorted:
 :     * 'number': sorted as numbers
 :     * 'decimal': sorted as numbers, output with two decimal digits
 :     * 'bytes': sorted as numbers, output in a human-readable format
 :     * 'date', 'dateTime', 'time': sorted and output as dates
 :     * 'xml': function generating XML; sorted as strings, output as XML
 :     * 'id': suppressed (only used for creating checkboxes)
 :     * otherwise, sorted and output as strings
 :   * The 'order' attribute defines how sorted values will be ordered:
 :     * 'desc': descending order
 :     * otherwise, ascending order
 :   * The 'main' attribute indicates which column is the main column
 : * The supplied table rows are supplied as elements. Values are contained in attributes; their
 :   names represents the column key.
 : * Supplied buttons will placed on top of the table.
 : * Query parameters will be included in table links.
 : * The options argument can have the following keys:
 :   * 'sort': argument contains the key of the ordered column.
 :   * 'link': argument contains a function for generating a link reference.
 :   * 'page': currently displayed page
 :   * 'count': maximum number of results
 :
 : @param  $headers  table headers
 : @param  $entries  table entries
 : @param  $buttons  buttons
 : @param  $params   additional query parameters
 : @param  $options  additional options
 : @return table
 :)
declare function html:table(
  $headers  as map(*)*,
  $entries  as map(*)*,
  $buttons  as element(button)*,
  $params   as map(*),
  $options  as map(*)
) as element()+ {
  (: display buttons :)
  if($buttons) then (
    for $button in $buttons
    return ($button, &lt;span&gt; &lt;/span&gt;),
    &lt;br/&gt;,
    &lt;div class='small'/&gt;
  ) else (),

  (: sort entries :)
  let $sort := $options?sort
  let $sort-key := head(($sort[.], $headers[1]?key))
  let $sorted-entries := if($sort) then (
    let $sort-header := $headers[?key = $sort-key]
    let $sort-xml := $sort-header?type = 'xml'
    let $sort-value := (
      let $sort-desc := $sort-header?order = 'desc'
      return switch($sort-header?type)
        case 'decimal' case 'number' case 'bytes' return
          if($sort-desc)
          then function($v) { 0 - number($v) }
          else function($v) { number($v) }
        case 'time' return
          if($sort-desc)
          then function($v) { xs:time('00:00:00') - xs:time($v) }
          else function($v) { $v }
        case 'date' return
          if($sort-desc)
          then function($v) { xs:date('0001-01-01') - xs:date($v) }
          else function($v) { $v }
        case 'dateTime' return
          if($sort-desc)
          then function($v) { xs:dateTime('0001-01-01T00:00:00Z') - xs:dateTime($v) }
          else function($v) { $v }
        default return
          function($v) { $v }
    )
    for $entry in $entries
    order by $sort-value($entry($sort-key) ! (if($sort-xml) then string-join(.()) else .))
      empty greatest collation '?lang=en'
    return $entry
  ) else (
    $entries
  )

  (: show results :)
  let $count := if($sort) then () else $options?count
  let $page := $options?page
  let $max := options:get($options:MAXROWS)
  let $start := head((($page - 1) * $max + 1, 1))
  return (
    (: result summary :)
    let $count := head(($count, count($sorted-entries)))
    let $single-page := not($page) or ($page = 1 and $count &lt; $start + $max)
    return element h4 {
      $count,
      if($count = 1) then ' Entry' else 'Entries',

      if($single-page) then () else (
        '(Page: ',
        let $last := ($count - 1) idiv $max + 1
        let $pages := sort(distinct-values((
          1, $page - ($last idiv 10), $page - 1, $page, $page + 1, $page + ($last idiv 10), $last
        ))[. &gt;= 1 and . &lt;= $last])
        for $p at $pos in $pages
        let $suffix := (if($p = $last) then ')' else ' ') ||
          (if($pages[$pos + 1] &gt; $p + 1) then ' … ' else ())
        return (
          if ($page = $p) then $p || $suffix else (
            html:link(string($p), '', ($params, map { 'page': $p, 'sort': $sort })), $suffix
          )
        )
      )
    },

    (: list of results :)
    let $shown-entries := if($count) then (
      $sorted-entries
    ) else (
      $sorted-entries[position() &gt;= $start][position() &lt;= $max + 1]
    )
    return if(empty($shown-entries)) then () else (
      element table {
        element tr {
          for $header at $pos in $headers
          let $name := $header?key
          let $label := upper-case($header?label)
          return element th {
            attribute align {
              if($header?type = $html:NUMBER) then 'right' else 'left'
            },

            if($pos = 1 and $buttons) then (
              &lt;input type='checkbox' onclick='toggle(this)'/&gt;, ' '
            ) else (),

            if($header?type = 'id') then (
              (: id columns: empty header column :)
            ) else if(empty($sort) or $name = $sort-key) then (
              (: sorted column, xml column: only display label :)
              $label
            ) else (
              (: generate sort link :)
              html:link($label, '', ($params, map { 'sort': $name }))
            )
          }
        },

        let $link := $options?link
        for $entry in $shown-entries[position() &lt;= $max]
        return element tr {
          $entry?id ! attribute id { . },
          for $header at $pos in $headers
          let $name := $header?key
          let $type := $header?type

          (: format value :)
          let $v := $entry($name)
          let $value := try {
            if($type = 'bytes') then (
              prof:human(if(exists($v)) then xs:integer($v) else 0)
            ) else if($type = 'decimal') then (
              format-number(if(exists($v)) then number($v) else 0, '0.00')
            ) else if($type = 'dateTime') then (
              html:date(xs:dateTime($v))
            ) else if($type = 'xml') then (
              $v()
            ) else (
              string($v)
            )
          } catch * {
            (: error: show error message (for functions) or proceed with original value :)
            if ($v instance of function(*)) then $err:description else $v
          }
          return element td {
            attribute align { if($type = $html:NUMBER) then 'right' else 'left' },
            if($pos = 1 and $buttons) then (
              &lt;input type='checkbox' name='{ $name }' value='{ data($value) }'
                onclick='buttons(this)'/&gt;,
              ' '
            ) else (),
            if($pos = 1 and exists($link)) then (
              html:link($value, $link, ($params, map { $name: $value }))
            ) else if($type = 'id') then () else (
              $value
            )
          }
        }
      }
    )
  )
};

(:~
 : Focuses the specified field via Javascript.
 : @param  $element  element to be focused
 : @return script element
 :)
declare function html:focus(
  $element  as xs:string
) as element(script) {
  html:js('var u = document.getElementById("' || replace($element, '"', '') || '"); ' ||
    'u.focus(); u.select();')
};

(:~
 : Creates a link to the specified target.
 : @param  $text  link text
 : @param  $href  link reference
 : @return link
 :)
declare function html:link(
  $text  as xs:string,
  $href  as xs:string
) as element(a) {
  &lt;a href='{ $href }'&gt;{ $text }&lt;/a&gt;
};

(:~
 : Creates a link to the specified target.
 : @param  $text    link text
 : @param  $href    link reference
 : @param  $params  query parameters
 : @return link
 :)
declare function html:link(
  $text    as xs:string,
  $href    as xs:string,
  $params  as map(*)*
) as element(a) {
  html:link($text, web:create-url($href, map:merge($params)))
};

(:~
 : Formats a date.
 : @param  $date  date
 : @return string
 :)
declare function html:date(
  $date  as xs:dateTime
) as xs:string {
  let $zone := timezone-from-dateTime(current-dateTime())
  let $dt := fn:adjust-dateTime-to-timezone(xs:dateTime($date), $zone)
  return format-dateTime($dt, '[Y0000]-[M00]-[D00], [H00]:[m00]:[s00]')
};

(:~
 : Formats a duration.
 : @param  $seconds  seconds
 : @return string
 :)
declare function html:duration(
  $seconds  as xs:decimal
) as xs:string {
  let $min := $seconds idiv 60
  let $sec := $seconds - $min * 60
  return (format-number($min, '00') || ':' || format-number($sec, '00'))
};

(:~
 : Creates an embedded JavaScript snippet.
 : @param  $js  JavaScript string
 : @return script element
 :)
declare function html:js(
  $js  as xs:string
) as element(script) {
  &lt;script type='text/javascript'&gt;{
    '(function() { ' || $js || ' })();'
  }&lt;/script&gt;
};
</xqdoc:body></xqdoc:module><xqdoc:namespaces><xqdoc:namespace prefix="html" uri="dba/html"/><xqdoc:namespace prefix="options" uri="dba/options"/><xqdoc:namespace prefix="session" uri="dba/session"/><xqdoc:namespace prefix="util" uri="dba/util"/></xqdoc:namespaces><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>dba/options</xqdoc:uri></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>dba/session</xqdoc:uri></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>dba/util</xqdoc:uri></xqdoc:import></xqdoc:imports><xqdoc:variables><xqdoc:variable><xqdoc:name>html:NUMBER</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:variable></xqdoc:variables><xqdoc:functions><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>Extends the specified table rows with the page template.</xqdoc:description><xqdoc:param>$rows  tr elements</xqdoc:param><xqdoc:return>HTML page</xqdoc:return></xqdoc:comment><xqdoc:name>html:wrap</xqdoc:name><xqdoc:signature>declare function html:wrap($rows as element(tr)+) as element(html)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>rows</xqdoc:name><xqdoc:type occurrence="+">element(tr)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(html)</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>Extends the specified table rows with the page template.
The following options can be specified:
<ul>
  <li><b>header</b>: page headers</li>
  <li><b>error</b>: error string</li>
  <li><b>css</b>: CSS files</li>
  <li><b>scripts</b>: JavaScript files</li>
</ul></xqdoc:description><xqdoc:param>$options  options</xqdoc:param><xqdoc:param>$rows     tr elements</xqdoc:param><xqdoc:return>page</xqdoc:return></xqdoc:comment><xqdoc:name>html:wrap</xqdoc:name><xqdoc:signature>declare function html:wrap($options as map(*), $rows as element(tr)+) as element(html)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>options</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>rows</xqdoc:name><xqdoc:type occurrence="+">element(tr)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(html)</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>Creates an option checkbox.</xqdoc:description><xqdoc:param>$value  value</xqdoc:param><xqdoc:param>$label  label</xqdoc:param><xqdoc:param>$opts   checked options</xqdoc:param><xqdoc:return>checkbox</xqdoc:return></xqdoc:comment><xqdoc:name>html:option</xqdoc:name><xqdoc:signature>declare function html:option($value as xs:string, $label as xs:string, $opts as xs:string*) as node()+</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>value</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>label</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="+">node()</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="4"><xqdoc:comment><xqdoc:description>Creates a checkbox.</xqdoc:description><xqdoc:param>$name     name of checkbox</xqdoc:param><xqdoc:param>$value    value</xqdoc:param><xqdoc:param>$checked  checked state</xqdoc:param><xqdoc:param>$label    label</xqdoc:param><xqdoc:return>checkbox</xqdoc:return></xqdoc:comment><xqdoc:name>html:checkbox</xqdoc:name><xqdoc:signature>declare function html:checkbox($name as xs:string, $value as xs:string, $checked as xs:boolean, $label as xs:string) as node()+</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>value</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>checked</xqdoc:name><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>label</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="+">node()</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>Creates a checkbox.</xqdoc:description><xqdoc:param>$label  label of checkbox</xqdoc:param><xqdoc:param>$map    additional attributes</xqdoc:param><xqdoc:return>checkbox</xqdoc:return></xqdoc:comment><xqdoc:name>html:checkbox</xqdoc:name><xqdoc:signature>declare function html:checkbox($label as xs:string, $map as map(*)) as node()+</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>label</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>map</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="+">node()</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>Creates a button.</xqdoc:description><xqdoc:param>$value  button value</xqdoc:param><xqdoc:param>$label  label</xqdoc:param><xqdoc:return>button</xqdoc:return></xqdoc:comment><xqdoc:name>html:button</xqdoc:name><xqdoc:signature>declare function html:button($value as xs:string, $label as xs:string) as element(button)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>value</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>label</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(button)</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>Creates a button.</xqdoc:description><xqdoc:param>$value    button value</xqdoc:param><xqdoc:param>$label    label</xqdoc:param><xqdoc:param>$confirm  confirm click</xqdoc:param><xqdoc:return>button</xqdoc:return></xqdoc:comment><xqdoc:name>html:button</xqdoc:name><xqdoc:signature>declare function html:button($value as xs:string, $label as xs:string, $confirm as xs:boolean) as element(button)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>value</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>label</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>confirm</xqdoc:name><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(button)</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="4"><xqdoc:comment><xqdoc:description>Creates a button.</xqdoc:description><xqdoc:param>$value    button value</xqdoc:param><xqdoc:param>$label    label</xqdoc:param><xqdoc:param>$confirm  confirm click</xqdoc:param><xqdoc:param>$atts     additional attributes</xqdoc:param><xqdoc:return>button</xqdoc:return></xqdoc:comment><xqdoc:name>html:button</xqdoc:name><xqdoc:signature>declare function html:button($value as xs:string, $label as xs:string, $confirm as xs:boolean, $atts as (map(xs:string, xs:string))?) as element(button)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>value</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>label</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>confirm</xqdoc:name><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>atts</xqdoc:name><xqdoc:type occurrence="?">map(xs:string, xs:string)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(button)</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>Creates a property list.</xqdoc:description><xqdoc:param>$props  properties</xqdoc:param><xqdoc:return>table</xqdoc:return></xqdoc:comment><xqdoc:name>html:properties</xqdoc:name><xqdoc:signature>declare function html:properties($props as element()) as element(table)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>props</xqdoc:name><xqdoc:type>element()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(table)</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="5"><xqdoc:comment><xqdoc:description>Creates a table for the specified entries.
* The table format is specified by the table headers:
  * The element names serve as column keys.
  * The string values are the header labels.
  * The 'type' attribute defines how the values are formatted and sorted:
    * 'number': sorted as numbers
    * 'decimal': sorted as numbers, output with two decimal digits
    * 'bytes': sorted as numbers, output in a human-readable format
    * 'date', 'dateTime', 'time': sorted and output as dates
    * 'xml': function generating XML; sorted as strings, output as XML
    * 'id': suppressed (only used for creating checkboxes)
    * otherwise, sorted and output as strings
  * The 'order' attribute defines how sorted values will be ordered:
    * 'desc': descending order
    * otherwise, ascending order
  * The 'main' attribute indicates which column is the main column
* The supplied table rows are supplied as elements. Values are contained in attributes; their
  names represents the column key.
* Supplied buttons will placed on top of the table.
* Query parameters will be included in table links.
* The options argument can have the following keys:
  * 'sort': argument contains the key of the ordered column.
  * 'link': argument contains a function for generating a link reference.
  * 'page': currently displayed page
  * 'count': maximum number of results</xqdoc:description><xqdoc:param>$headers  table headers</xqdoc:param><xqdoc:param>$entries  table entries</xqdoc:param><xqdoc:param>$buttons  buttons</xqdoc:param><xqdoc:param>$params   additional query parameters</xqdoc:param><xqdoc:param>$options  additional options</xqdoc:param><xqdoc:return>table</xqdoc:return></xqdoc:comment><xqdoc:name>html:table</xqdoc:name><xqdoc:signature>declare function html:table($headers as (map(*))*, $entries as (map(*))*, $buttons as element(button)*, $params as map(*), $options as map(*)) as element()+</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>headers</xqdoc:name><xqdoc:type occurrence="*">map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>entries</xqdoc:name><xqdoc:type occurrence="*">map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>buttons</xqdoc:name><xqdoc:type occurrence="*">element(button)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>params</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>options</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="+">element()</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>Focuses the specified field via Javascript.</xqdoc:description><xqdoc:param>$element  element to be focused</xqdoc:param><xqdoc:return>script element</xqdoc:return></xqdoc:comment><xqdoc:name>html:focus</xqdoc:name><xqdoc:signature>declare function html:focus($element as xs:string) as element(script)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>element</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(script)</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description>Creates a link to the specified target.</xqdoc:description><xqdoc:param>$text  link text</xqdoc:param><xqdoc:param>$href  link reference</xqdoc:param><xqdoc:return>link</xqdoc:return></xqdoc:comment><xqdoc:name>html:link</xqdoc:name><xqdoc:signature>declare function html:link($text as xs:string, $href as xs:string) as element(a)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>text</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>href</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(a)</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>Creates a link to the specified target.</xqdoc:description><xqdoc:param>$text    link text</xqdoc:param><xqdoc:param>$href    link reference</xqdoc:param><xqdoc:param>$params  query parameters</xqdoc:param><xqdoc:return>link</xqdoc:return></xqdoc:comment><xqdoc:name>html:link</xqdoc:name><xqdoc:signature>declare function html:link($text as xs:string, $href as xs:string, $params as (map(*))*) as element(a)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>text</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>href</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>params</xqdoc:name><xqdoc:type occurrence="*">map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(a)</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>Formats a date.</xqdoc:description><xqdoc:param>$date  date</xqdoc:param><xqdoc:return>string</xqdoc:return></xqdoc:comment><xqdoc:name>html:date</xqdoc:name><xqdoc:signature>declare function html:date($date as xs:dateTime) as xs:string</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>date</xqdoc:name><xqdoc:type>xs:dateTime</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>Formats a duration.</xqdoc:description><xqdoc:param>$seconds  seconds</xqdoc:param><xqdoc:return>string</xqdoc:return></xqdoc:comment><xqdoc:name>html:duration</xqdoc:name><xqdoc:signature>declare function html:duration($seconds as xs:decimal) as xs:string</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>seconds</xqdoc:name><xqdoc:type>xs:decimal</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>Creates an embedded JavaScript snippet.</xqdoc:description><xqdoc:param>$js  JavaScript string</xqdoc:param><xqdoc:return>script element</xqdoc:return></xqdoc:comment><xqdoc:name>html:js</xqdoc:name><xqdoc:signature>declare function html:js($js as xs:string) as element(script)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>js</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(script)</xqdoc:type></xqdoc:return></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>