<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2025-05-17T18:53:12.962+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>dba/options</xqdoc:uri><xqdoc:name>options</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Global options.&#xD;
&#xD;
</xqdoc:description><xqdoc:author>Christian Grün, BaseX Team 2005-23, BSD License</xqdoc:author></xqdoc:comment><xqdoc:body>(:~
 : Global options.
 :
 : @author Christian Grün, BaseX Team 2005-23, BSD License
 :)
module namespace options = 'dba/options';

(:~ DBA directory. :)
declare variable $options:DBA-DIRECTORY := (
  for $dir in db:option('dbpath') || '/.dba'
  return (
    if(file:exists($dir)) then () else file:create-dir($dir),
    file:path-to-native($dir)
  )
);

(:~ Permission values. :)
declare variable $options:PERMISSIONS := ('none', 'read', 'write', 'create', 'admin');
(:~ Indentation values. :)
declare variable $options:INDENTS := ('no', 'yes');

(:~ Maximum length of XML characters. :)
declare variable $options:MAXCHARS := 'maxchars';
(:~ Maximum number of table entries. :)
declare variable $options:MAXROWS := 'maxrows';
(:~ Query timeout. :)
declare variable $options:TIMEOUT := 'timeout';
(:~ Maximal memory consumption. :)
declare variable $options:MEMORY := 'memory';
(:~ Permission when running queries. :)
declare variable $options:PERMISSION := 'permission';
(:~ Show DBA log entries. :)
declare variable $options:IGNORE-LOGS := 'ignore-logs';
(:~ Indent results. :)
declare variable $options:INDENT := 'indent';

(:~ Options file. :)
declare %private variable $options:FILE := $options:DBA-DIRECTORY || '.dba.xml';

(:~ Default options. :)
declare %basex:lazy %private variable $options:DEFAULTS := map {
  $options:MAXCHARS   : 200000,
  $options:MAXROWS    : 200,
  $options:TIMEOUT    : 30,
  $options:MEMORY     : 500,
  $options:PERMISSION : 'admin',
  $options:IGNORE-LOGS: '',
  $options:INDENT     : 'no'
};

(:~ Currently assigned options. :)
declare %basex:lazy %private variable $options:OPTIONS := (
  if(file:exists($options:FILE)) then (
    try {
      (: merge defaults with saved options :)
      let $options := fetch:doc($options:FILE)/options
      return map:merge(
        map:for-each($options:DEFAULTS, function($key, $value) {
          map:entry($key,
            let $option := $options/*[name() = $key]
            return if($option) then (
              typeswitch($value)
                case xs:numeric  return xs:integer($option)
                case xs:boolean  return xs:boolean($option)
                default          return xs:string($option)
            ) else (
              $value
            )
          )
        })
      )
    } catch * {
      (: use defaults if an error occurs while parsing the options :)
      $options:DEFAULTS
    }
  ) else (
    $options:DEFAULTS
  )
);

(:~
 : Returns the value of an option.
 : @param  $name  name of option
 : @return value
 :)
declare function options:get(
  $name  as xs:string
) as xs:anyAtomicType {
  $options:OPTIONS($name)
};

(:~
 : Saves options.
 : @param  $options  keys/values that have been changed
 :)
declare function options:save(
  $options  as map(*)
) as empty-sequence() {
  file:write($options:FILE, element options {
    map:for-each($options:DEFAULTS, function($key, $value) {
      element { $key } { ($options($key), $value)[1] }
    })
  })
};
</xqdoc:body></xqdoc:module><xqdoc:namespaces><xqdoc:namespace prefix="options" uri="dba/options"/><xqdoc:namespace prefix="db" uri="http://basex.org/modules/db"/><xqdoc:namespace prefix="file" uri="http://expath.org/ns/file"/><xqdoc:namespace prefix="basex" uri="http://basex.org"/><xqdoc:namespace prefix="fetch" uri="http://basex.org/modules/fetch"/><xqdoc:namespace prefix="map" uri="http://www.w3.org/2005/xpath-functions/map"/><xqdoc:namespace prefix="xs" uri="http://www.w3.org/2001/XMLSchema"/></xqdoc:namespaces><xqdoc:variables><xqdoc:variable><xqdoc:name>options:DBA-DIRECTORY</xqdoc:name><xqdoc:body>variable $options:DBA-DIRECTORY := (
  for $dir in db:option('dbpath') || '/.dba'
  return (
    if(file:exists($dir)) then () else file:create-dir($dir),
    file:path-to-native($dir)
  )
)</xqdoc:body></xqdoc:variable><xqdoc:variable><xqdoc:name>options:PERMISSIONS</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
Permission values.</xqdoc:description></xqdoc:comment><xqdoc:body>variable $options:PERMISSIONS := ('none', 'read', 'write', 'create', 'admin')</xqdoc:body></xqdoc:variable><xqdoc:variable><xqdoc:name>options:INDENTS</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
Indentation values.</xqdoc:description></xqdoc:comment><xqdoc:body>variable $options:INDENTS := ('no', 'yes')</xqdoc:body></xqdoc:variable><xqdoc:variable><xqdoc:name>options:MAXCHARS</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
Maximum length of XML characters.</xqdoc:description></xqdoc:comment><xqdoc:body>variable $options:MAXCHARS := 'maxchars'</xqdoc:body></xqdoc:variable><xqdoc:variable><xqdoc:name>options:MAXROWS</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
Maximum number of table entries.</xqdoc:description></xqdoc:comment><xqdoc:body>variable $options:MAXROWS := 'maxrows'</xqdoc:body></xqdoc:variable><xqdoc:variable><xqdoc:name>options:TIMEOUT</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
Query timeout.</xqdoc:description></xqdoc:comment><xqdoc:body>variable $options:TIMEOUT := 'timeout'</xqdoc:body></xqdoc:variable><xqdoc:variable><xqdoc:name>options:MEMORY</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
Maximal memory consumption.</xqdoc:description></xqdoc:comment><xqdoc:body>variable $options:MEMORY := 'memory'</xqdoc:body></xqdoc:variable><xqdoc:variable><xqdoc:name>options:PERMISSION</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
Permission when running queries.</xqdoc:description></xqdoc:comment><xqdoc:body>variable $options:PERMISSION := 'permission'</xqdoc:body></xqdoc:variable><xqdoc:variable><xqdoc:name>options:IGNORE-LOGS</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
Show DBA log entries.</xqdoc:description></xqdoc:comment><xqdoc:body>variable $options:IGNORE-LOGS := 'ignore-logs'</xqdoc:body></xqdoc:variable><xqdoc:variable><xqdoc:name>options:INDENT</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
Indent results.</xqdoc:description></xqdoc:comment><xqdoc:body>variable $options:INDENT := 'indent'</xqdoc:body></xqdoc:variable><xqdoc:variable><xqdoc:name>options:FILE</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
Options file.</xqdoc:description></xqdoc:comment><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:body>variable $options:FILE := $options:DBA-DIRECTORY || '.dba.xml'</xqdoc:body></xqdoc:variable><xqdoc:variable><xqdoc:name>options:DEFAULTS</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
Default options.</xqdoc:description></xqdoc:comment><xqdoc:annotations><xqdoc:annotation name="basex:lazy"/><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:body>variable $options:DEFAULTS := map {
  $options:MAXCHARS   : 200000,
  $options:MAXROWS    : 200,
  $options:TIMEOUT    : 30,
  $options:MEMORY     : 500,
  $options:PERMISSION : 'admin',
  $options:IGNORE-LOGS: '',
  $options:INDENT     : 'no'
}</xqdoc:body></xqdoc:variable><xqdoc:variable><xqdoc:name>options:OPTIONS</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
Currently assigned options.</xqdoc:description></xqdoc:comment><xqdoc:annotations><xqdoc:annotation name="basex:lazy"/><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:body>variable $options:OPTIONS := (
  if(file:exists($options:FILE)) then (
    try {
      (: merge defaults with saved options :)
      let $options := fetch:doc($options:FILE)/options
      return map:merge(
        map:for-each($options:DEFAULTS, function($key, $value) {
          map:entry($key,
            let $option := $options/*[name() = $key]
            return if($option) then (
              typeswitch($value)
                case xs:numeric  return xs:integer($option)
                case xs:boolean  return xs:boolean($option)
                default          return xs:string($option)
            ) else (
              $value
            )
          )
        })
      )
    } catch * {
      (: use defaults if an error occurs while parsing the options :)
      $options:DEFAULTS
    }
  ) else (
    $options:DEFAULTS
  )
)</xqdoc:body></xqdoc:variable></xqdoc:variables><xqdoc:functions><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Returns the value of an option.&#xD;
</xqdoc:description><xqdoc:param>$name  name of option</xqdoc:param><xqdoc:return>value</xqdoc:return></xqdoc:comment><xqdoc:name>options:get</xqdoc:name><xqdoc:signature>function options:get ( $name as xs:string ) as xs:anyAtomicType { $options:OPTIONS($name) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:anyAtomicType</xqdoc:type></xqdoc:return><xqdoc:body>function options:get(
  $name  as xs:string
) as xs:anyAtomicType {
  $options:OPTIONS($name)
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Saves options.&#xD;
</xqdoc:description><xqdoc:param>$options  keys/values that have been changed</xqdoc:param></xqdoc:comment><xqdoc:name>options:save</xqdoc:name><xqdoc:signature>function options:save ( $options as map(*) ) as empty-sequence() { file:write($options:FILE, element options { map:for-each($options:DEFAULTS, function($key, $value) { element { $key } { ($options($key), $value)[1] } }) }) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>options</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>empty-sequence</xqdoc:type></xqdoc:return><xqdoc:body>function options:save(
  $options  as map(*)
) as empty-sequence() {
  file:write($options:FILE, element options {
    map:for-each($options:DEFAULTS, function($key, $value) {
      element { $key } { ($options($key), $value)[1] }
    })
  })
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>