<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2025-05-17T18:53:12.962+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>dba/databases</xqdoc:uri><xqdoc:name>dba</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Main page.&#xD;
&#xD;
</xqdoc:description><xqdoc:author>Christian Grün, BaseX Team 2005-23, BSD License</xqdoc:author></xqdoc:comment><xqdoc:body>(:~
 : Main page.
 :
 : @author Christian Grün, BaseX Team 2005-23, BSD License
 :)
module namespace dba = 'dba/databases';

import module namespace html = 'dba/html' at '../lib/html.xqm';
import module namespace util = 'dba/util' at '../lib/util.xqm';

(:~ Top category :)
declare variable $dba:CAT := 'databases';

(:~
 : Main page.
 : @param  $sort   table sort key
 : @param  $error  error string
 : @param  $info   info string
 : @param  $page   current page
 : @return page
 :)
declare
  %rest:GET
  %rest:path('/dba/databases')
  %rest:query-param('sort',  '{$sort}', '')
  %rest:query-param('page',  '{$page}', 1)
  %rest:query-param('info',  '{$info}')
  %rest:query-param('error', '{$error}')
  %output:method('html')
function dba:databases(
  $sort   as xs:string,
  $page   as xs:integer,
  $info   as xs:string?,
  $error  as xs:string?
) as element(html) {
  let $names := map:merge(db:list() ! map:entry(., true()))
  let $databases :=
    let $start := util:start($page, $sort)
    let $end := util:end($page, $sort)
    for $db in db:list-details()[position() = $start to $end]
    return map {
      'name': $db,
      'resources': $db/@resources,
      'size': $db/@size,
      'date': $db/@modified-date
    }
  let $backups :=
    for $backup in db:backups()
    where matches($backup, $util:BACKUP-REGEX)
    group by $name := replace($backup, $util:BACKUP-REGEX, '$1')
    where $name and not($names($name))
    let $date := replace(sort($backup)[last()], $util:BACKUP-REGEX, '$2T$3:$4:$5Z')
    return map {
      'name': $name,
      'size': (),
      'date': $date
    }

  return html:wrap(map { 'header': $dba:CAT, 'info': $info, 'error': $error },
    &lt;tr&gt;
      &lt;td&gt;
        &lt;form action='{ $dba:CAT }' method='post' class='update'&gt;
          &lt;h2&gt;Databases&lt;/h2&gt;
          {
            let $headers := (
              map { 'key': 'name', 'label': 'Name' },
              map { 'key': 'resources', 'label': 'Count', 'type': 'number', 'order': 'desc' },
              map { 'key': 'size', 'label': 'Bytes', 'type': 'bytes', 'order': 'desc' },
              map { 'key': 'date', 'label': 'Last Modified', 'type': 'dateTime', 'order': 'desc' }
            )
            let $entries := ($databases, $backups)
            let $buttons := (
              html:button('db-create', 'Create…'),
              html:button('db-optimize-all', 'Optimize'),
              html:button('db-drop', 'Drop', true()),
              html:button('backup-create-all', 'Back up'),
              html:button('backup-restore-all', 'Restore', true())
            )
            let $count := map:size($names) + count($backups)
            let $options := map {
              'sort': $sort,
              'link': 'database',
              'page': $page,
              'count': $count
            }
            return html:table($headers, $entries, $buttons, map { }, $options)
          }
        &lt;/form&gt;
      &lt;/td&gt;
      &lt;td class='vertical'/&gt;
      &lt;td&gt;
        &lt;h2&gt;Upload Backups&lt;/h2&gt;
        &lt;form action='backup-upload' method='post' enctype='multipart/form-data'&gt;
          &lt;input type='file' name='files' multiple='multiple'/&gt;
          &lt;input type='submit' value='Send'/&gt;
        &lt;/form&gt;
        &lt;div class='note'&gt;
          Ensure that your server has enough RAM assigned to upload large backups.
        &lt;/div&gt;
        &lt;div class='small'/&gt;
        &lt;form action='{ $dba:CAT }' method='post' class='update'&gt;
          &lt;input type='hidden' name='name' value=''/&gt;
          &lt;h2&gt;General Backups&lt;/h2&gt;
          &lt;div class='note'&gt;
            Comprising:
            &lt;a target='_blank'
               href='https://docs.basex.org/wiki/User_Management'&gt;registered users&lt;/a&gt;;
            &lt;a target='_blank'
               href='https://docs.basex.org/wiki/Jobs_Module#Services'&gt;scheduled services&lt;/a&gt;;
            &lt;a target='_blank'
               href='https://docs.basex.org/wiki/Store_Module'&gt;value stores&lt;/a&gt;.
          &lt;/div&gt;
          &lt;div class='small'/&gt;
          {
            let $headers := (
              map { 'key': 'backup', 'label': 'Name', 'order': 'desc' },
              map { 'key': 'size', 'label': 'Size', 'type': 'bytes' },
              map { 'key': 'comment', 'label': 'Comment' },
              map { 'key': 'action', 'label': 'Action', 'type': 'dynamic' }
            )
            let $entries :=
              for $backup in db:backups('')
              order by $backup descending
              return map {
                'backup': substring-after($backup, '-'),
                'size': $backup/@size,
                'comment': $backup/@comment,
                'action': function() {
                  html:link('Download', 'backup/' || encode-for-uri($backup) || '.zip')
                }
              }
            let $buttons := (
              html:button('backup-create', 'Create…', false(), map { 'class': 'global' }),
              html:button('backup-restore', 'Restore', true()),
              html:button('backup-drop', 'Drop', true())
            )
            let $params := map { 'name': '' }
            return html:table($headers, $entries, $buttons, $params, map { })
          }
        &lt;/form&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  )
};

(:~
 : Redirects to the specified action.
 : @param  $action   action to perform
 : @param  $names    names of selected databases
 : @param  $backups  backups
 : @return redirection
 :)
declare
  %rest:POST
  %rest:path('/dba/databases')
  %rest:query-param('action', '{$action}')
  %rest:query-param('name',   '{$names}')
  %rest:query-param('backup',  '{$backups}')
function dba:databases-redirect(
  $action   as xs:string,
  $names    as xs:string*,
  $backups  as xs:string*
) as element(rest:response) {
  web:redirect($action,
    if($action = ('db-create')) then (
      map { }
    ) else if($action = ('backup-create', 'backup-drop', 'backup-restore')) then (
      map { 'redirect': $dba:CAT, 'backup': $backups }
    ) else (
      map { 'name': $names }
    )
  )
};
</xqdoc:body></xqdoc:module><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>dba/html</xqdoc:uri><xqdoc:at>../lib/html.xqm</xqdoc:at></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>dba/util</xqdoc:uri><xqdoc:at>../lib/util.xqm</xqdoc:at></xqdoc:import></xqdoc:imports><xqdoc:namespaces><xqdoc:namespace prefix="dba" uri="dba/databases"/><xqdoc:namespace prefix="html" uri="dba/html"/><xqdoc:namespace prefix="util" uri="dba/util"/><xqdoc:namespace prefix="rest" uri="http://exquery.org/ns/restxq"/><xqdoc:namespace prefix="output" uri="http://www.w3.org/2010/xslt-xquery-serialization"/><xqdoc:namespace prefix="xs" uri="http://www.w3.org/2001/XMLSchema"/><xqdoc:namespace prefix="map" uri="http://www.w3.org/2005/xpath-functions/map"/><xqdoc:namespace prefix="db" uri="http://basex.org/modules/db"/><xqdoc:namespace prefix="web" uri="http://basex.org/modules/web"/></xqdoc:namespaces><xqdoc:variables><xqdoc:variable><xqdoc:name>dba:CAT</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
Top category</xqdoc:description></xqdoc:comment><xqdoc:body>variable $dba:CAT := 'databases'</xqdoc:body></xqdoc:variable></xqdoc:variables><xqdoc:functions><xqdoc:function arity="4"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Main page.&#xD;
</xqdoc:description><xqdoc:param>$sort   table sort key</xqdoc:param><xqdoc:param>$error  error string</xqdoc:param><xqdoc:param>$info   info string</xqdoc:param><xqdoc:param>$page   current page</xqdoc:param><xqdoc:return>page</xqdoc:return></xqdoc:comment><xqdoc:name>dba:databases</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:GET"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/dba/databases</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">sort</xqdoc:literal><xqdoc:literal type="xs:string">{$sort}</xqdoc:literal><xqdoc:literal type="xs:string"/></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">page</xqdoc:literal><xqdoc:literal type="xs:string">{$page}</xqdoc:literal><xqdoc:literal type="xs:string">1</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">info</xqdoc:literal><xqdoc:literal type="xs:string">{$info}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">error</xqdoc:literal><xqdoc:literal type="xs:string">{$error}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="output:method"><xqdoc:literal type="xs:string">html</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>function dba:databases ( $sort as xs:string, $page as xs:integer, $info as xs:string?, $error as xs:string? ) as element(html) { let $names := map:merge(db:list() ! map:entry(., true())) let $databases := let $start := util:start($page, $sort) let $end := util:end($page, $sort) for $db in db:list-details()[position() = $start to $end] return map { 'name': $db, 'resources': $db/@resources, 'size': $db/@size, 'date': $db/@modified-date } let $backups := for $backup in db:backups() where matches($backup, $util:BACKUP-REGEX) group by $name := replace($backup, $util:BACKUP-REGEX, '$1') where $name and not($names($name)) let $date := replace(sort($backup)[last()], $util:BACKUP-REGEX, '$2T$3:$4:$5Z') return map { 'name': $name, 'size': (), 'date': $date } return html:wrap(map { 'header': $dba:CAT, 'info': $info, 'error': $error }, &lt;tr&gt; &lt;td&gt; &lt;form action='{ $dba:CAT }' method='post' class='update'&gt; &lt;h2&gt;Databases&lt;/h2&gt; { let $headers := ( map { 'key': 'name', 'label': 'Name' }, map { 'key': 'resources', 'label': 'Count', 'type': 'number', 'order': 'desc' }, map { 'key': 'size', 'label': 'Bytes', 'type': 'bytes', 'order': 'desc' }, map { 'key': 'date', 'label': 'Last Modified', 'type': 'dateTime', 'order': 'desc' } ) let $entries := ($databases, $backups) let $buttons := ( html:button('db-create', 'Create…'), html:button('db-optimize-all', 'Optimize'), html:button('db-drop', 'Drop', true()), html:button('backup-create-all', 'Back up'), html:button('backup-restore-all', 'Restore', true()) ) let $count := map:size($names) + count($backups) let $options := map { 'sort': $sort, 'link': 'database', 'page': $page, 'count': $count } return html:table($headers, $entries, $buttons, map { }, $options) } &lt;/form&gt; &lt;/td&gt; &lt;td class='vertical'/&gt; &lt;td&gt; &lt;h2&gt;Upload Backups&lt;/h2&gt; &lt;form action='backup-upload' method='post' enctype='multipart/form-data'&gt; &lt;input type='file' name='files' multiple='multiple'/&gt; &lt;input type='submit' value='Send'/&gt; &lt;/form&gt; &lt;div class='note'&gt; Ensure that your server has enough RAM assigned to upload large backups. &lt;/div&gt; &lt;div class='small'/&gt; &lt;form action='{ $dba:CAT }' method='post' class='update'&gt; &lt;input type='hidden' name='name' value=''/&gt; &lt;h2&gt;General Backups&lt;/h2&gt; &lt;div class='note'&gt; Comprising: &lt;a target='_blank' href='https://docs.basex.org/wiki/User_Management'&gt;registered users&lt;/a&gt;; &lt;a target='_blank' href='https://docs.basex.org/wiki/Jobs_Module#Services'&gt;scheduled services&lt;/a&gt;; &lt;a target='_blank' href='https://docs.basex.org/wiki/Store_Module'&gt;value stores&lt;/a&gt;. &lt;/div&gt; &lt;div class='small'/&gt; { let $headers := ( map { 'key': 'backup', 'label': 'Name', 'order': 'desc' }, map { 'key': 'size', 'label': 'Size', 'type': 'bytes' }, map { 'key': 'comment', 'label': 'Comment' }, map { 'key': 'action', 'label': 'Action', 'type': 'dynamic' } ) let $entries := for $backup in db:backups('') order by $backup descending return map { 'backup': substring-after($backup, '-'), 'size': $backup/@size, 'comment': $backup/@comment, 'action': function() { html:link('Download', 'backup/' || encode-for-uri($backup) || '.zip') } } let $buttons := ( html:button('backup-create', 'Create…', false(), map { 'class': 'global' }), html:button('backup-restore', 'Restore', true()), html:button('backup-drop', 'Drop', true()) ) let $params := map { 'name': '' } return html:table($headers, $entries, $buttons, $params, map { }) } &lt;/form&gt; &lt;/td&gt; &lt;/tr&gt; ) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>sort</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>page</xqdoc:name><xqdoc:type>xs:integer</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>info</xqdoc:name><xqdoc:type occurrence="?">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>error</xqdoc:name><xqdoc:type occurrence="?">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(html)</xqdoc:type></xqdoc:return><xqdoc:body>function dba:databases(
  $sort   as xs:string,
  $page   as xs:integer,
  $info   as xs:string?,
  $error  as xs:string?
) as element(html) {
  let $names := map:merge(db:list() ! map:entry(., true()))
  let $databases :=
    let $start := util:start($page, $sort)
    let $end := util:end($page, $sort)
    for $db in db:list-details()[position() = $start to $end]
    return map {
      'name': $db,
      'resources': $db/@resources,
      'size': $db/@size,
      'date': $db/@modified-date
    }
  let $backups :=
    for $backup in db:backups()
    where matches($backup, $util:BACKUP-REGEX)
    group by $name := replace($backup, $util:BACKUP-REGEX, '$1')
    where $name and not($names($name))
    let $date := replace(sort($backup)[last()], $util:BACKUP-REGEX, '$2T$3:$4:$5Z')
    return map {
      'name': $name,
      'size': (),
      'date': $date
    }

  return html:wrap(map { 'header': $dba:CAT, 'info': $info, 'error': $error },
    &lt;tr&gt;
      &lt;td&gt;
        &lt;form action='{ $dba:CAT }' method='post' class='update'&gt;
          &lt;h2&gt;Databases&lt;/h2&gt;
          {
            let $headers := (
              map { 'key': 'name', 'label': 'Name' },
              map { 'key': 'resources', 'label': 'Count', 'type': 'number', 'order': 'desc' },
              map { 'key': 'size', 'label': 'Bytes', 'type': 'bytes', 'order': 'desc' },
              map { 'key': 'date', 'label': 'Last Modified', 'type': 'dateTime', 'order': 'desc' }
            )
            let $entries := ($databases, $backups)
            let $buttons := (
              html:button('db-create', 'Create…'),
              html:button('db-optimize-all', 'Optimize'),
              html:button('db-drop', 'Drop', true()),
              html:button('backup-create-all', 'Back up'),
              html:button('backup-restore-all', 'Restore', true())
            )
            let $count := map:size($names) + count($backups)
            let $options := map {
              'sort': $sort,
              'link': 'database',
              'page': $page,
              'count': $count
            }
            return html:table($headers, $entries, $buttons, map { }, $options)
          }
        &lt;/form&gt;
      &lt;/td&gt;
      &lt;td class='vertical'/&gt;
      &lt;td&gt;
        &lt;h2&gt;Upload Backups&lt;/h2&gt;
        &lt;form action='backup-upload' method='post' enctype='multipart/form-data'&gt;
          &lt;input type='file' name='files' multiple='multiple'/&gt;
          &lt;input type='submit' value='Send'/&gt;
        &lt;/form&gt;
        &lt;div class='note'&gt;
          Ensure that your server has enough RAM assigned to upload large backups.
        &lt;/div&gt;
        &lt;div class='small'/&gt;
        &lt;form action='{ $dba:CAT }' method='post' class='update'&gt;
          &lt;input type='hidden' name='name' value=''/&gt;
          &lt;h2&gt;General Backups&lt;/h2&gt;
          &lt;div class='note'&gt;
            Comprising:
            &lt;a target='_blank'
               href='https://docs.basex.org/wiki/User_Management'&gt;registered users&lt;/a&gt;;
            &lt;a target='_blank'
               href='https://docs.basex.org/wiki/Jobs_Module#Services'&gt;scheduled services&lt;/a&gt;;
            &lt;a target='_blank'
               href='https://docs.basex.org/wiki/Store_Module'&gt;value stores&lt;/a&gt;.
          &lt;/div&gt;
          &lt;div class='small'/&gt;
          {
            let $headers := (
              map { 'key': 'backup', 'label': 'Name', 'order': 'desc' },
              map { 'key': 'size', 'label': 'Size', 'type': 'bytes' },
              map { 'key': 'comment', 'label': 'Comment' },
              map { 'key': 'action', 'label': 'Action', 'type': 'dynamic' }
            )
            let $entries :=
              for $backup in db:backups('')
              order by $backup descending
              return map {
                'backup': substring-after($backup, '-'),
                'size': $backup/@size,
                'comment': $backup/@comment,
                'action': function() {
                  html:link('Download', 'backup/' || encode-for-uri($backup) || '.zip')
                }
              }
            let $buttons := (
              html:button('backup-create', 'Create…', false(), map { 'class': 'global' }),
              html:button('backup-restore', 'Restore', true()),
              html:button('backup-drop', 'Drop', true())
            )
            let $params := map { 'name': '' }
            return html:table($headers, $entries, $buttons, $params, map { })
          }
        &lt;/form&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  )
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Redirects to the specified action.&#xD;
</xqdoc:description><xqdoc:param>$action   action to perform</xqdoc:param><xqdoc:param>$names    names of selected databases</xqdoc:param><xqdoc:param>$backups  backups</xqdoc:param><xqdoc:return>redirection</xqdoc:return></xqdoc:comment><xqdoc:name>dba:databases-redirect</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:POST"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/dba/databases</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">action</xqdoc:literal><xqdoc:literal type="xs:string">{$action}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">name</xqdoc:literal><xqdoc:literal type="xs:string">{$names}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">backup</xqdoc:literal><xqdoc:literal type="xs:string">{$backups}</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>function dba:databases-redirect ( $action as xs:string, $names as xs:string*, $backups as xs:string* ) as element(rest:response) { web:redirect($action, if($action = ('db-create')) then ( map { } ) else if($action = ('backup-create', 'backup-drop', 'backup-restore')) then ( map { 'redirect': $dba:CAT, 'backup': $backups } ) else ( map { 'name': $names } ) ) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>action</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>names</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>backups</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(rest:response)</xqdoc:type></xqdoc:return><xqdoc:body>function dba:databases-redirect(
  $action   as xs:string,
  $names    as xs:string*,
  $backups  as xs:string*
) as element(rest:response) {
  web:redirect($action,
    if($action = ('db-create')) then (
      map { }
    ) else if($action = ('backup-create', 'backup-drop', 'backup-restore')) then (
      map { 'redirect': $dba:CAT, 'backup': $backups }
    ) else (
      map { 'name': $names }
    )
  )
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>