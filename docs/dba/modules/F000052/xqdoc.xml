<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2025-05-17T18:53:12.962+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>dba/users</xqdoc:uri><xqdoc:name>dba</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Updates user information.&#xD;
&#xD;
</xqdoc:description><xqdoc:author>Christian Grün, BaseX Team 2005-23, BSD License</xqdoc:author></xqdoc:comment><xqdoc:body>(:~
 : Updates user information.
 :
 : @author Christian Grün, BaseX Team 2005-23, BSD License
 :)
module namespace dba = 'dba/users';

import module namespace util = 'dba/util' at '../lib/util.xqm';

(:~ Top category :)
declare variable $dba:CAT := 'users';
(:~ Sub category :)
declare variable $dba:SUB := 'user';

(:~
 : Updates users information.
 : @param  $info  users information
 : @return redirection
 :)
declare
  %updating
  %rest:POST
  %rest:path('/dba/users-info')
  %rest:form-param('info', '{$info}')
function dba:users-info(
  $info  as xs:string
) as empty-sequence() {
  try {
    (: change user info :)
    let $xml := dba:user-info($info)
    where not(deep-equal(user:info(), $xml))
    return user:update-info($xml),

    util:redirect($dba:CAT, map { 'info': 'User information was updated.' })
  } catch err:FODC0006 {
    util:redirect($dba:CAT, map { 'error': 'XML with "info" root element expected.' })
  } catch * {
    util:redirect($dba:CAT, map { 'error': $err:description })
  }
};

(:~
 : Updates a user.
 : @param  $name     username
 : @param  $newname  new name
 : @param  $pw       password
 : @param  $perm     permission
 : @return redirection
 :)
declare
  %updating
  %rest:POST
  %rest:path('/dba/user-update')
  %rest:form-param('name',    '{$name}')
  %rest:form-param('newname', '{$newname}')
  %rest:form-param('pw',      '{$pw}')
  %rest:form-param('perm',    '{$perm}')
  %rest:form-param('info',    '{$info}')
function dba:user-update(
  $name     as xs:string,
  $newname  as xs:string,
  $pw       as xs:string,
  $perm     as xs:string,
  $info     as xs:string
) as empty-sequence() {
  try {
    let $old := user:list-details($name)
    return (
      (: change name of user :)
      if($name = $newname) then () else (
        if(user:exists($newname)) then (
           error((), 'User already exists.')
         ) else (
           user:alter($name, $newname)
        )
      ),
      (: change password :)
      if($pw = '') then () else user:password($name, $pw),
      (: change permissions :)
      if($perm = $old/@permission) then () else user:grant($name, $perm),
      (: change user info :)
      let $xml := dba:user-info($info)
      where not(deep-equal(user:info($name), $xml))
      return user:update-info($xml, $name)
    ),
    util:redirect($dba:SUB, map { 'name': $newname, 'info': 'User was updated.' })
  } catch * {
    let $error := if ($err:code != xs:QName('err:FODC0006')) then $err:description else
      'XML with "info" root element expected.'
    return util:redirect($dba:SUB, map {
      'name': $name, 'newname': $newname, 'pw': $pw, 'perm': $perm, 'error': $error
    })
  }
};

(:~
 : Converts a user info string to XML.
 : @param  $info  user info
 : @return info element
 :)
declare %private function dba:user-info(
  $info  as xs:string
) as element(info) {
  if($info) then (
    parse-xml($info)/*[self::info or error(xs:QName(err:FODC0006))] update {
      delete node .//text()[not(normalize-space())]
    }
  ) else (
    element info {}
  )
};
</xqdoc:body></xqdoc:module><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>dba/util</xqdoc:uri><xqdoc:at>../lib/util.xqm</xqdoc:at></xqdoc:import></xqdoc:imports><xqdoc:namespaces><xqdoc:namespace prefix="dba" uri="dba/users"/><xqdoc:namespace prefix="util" uri="dba/util"/><xqdoc:namespace prefix="rest" uri="http://exquery.org/ns/restxq"/><xqdoc:namespace prefix="xs" uri="http://www.w3.org/2001/XMLSchema"/><xqdoc:namespace prefix="user" uri="http://basex.org/modules/user"/><xqdoc:namespace prefix="err" uri="http://www.w3.org/2005/xqt-errors"/></xqdoc:namespaces><xqdoc:variables><xqdoc:variable><xqdoc:name>dba:CAT</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
Top category</xqdoc:description></xqdoc:comment><xqdoc:body>variable $dba:CAT := 'users'</xqdoc:body></xqdoc:variable><xqdoc:variable><xqdoc:name>dba:SUB</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
Sub category</xqdoc:description></xqdoc:comment><xqdoc:body>variable $dba:SUB := 'user'</xqdoc:body></xqdoc:variable></xqdoc:variables><xqdoc:functions><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Updates users information.&#xD;
</xqdoc:description><xqdoc:param>$info  users information</xqdoc:param><xqdoc:return>redirection</xqdoc:return></xqdoc:comment><xqdoc:name>dba:users-info</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="updating"/><xqdoc:annotation name="rest:POST"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/dba/users-info</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:form-param"><xqdoc:literal type="xs:string">info</xqdoc:literal><xqdoc:literal type="xs:string">{$info}</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>function dba:users-info ( $info as xs:string ) as empty-sequence() { try { (: change user info :) let $xml := dba:user-info($info) where not(deep-equal(user:info(), $xml)) return user:update-info($xml), util:redirect($dba:CAT, map { 'info': 'User information was updated.' }) } catch err:FODC0006 { util:redirect($dba:CAT, map { 'error': 'XML with "info" root element expected.' }) } catch * { util:redirect($dba:CAT, map { 'error': $err:description }) } }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>info</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>empty-sequence</xqdoc:type></xqdoc:return><xqdoc:body>function dba:users-info(
  $info  as xs:string
) as empty-sequence() {
  try {
    (: change user info :)
    let $xml := dba:user-info($info)
    where not(deep-equal(user:info(), $xml))
    return user:update-info($xml),

    util:redirect($dba:CAT, map { 'info': 'User information was updated.' })
  } catch err:FODC0006 {
    util:redirect($dba:CAT, map { 'error': 'XML with "info" root element expected.' })
  } catch * {
    util:redirect($dba:CAT, map { 'error': $err:description })
  }
}</xqdoc:body></xqdoc:function><xqdoc:function arity="5"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Updates a user.&#xD;
</xqdoc:description><xqdoc:param>$name     username</xqdoc:param><xqdoc:param>$newname  new name</xqdoc:param><xqdoc:param>$pw       password</xqdoc:param><xqdoc:param>$perm     permission</xqdoc:param><xqdoc:return>redirection</xqdoc:return></xqdoc:comment><xqdoc:name>dba:user-update</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="updating"/><xqdoc:annotation name="rest:POST"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/dba/user-update</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:form-param"><xqdoc:literal type="xs:string">name</xqdoc:literal><xqdoc:literal type="xs:string">{$name}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:form-param"><xqdoc:literal type="xs:string">newname</xqdoc:literal><xqdoc:literal type="xs:string">{$newname}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:form-param"><xqdoc:literal type="xs:string">pw</xqdoc:literal><xqdoc:literal type="xs:string">{$pw}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:form-param"><xqdoc:literal type="xs:string">perm</xqdoc:literal><xqdoc:literal type="xs:string">{$perm}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:form-param"><xqdoc:literal type="xs:string">info</xqdoc:literal><xqdoc:literal type="xs:string">{$info}</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>function dba:user-update ( $name as xs:string, $newname as xs:string, $pw as xs:string, $perm as xs:string, $info as xs:string ) as empty-sequence() { try { let $old := user:list-details($name) return ( (: change name of user :) if($name = $newname) then () else ( if(user:exists($newname)) then ( error((), 'User already exists.') ) else ( user:alter($name, $newname) ) ), (: change password :) if($pw = '') then () else user:password($name, $pw), (: change permissions :) if($perm = $old/@permission) then () else user:grant($name, $perm), (: change user info :) let $xml := dba:user-info($info) where not(deep-equal(user:info($name), $xml)) return user:update-info($xml, $name) ), util:redirect($dba:SUB, map { 'name': $newname, 'info': 'User was updated.' }) } catch * { let $error := if ($err:code != xs:QName('err:FODC0006')) then $err:description else 'XML with "info" root element expected.' return util:redirect($dba:SUB, map { 'name': $name, 'newname': $newname, 'pw': $pw, 'perm': $perm, 'error': $error }) } }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>newname</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>pw</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>perm</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>info</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>empty-sequence</xqdoc:type></xqdoc:return><xqdoc:body>function dba:user-update(
  $name     as xs:string,
  $newname  as xs:string,
  $pw       as xs:string,
  $perm     as xs:string,
  $info     as xs:string
) as empty-sequence() {
  try {
    let $old := user:list-details($name)
    return (
      (: change name of user :)
      if($name = $newname) then () else (
        if(user:exists($newname)) then (
           error((), 'User already exists.')
         ) else (
           user:alter($name, $newname)
        )
      ),
      (: change password :)
      if($pw = '') then () else user:password($name, $pw),
      (: change permissions :)
      if($perm = $old/@permission) then () else user:grant($name, $perm),
      (: change user info :)
      let $xml := dba:user-info($info)
      where not(deep-equal(user:info($name), $xml))
      return user:update-info($xml, $name)
    ),
    util:redirect($dba:SUB, map { 'name': $newname, 'info': 'User was updated.' })
  } catch * {
    let $error := if ($err:code != xs:QName('err:FODC0006')) then $err:description else
      'XML with "info" root element expected.'
    return util:redirect($dba:SUB, map {
      'name': $name, 'newname': $newname, 'pw': $pw, 'perm': $perm, 'error': $error
    })
  }
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Converts a user info string to XML.&#xD;
</xqdoc:description><xqdoc:param>$info  user info</xqdoc:param><xqdoc:return>info element</xqdoc:return></xqdoc:comment><xqdoc:name>dba:user-info</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function dba:user-info ( $info as xs:string ) as element(info) { if($info) then ( parse-xml($info)/*[self::info or error(xs:QName(err:FODC0006))] update { delete node .//text()[not(normalize-space())] } ) else ( element info {} ) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>info</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(info)</xqdoc:type></xqdoc:return><xqdoc:body>function dba:user-info(
  $info  as xs:string
) as element(info) {
  if($info) then (
    parse-xml($info)/*[self::info or error(xs:QName(err:FODC0006))] update {
      delete node .//text()[not(normalize-space())]
    }
  ) else (
    element info {}
  )
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>