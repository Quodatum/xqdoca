<XQuery>(:~
 : Upload files.
 :
 : @author Christian Gr√ºn, BaseX Team 2005-19, BSD License
 :)
<LibraryModule><ModuleDecl><TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>dba</NCName> <TOKEN>=</TOKEN> <StringLiteral>'dba/files'</StringLiteral><TOKEN>;</TOKEN></ModuleDecl>

<Prolog><ModuleImport><TOKEN>import</TOKEN> <TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>session</NCName> <TOKEN>=</TOKEN> <StringLiteral>'dba/session'</StringLiteral> <TOKEN>at</TOKEN> <StringLiteral>'../modules/session.xqm'</StringLiteral></ModuleImport><TOKEN>;</TOKEN>
<ModuleImport><TOKEN>import</TOKEN> <TOKEN>module</TOKEN> <TOKEN>namespace</TOKEN> <NCName>util</NCName> <TOKEN>=</TOKEN> <StringLiteral>'dba/util'</StringLiteral> <TOKEN>at</TOKEN> <StringLiteral>'../modules/util.xqm'</StringLiteral></ModuleImport><TOKEN>;</TOKEN>

(:~ Top category :)
<AnnotatedDecl><TOKEN>declare</TOKEN> <VarDecl><TOKEN>variable</TOKEN> <TOKEN>$</TOKEN><QName>dba:CAT</QName> <TOKEN>:=</TOKEN> <StringLiteral>'files'</StringLiteral></VarDecl></AnnotatedDecl><TOKEN>;</TOKEN>

(:~
 : Upploads files.
 : @param  $files  map with uploaded files
 : @return redirection
 :)
<AnnotatedDecl><TOKEN>declare</TOKEN>
  <Annotation><TOKEN>%</TOKEN><QName>rest:POST</QName></Annotation>
  <Annotation><TOKEN>%</TOKEN><QName>rest:path</QName><TOKEN>(</TOKEN><StringLiteral>"/dba/file-upload"</StringLiteral><TOKEN>)</TOKEN></Annotation>
  <Annotation><TOKEN>%</TOKEN><QName>rest:form-param</QName><TOKEN>(</TOKEN><StringLiteral>"files"</StringLiteral><TOKEN>,</TOKEN> <StringLiteral>"{$files}"</StringLiteral><TOKEN>)</TOKEN></Annotation>
<FunctionDecl><TOKEN>function</TOKEN> <QName>dba:file-upload</QName><TOKEN>(</TOKEN>
  <Param><TOKEN>$</TOKEN><QName>files</QName>  <TypeDeclaration><TOKEN>as</TOKEN> <MapType><TOKEN>map</TOKEN><TOKEN>(</TOKEN><QName>xs:string</QName><TOKEN>,</TOKEN> <QName>xs:base64Binary</QName><TOKEN>)</TOKEN></MapType></TypeDeclaration></Param>
<TOKEN>)</TOKEN> <TOKEN>as</TOKEN> <ElementTest><TOKEN>element</TOKEN><TOKEN>(</TOKEN><QName>rest:response</QName><TOKEN>)</TOKEN></ElementTest> <EnclosedExpr><TOKEN>{</TOKEN>
  (: save files :)
  <FLWORExpr><LetClause><TOKEN>let</TOKEN> <LetBinding><TOKEN>$</TOKEN><QName>dir</QName> <TOKEN>:=</TOKEN> <FunctionCall><QName>session:directory</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></LetBinding></LetClause>
  <ReturnClause><TOKEN>return</TOKEN> <TryCatchExpr><TryClause><TOKEN>try</TOKEN> <EnclosedExpr><TOKEN>{</TOKEN>
    (: Parse all XQuery files; reject files that cannot be parsed :)
    <Expr><FunctionCall><QName>map:for-each</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>files</QName></VarRef><TOKEN>,</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>file</QName></Param><TOKEN>,</TOKEN> <Param><TOKEN>$</TOKEN><QName>content</QName></Param></ParamList><TOKEN>)</TOKEN> <EnclosedExpr><TOKEN>{</TOKEN>
      <IfExpr><TOKEN>if</TOKEN><TOKEN>(</TOKEN><FunctionCall><QName>matches</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>file</QName></VarRef><TOKEN>,</TOKEN> <StringLiteral>'\.xqm?$'</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN> <TOKEN>then</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN>
        <FunctionCall><QName>prof:void</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>xquery:parse</QName><ArgumentList><TOKEN>(</TOKEN>
          <FunctionCall><QName>convert:binary-to-string</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>content</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN>
          <MapConstructor><TOKEN>map</TOKEN> <TOKEN>{</TOKEN> <MapConstructorEntry><StringLiteral>'plan'</StringLiteral><TOKEN>:</TOKEN> <FunctionCall><QName>false</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></MapConstructorEntry><TOKEN>,</TOKEN> <MapConstructorEntry><StringLiteral>'pass'</StringLiteral><TOKEN>:</TOKEN> <FunctionCall><QName>true</QName><ArgumentList><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ArgumentList></FunctionCall></MapConstructorEntry><TOKEN>,</TOKEN> <MapConstructorEntry><StringLiteral>'base-uri'</StringLiteral><TOKEN>:</TOKEN> <StringConcatExpr><VarRef><TOKEN>$</TOKEN><QName>dir</QName></VarRef> <TOKEN>||</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>file</QName></VarRef></StringConcatExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor>
        <TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
      <TOKEN>)</TOKEN></ParenthesizedExpr> <TOKEN>else</TOKEN> <ParenthesizedExpr><TOKEN>(</TOKEN><TOKEN>)</TOKEN></ParenthesizedExpr></IfExpr>
    <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN>
    <FunctionCall><QName>map:for-each</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>files</QName></VarRef><TOKEN>,</TOKEN> <InlineFunctionExpr><TOKEN>function</TOKEN><TOKEN>(</TOKEN><ParamList><Param><TOKEN>$</TOKEN><QName>file</QName></Param><TOKEN>,</TOKEN> <Param><TOKEN>$</TOKEN><QName>content</QName></Param></ParamList><TOKEN>)</TOKEN> <EnclosedExpr><TOKEN>{</TOKEN>
      <FunctionCall><QName>file:write-binary</QName><ArgumentList><TOKEN>(</TOKEN><StringConcatExpr><VarRef><TOKEN>$</TOKEN><QName>dir</QName></VarRef> <TOKEN>||</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>file</QName></VarRef></StringConcatExpr><TOKEN>,</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>content</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
    <TOKEN>}</TOKEN></EnclosedExpr></InlineFunctionExpr><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN>
    <FunctionCall><QName>web:redirect</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>dba:CAT</QName></VarRef><TOKEN>,</TOKEN> <MapConstructor><TOKEN>map</TOKEN> <TOKEN>{</TOKEN> <MapConstructorEntry><StringLiteral>'info'</StringLiteral><TOKEN>:</TOKEN> <FunctionCall><QName>util:info</QName><ArgumentList><TOKEN>(</TOKEN><FunctionCall><QName>map:keys</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>files</QName></VarRef><TOKEN>)</TOKEN></ArgumentList></FunctionCall><TOKEN>,</TOKEN> <StringLiteral>'file'</StringLiteral><TOKEN>,</TOKEN> <StringLiteral>'uploaded'</StringLiteral><TOKEN>)</TOKEN></ArgumentList></FunctionCall></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor><TOKEN>)</TOKEN></ArgumentList></FunctionCall></Expr>
  <TOKEN>}</TOKEN></EnclosedExpr></TryClause> <CatchClause><TOKEN>catch</TOKEN> <Wildcard>*</Wildcard> <EnclosedExpr><TOKEN>{</TOKEN>
    <FunctionCall><QName>web:redirect</QName><ArgumentList><TOKEN>(</TOKEN><VarRef><TOKEN>$</TOKEN><QName>dba:CAT</QName></VarRef><TOKEN>,</TOKEN> <MapConstructor><TOKEN>map</TOKEN> <TOKEN>{</TOKEN> <MapConstructorEntry><StringLiteral>'error'</StringLiteral><TOKEN>:</TOKEN> <StringConcatExpr><StringLiteral>'Upload failed: '</StringLiteral> <TOKEN>||</TOKEN> <VarRef><TOKEN>$</TOKEN><QName>err:description</QName></VarRef></StringConcatExpr></MapConstructorEntry> <TOKEN>}</TOKEN></MapConstructor><TOKEN>)</TOKEN></ArgumentList></FunctionCall>
  <TOKEN>}</TOKEN></EnclosedExpr></CatchClause></TryCatchExpr></ReturnClause></FLWORExpr>
<TOKEN>}</TOKEN></EnclosedExpr></FunctionDecl></AnnotatedDecl><TOKEN>;</TOKEN></Prolog></LibraryModule>
<EOF/></XQuery>