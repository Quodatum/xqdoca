<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2025-05-17T18:53:12.962+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>dba/databases</xqdoc:uri><xqdoc:name>dba</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Put resources.&#xD;
&#xD;
</xqdoc:description><xqdoc:author>Christian Grün, BaseX Team 2005-23, BSD License</xqdoc:author></xqdoc:comment><xqdoc:body>(:~
 : Put resources.
 :
 : @author Christian Grün, BaseX Team 2005-23, BSD License
 :)
module namespace dba = 'dba/databases';

import module namespace html = 'dba/html' at '../../lib/html.xqm';
import module namespace util = 'dba/util' at '../../lib/util.xqm';

(:~ Top category :)
declare variable $dba:CAT := 'databases';
(:~ Sub category :)
declare variable $dba:SUB := 'database';

(:~
 : Form for putting a new resource.
 : @param  $name    entered name
 : @param  $opts    chosen parsing options
 : @param  $path    database path
 : @param  $binary  store as binary
 : @param  $error   error string
 : @return page
 :)
declare
  %rest:GET
  %rest:path('/dba/db-put')
  %rest:query-param('name',   '{$name}')
  %rest:query-param('opts',   '{$opts}')
  %rest:query-param('path',   '{$path}')
  %rest:query-param('binary', '{$binary}')
  %rest:query-param('error',  '{$error}')
  %output:method('html')
function dba:db-put(
  $name    as xs:string,
  $opts    as xs:string*,
  $path    as xs:string?,
  $binary  as xs:string?,
  $error   as xs:string?
) as element(html) {
  let $opts := if($opts = 'x') then $opts else ''
  return html:wrap(map { 'header': ($dba:CAT, $name), 'error': $error },
    &lt;tr&gt;
      &lt;td&gt;
        &lt;form action='db-put' method='post' enctype='multipart/form-data' autocomplete='off'&gt;
          &lt;h2&gt;{
            html:link('Databases', $dba:CAT), ' » ',
            html:link($name, $dba:SUB, map { 'name': $name }), ' » ',
            html:button('db-put', 'Put')
          }&lt;/h2&gt;
          &lt;!-- dummy value; prevents reset of options when nothing is selected --&gt;
          &lt;input type='hidden' name='opts' value='x'/&gt;
          &lt;input type='hidden' name='name' value='{ $name }'/&gt;
          &lt;table&gt;
            &lt;tr&gt;
              &lt;td&gt;Input:&lt;/td&gt;
              &lt;td&gt;{
                &lt;input type='file' name='file' id='file'/&gt;
              }&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;Database Path:&lt;/td&gt;
              &lt;td&gt;
                &lt;input type='text' name='path' value='{ $path }'/&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;Binary Storage:&lt;/td&gt;
              &lt;td&gt;{ html:checkbox('binary', 'true', $binary = 'true', '') }&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td colspan='2'&gt;{
                &lt;h3&gt;Parsing Options&lt;/h3&gt;,
                html:option('intparse', 'Use internal XML parser', $opts),
                html:option('dtd', 'Parse DTDs and entities', $opts),
                html:option('stripns', 'Strip namespaces', $opts),
                html:option('stripws', 'Strip whitespaces', $opts),
                html:option('xinclude', 'Use XInclude', $opts)
              }&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;
        &lt;/form&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  )
};

(:~
 : Puts a resource.
 : @param  $name    database
 : @param  $opts    chosen parsing options
 : @param  $path    database path
 : @param  $file    uploaded file
 : @param  $binary  store as binary file
 : @return redirection
 :)
declare
  %updating
  %rest:POST
  %rest:path('/dba/db-put')
  %rest:form-param('name',   '{$name}')
  %rest:form-param('opts',   '{$opts}')
  %rest:form-param('path',   '{$path}')
  %rest:form-param('file',   '{$file}')
  %rest:form-param('binary', '{$binary}')
function dba:db-put-post(
  $name    as xs:string,
  $opts    as xs:string*,
  $path    as xs:string,
  $file    as map(*),
  $binary  as xs:string?
) as empty-sequence() {
  try {
    let $key := map:keys($file)
    let $path := if(not($path) or ends-with($path, '/')) then ($path || $key) else $path
    return if($key = '') then (
      error((), 'No input specified.')
    ) else (
      let $input := $file($key)
      return if($binary) then (
        db:put-binary($name, $input, $path)
      ) else (
        db:put($name, fetch:binary-doc($input), $path, map:merge(
          ('intparse', 'dtd', 'stripns', 'stripws', 'xinclude') ! map:entry(., $opts = .))
        )
      ),
      util:redirect($dba:SUB,
        map { 'name': $name, 'path': $path, 'info': 'Resource was put.' }
      )
    )
  } catch * {
    util:redirect('db-put', map {
      'name': $name, 'opts': $opts, 'path': $path, 'binary': $binary, 'error': $err:description
    })
  }
};
</xqdoc:body></xqdoc:module><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>dba/html</xqdoc:uri><xqdoc:at>../../lib/html.xqm</xqdoc:at></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>dba/util</xqdoc:uri><xqdoc:at>../../lib/util.xqm</xqdoc:at></xqdoc:import></xqdoc:imports><xqdoc:namespaces><xqdoc:namespace prefix="dba" uri="dba/databases"/><xqdoc:namespace prefix="html" uri="dba/html"/><xqdoc:namespace prefix="util" uri="dba/util"/><xqdoc:namespace prefix="rest" uri="http://exquery.org/ns/restxq"/><xqdoc:namespace prefix="output" uri="http://www.w3.org/2010/xslt-xquery-serialization"/><xqdoc:namespace prefix="xs" uri="http://www.w3.org/2001/XMLSchema"/><xqdoc:namespace prefix="map" uri="http://www.w3.org/2005/xpath-functions/map"/><xqdoc:namespace prefix="db" uri="http://basex.org/modules/db"/><xqdoc:namespace prefix="fetch" uri="http://basex.org/modules/fetch"/><xqdoc:namespace prefix="err" uri="http://www.w3.org/2005/xqt-errors"/></xqdoc:namespaces><xqdoc:variables><xqdoc:variable><xqdoc:name>dba:CAT</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
Top category</xqdoc:description></xqdoc:comment><xqdoc:body>variable $dba:CAT := 'databases'</xqdoc:body></xqdoc:variable><xqdoc:variable><xqdoc:name>dba:SUB</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
Sub category</xqdoc:description></xqdoc:comment><xqdoc:body>variable $dba:SUB := 'database'</xqdoc:body></xqdoc:variable></xqdoc:variables><xqdoc:functions><xqdoc:function arity="5"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Form for putting a new resource.&#xD;
</xqdoc:description><xqdoc:param>$name    entered name</xqdoc:param><xqdoc:param>$opts    chosen parsing options</xqdoc:param><xqdoc:param>$path    database path</xqdoc:param><xqdoc:param>$binary  store as binary</xqdoc:param><xqdoc:param>$error   error string</xqdoc:param><xqdoc:return>page</xqdoc:return></xqdoc:comment><xqdoc:name>dba:db-put</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:GET"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/dba/db-put</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">name</xqdoc:literal><xqdoc:literal type="xs:string">{$name}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">opts</xqdoc:literal><xqdoc:literal type="xs:string">{$opts}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">path</xqdoc:literal><xqdoc:literal type="xs:string">{$path}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">binary</xqdoc:literal><xqdoc:literal type="xs:string">{$binary}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">error</xqdoc:literal><xqdoc:literal type="xs:string">{$error}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="output:method"><xqdoc:literal type="xs:string">html</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>function dba:db-put ( $name as xs:string, $opts as xs:string*, $path as xs:string?, $binary as xs:string?, $error as xs:string? ) as element(html) { let $opts := if($opts = 'x') then $opts else '' return html:wrap(map { 'header': ($dba:CAT, $name), 'error': $error }, &lt;tr&gt; &lt;td&gt; &lt;form action='db-put' method='post' enctype='multipart/form-data' autocomplete='off'&gt; &lt;h2&gt;{ html:link('Databases', $dba:CAT), ' » ', html:link($name, $dba:SUB, map { 'name': $name }), ' » ', html:button('db-put', 'Put') }&lt;/h2&gt; &lt;!-- dummy value; prevents reset of options when nothing is selected --&gt; &lt;input type='hidden' name='opts' value='x'/&gt; &lt;input type='hidden' name='name' value='{ $name }'/&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;Input:&lt;/td&gt; &lt;td&gt;{ &lt;input type='file' name='file' id='file'/&gt; }&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Database Path:&lt;/td&gt; &lt;td&gt; &lt;input type='text' name='path' value='{ $path }'/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Binary Storage:&lt;/td&gt; &lt;td&gt;{ html:checkbox('binary', 'true', $binary = 'true', '') }&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan='2'&gt;{ &lt;h3&gt;Parsing Options&lt;/h3&gt;, html:option('intparse', 'Use internal XML parser', $opts), html:option('dtd', 'Parse DTDs and entities', $opts), html:option('stripns', 'Strip namespaces', $opts), html:option('stripws', 'Strip whitespaces', $opts), html:option('xinclude', 'Use XInclude', $opts) }&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;/td&gt; &lt;/tr&gt; ) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>path</xqdoc:name><xqdoc:type occurrence="?">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>binary</xqdoc:name><xqdoc:type occurrence="?">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>error</xqdoc:name><xqdoc:type occurrence="?">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(html)</xqdoc:type></xqdoc:return><xqdoc:body>function dba:db-put(
  $name    as xs:string,
  $opts    as xs:string*,
  $path    as xs:string?,
  $binary  as xs:string?,
  $error   as xs:string?
) as element(html) {
  let $opts := if($opts = 'x') then $opts else ''
  return html:wrap(map { 'header': ($dba:CAT, $name), 'error': $error },
    &lt;tr&gt;
      &lt;td&gt;
        &lt;form action='db-put' method='post' enctype='multipart/form-data' autocomplete='off'&gt;
          &lt;h2&gt;{
            html:link('Databases', $dba:CAT), ' » ',
            html:link($name, $dba:SUB, map { 'name': $name }), ' » ',
            html:button('db-put', 'Put')
          }&lt;/h2&gt;
          &lt;!-- dummy value; prevents reset of options when nothing is selected --&gt;
          &lt;input type='hidden' name='opts' value='x'/&gt;
          &lt;input type='hidden' name='name' value='{ $name }'/&gt;
          &lt;table&gt;
            &lt;tr&gt;
              &lt;td&gt;Input:&lt;/td&gt;
              &lt;td&gt;{
                &lt;input type='file' name='file' id='file'/&gt;
              }&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;Database Path:&lt;/td&gt;
              &lt;td&gt;
                &lt;input type='text' name='path' value='{ $path }'/&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;Binary Storage:&lt;/td&gt;
              &lt;td&gt;{ html:checkbox('binary', 'true', $binary = 'true', '') }&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td colspan='2'&gt;{
                &lt;h3&gt;Parsing Options&lt;/h3&gt;,
                html:option('intparse', 'Use internal XML parser', $opts),
                html:option('dtd', 'Parse DTDs and entities', $opts),
                html:option('stripns', 'Strip namespaces', $opts),
                html:option('stripws', 'Strip whitespaces', $opts),
                html:option('xinclude', 'Use XInclude', $opts)
              }&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;
        &lt;/form&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  )
}</xqdoc:body></xqdoc:function><xqdoc:function arity="5"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Puts a resource.&#xD;
</xqdoc:description><xqdoc:param>$name    database</xqdoc:param><xqdoc:param>$opts    chosen parsing options</xqdoc:param><xqdoc:param>$path    database path</xqdoc:param><xqdoc:param>$file    uploaded file</xqdoc:param><xqdoc:param>$binary  store as binary file</xqdoc:param><xqdoc:return>redirection</xqdoc:return></xqdoc:comment><xqdoc:name>dba:db-put-post</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="updating"/><xqdoc:annotation name="rest:POST"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/dba/db-put</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:form-param"><xqdoc:literal type="xs:string">name</xqdoc:literal><xqdoc:literal type="xs:string">{$name}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:form-param"><xqdoc:literal type="xs:string">opts</xqdoc:literal><xqdoc:literal type="xs:string">{$opts}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:form-param"><xqdoc:literal type="xs:string">path</xqdoc:literal><xqdoc:literal type="xs:string">{$path}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:form-param"><xqdoc:literal type="xs:string">file</xqdoc:literal><xqdoc:literal type="xs:string">{$file}</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:form-param"><xqdoc:literal type="xs:string">binary</xqdoc:literal><xqdoc:literal type="xs:string">{$binary}</xqdoc:literal></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>function dba:db-put-post ( $name as xs:string, $opts as xs:string*, $path as xs:string, $file as map(*), $binary as xs:string? ) as empty-sequence() { try { let $key := map:keys($file) let $path := if(not($path) or ends-with($path, '/')) then ($path || $key) else $path return if($key = '') then ( error((), 'No input specified.') ) else ( let $input := $file($key) return if($binary) then ( db:put-binary($name, $input, $path) ) else ( db:put($name, fetch:binary-doc($input), $path, map:merge( ('intparse', 'dtd', 'stripns', 'stripws', 'xinclude') ! map:entry(., $opts = .)) ) ), util:redirect($dba:SUB, map { 'name': $name, 'path': $path, 'info': 'Resource was put.' } ) ) } catch * { util:redirect('db-put', map { 'name': $name, 'opts': $opts, 'path': $path, 'binary': $binary, 'error': $err:description }) } }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>opts</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>path</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>file</xqdoc:name><xqdoc:type>map(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>binary</xqdoc:name><xqdoc:type occurrence="?">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>empty-sequence</xqdoc:type></xqdoc:return><xqdoc:body>function dba:db-put-post(
  $name    as xs:string,
  $opts    as xs:string*,
  $path    as xs:string,
  $file    as map(*),
  $binary  as xs:string?
) as empty-sequence() {
  try {
    let $key := map:keys($file)
    let $path := if(not($path) or ends-with($path, '/')) then ($path || $key) else $path
    return if($key = '') then (
      error((), 'No input specified.')
    ) else (
      let $input := $file($key)
      return if($binary) then (
        db:put-binary($name, $input, $path)
      ) else (
        db:put($name, fetch:binary-doc($input), $path, map:merge(
          ('intparse', 'dtd', 'stripns', 'stripws', 'xinclude') ! map:entry(., $opts = .))
        )
      ),
      util:redirect($dba:SUB,
        map { 'name': $name, 'path': $path, 'info': 'Resource was put.' }
      )
    )
  } catch * {
    util:redirect('db-put', map {
      'name': $name, 'opts': $opts, 'path': $path, 'binary': $binary, 'error': $err:description
    })
  }
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>