<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2025-05-17T18:53:12.962+01:00</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>dba/jobs</xqdoc:uri><xqdoc:name>dba</xqdoc:name><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Downloads a job result.&#xD;
&#xD;
</xqdoc:description><xqdoc:author>Christian Grün, BaseX Team 2005-23, BSD License</xqdoc:author></xqdoc:comment><xqdoc:body>(:~
 : Downloads a job result.
 :
 : @author Christian Grün, BaseX Team 2005-23, BSD License
 :)
module namespace dba = 'dba/jobs';

(:~ Top category :)
declare variable $dba:CAT := 'jobs';

(:~
 : Downloads the result of a job.
 : @param  $id  job id
 : @return rest response and file content
 :)
declare
  %rest:GET
  %rest:path('/dba/job-result')
  %rest:query-param('id', '{$id}', '')
function dba:job-result(
  $id  as xs:string
) as item()+ {
  let $details := job:list-details($id)
  return if(empty($details)) then (
    dba:job-result($id, false(), 'Job has expired.')
  ) else if($details/@state != 'cached') then (
    dba:job-result($id, false(), 'Result is not available yet.')
  ) else (
    try {
      dba:job-result($id, true(), job:result($id))
    } catch * {
      dba:job-result($id, false(),
        'Stopped at ' || $err:module || ', ' || $err:line-number || '/' ||
          $err:column-number || ':' || string:nl() || $err:description
      )
    }
  )
};

(:~
 : Returns a job result.
 : @param $id      job id
 : @param $ok      ok flag
 : @param $result  job result
 : @return rest response and file content
 :)
declare %private function dba:job-result(
  $id      as xs:string,
  $ok      as xs:boolean,
  $result  as item()*
) as item()+ {
  let $name := $id || (if($ok) then '.txt' else '.log')
  return web:response-header(
    map { 'media-type': 'application/octet-stream' },
    map { 'Content-Disposition': 'attachment; filename=' || $name }
  ),
  $result
};
</xqdoc:body></xqdoc:module><xqdoc:namespaces><xqdoc:namespace prefix="dba" uri="dba/jobs"/><xqdoc:namespace prefix="rest" uri="http://exquery.org/ns/restxq"/><xqdoc:namespace prefix="xs" uri="http://www.w3.org/2001/XMLSchema"/><xqdoc:namespace prefix="err" uri="http://www.w3.org/2005/xqt-errors"/><xqdoc:namespace prefix="web" uri="http://basex.org/modules/web"/></xqdoc:namespaces><xqdoc:variables><xqdoc:variable><xqdoc:name>dba:CAT</xqdoc:name><xqdoc:body>variable $dba:CAT := 'jobs'</xqdoc:body></xqdoc:variable></xqdoc:variables><xqdoc:functions><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Downloads the result of a job.&#xD;
</xqdoc:description><xqdoc:param>$id  job id</xqdoc:param><xqdoc:return>rest response and file content</xqdoc:return></xqdoc:comment><xqdoc:name>dba:job-result</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="rest:GET"/><xqdoc:annotation name="rest:path"><xqdoc:literal type="xs:string">/dba/job-result</xqdoc:literal></xqdoc:annotation><xqdoc:annotation name="rest:query-param"><xqdoc:literal type="xs:string">id</xqdoc:literal><xqdoc:literal type="xs:string">{$id}</xqdoc:literal><xqdoc:literal type="xs:string"/></xqdoc:annotation></xqdoc:annotations><xqdoc:signature>function dba:job-result ( $id as xs:string ) as item()+ { let $details := job:list-details($id) return if(empty($details)) then ( dba:job-result($id, false(), 'Job has expired.') ) else if($details/@state != 'cached') then ( dba:job-result($id, false(), 'Result is not available yet.') ) else ( try { dba:job-result($id, true(), job:result($id)) } catch * { dba:job-result($id, false(), 'Stopped at ' || $err:module || ', ' || $err:line-number || '/' || $err:column-number || ':' || string:nl() || $err:description ) } ) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>id</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="+">item()</xqdoc:type></xqdoc:return><xqdoc:body>function dba:job-result(
  $id  as xs:string
) as item()+ {
  let $details := job:list-details($id)
  return if(empty($details)) then (
    dba:job-result($id, false(), 'Job has expired.')
  ) else if($details/@state != 'cached') then (
    dba:job-result($id, false(), 'Result is not available yet.')
  ) else (
    try {
      dba:job-result($id, true(), job:result($id))
    } catch * {
      dba:job-result($id, false(),
        'Stopped at ' || $err:module || ', ' || $err:line-number || '/' ||
          $err:column-number || ':' || string:nl() || $err:description
      )
    }
  )
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description>&#xD;
&#xD;
Returns a job result.&#xD;
</xqdoc:description><xqdoc:param>$id      job id</xqdoc:param><xqdoc:param>$ok      ok flag</xqdoc:param><xqdoc:param>$result  job result</xqdoc:param><xqdoc:return>rest response and file content</xqdoc:return></xqdoc:comment><xqdoc:name>dba:job-result</xqdoc:name><xqdoc:annotations><xqdoc:annotation name="private"/></xqdoc:annotations><xqdoc:signature>function dba:job-result ( $id as xs:string, $ok as xs:boolean, $result as item()* ) as item()+ { let $name := $id || (if($ok) then '.txt' else '.log') return web:response-header( map { 'media-type': 'application/octet-stream' }, map { 'Content-Disposition': 'attachment; filename=' || $name } ), $result }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>id</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>ok</xqdoc:name><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>result</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="+">item()</xqdoc:type></xqdoc:return><xqdoc:body>function dba:job-result(
  $id      as xs:string,
  $ok      as xs:boolean,
  $result  as item()*
) as item()+ {
  let $name := $id || (if($ok) then '.txt' else '.log')
  return web:response-header(
    map { 'media-type': 'application/octet-stream' },
    map { 'Content-Disposition': 'attachment; filename=' || $name }
  ),
  $result
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>