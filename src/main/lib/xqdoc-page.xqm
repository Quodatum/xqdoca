xquery version "3.1";
(:
 : Copyright (c) 2019 Quodatum Ltd
 :
 : Licensed under the Apache License, Version 2.0 (the "License");
 : you may not use this file except in compliance with the License.
 : You may obtain a copy of the License at
 :
 :     http://www.apache.org/licenses/LICENSE-2.0
 :
 : Unless required by applicable law or agreed to in writing, software
 : distributed under the License is distributed on an "AS IS" BASIS,
 : WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 : See the License for the specific language governing permissions and
 : limitations under the License.
 :)
 
 (:~
 : <h1>xqdoc-links.xqm</h1>
 : <p>html utilities</p>
 :
 : @author Andy Bunce
 : @version 0.1
 :)
 

module namespace page = 'quodatum:xqdoca.page';

(:~ link to module :)
declare 
function page:link-module($uri as xs:string,$model as map(*))                       
as element(span)
{
 let $files:=$model?files[?namespace=$uri]
 let $root:="../../"
 return if(empty($files)) then
           <span class="badge badge-warning" title="External file">{ $uri }</span>
        else
           <span>
           <a href="{ $root }{ $files[1]?href }index.html" title="{ $files[1]?path }">{ $files[1]?namespace }</a>
           {for $file at $pos in tail($files)
           return <a  href="{ $root }{ $file?href }index.html" title="{ $file?path }">{1+$pos}</a>
         }</span> 
};

(:~ link to module :)
declare 
function page:link-module($file as map(*))                       
as element(span)
{  
   <span>
    <a href="{ $file?href }index.html" title="{ $file?path }">{ $file?namespace }</a> 
   </span>
};
(:~  connections list :)
declare function page:calls($calls-this as item()*,$this,$called-by-this as item()*)
as element(div)
{
  <div style="display: flex;width:100%; justify-content: space-between;">
    <div style="width:30%;">{ if (count($calls-this)) then
                                 $calls-this!<div >{.}</div>
                              else "(None)"   
                             }</div>
     <div><div>imports</div>&#x2192;</div>
    <div class="badge badge-info">this</div>
     <div><div>imports</div>&#x2192;</div>
    <div style="width:30%;">{ if(count($called-by-this)) then
                                $called-by-this!<div>{.}</div>
                              else
                               ("(None)")
     }</div>
</div> 
};

(:~ 
 : generate standard page wrapper
 : uses $opts?resources
  :)
declare function page:wrap($body,$opts as map(*)) 
as element(html)
{
    <html>
      <head>
       <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
       <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"/> 
       <meta http-equiv="Generator" content="xqdoca - https://github.com/quodatum/xqdoca" />
        <title>
          { $opts?project } - xqDocA
        </title>
        
        <link rel="shortcut icon" type="image/x-icon" href="{ $opts?resources }xqdoc.png" />
        <link rel="stylesheet" type="text/css" href="{ $opts?resources }prism.css"/>
        <link rel="stylesheet" type="text/css" href="{ $opts?resources }page.css" />
        <link rel="stylesheet" type="text/css" href="{ $opts?resources }query.css" />
        <link rel="stylesheet" type="text/css" href="{ $opts?resources }base.css" />
     
      
      </head>

      <body class="home" id="top">
        <div id="main" >
        {$body}
        </div>
        <div class="footer">
            <p style="text-align:right">Generated by 
            <a href="https://github.com/Quodatum/xqdoca" target="_blank">xqDocA</a> 
            at {current-dateTime()}</p>
          </div>
         <script  src="{ $opts?resources }prism.js" type="text/javascript"> </script>
       
      </body>
    </html>
};

(:~ 
 : build toc 
 : @param $name title
 : @param $toc xml 
 :)
declare function page:toc2($name as xs:string,$toc as element(toc))
as element(nav)
{
    <nav id="toc">
            <h2>
                <a id="contents"></a>
                <span >
                   { $name }
                </span>
            </h2>
            <ol class="toc">{
              for $item at $pos in $toc/item
              return
                  <li>
                      <a href="{ $item/@href }">
                          <span class="secno">{ $pos }</span>
                          <span class="content">{ $item/node() }</span>
                      </a>
                  </li>   
          }</ol>
        </nav> 
};


(:~  section numbering util :)
declare function page:section($pos as xs:anyAtomicType*)
as xs:string{
  string-join($pos,".") || "&#160;"
};

(:~ tree to list :)
declare function page:tree-list($tree as element(*),$seq as xs:integer*){
  typeswitch ($tree )
  case element(directory) 
      return <li>
                 <span class="secno">{string-join($seq,'.')}</span>
                 <span class="content">{$tree/@name/string()}/</span>
                 <ol class="toc">{$tree/*!page:tree-list(.,($seq,position()))}</ol>
             </li>
   case element(file) 
      return <li>{if($tree/@target) then
                   <a href="#{$tree/@target}">
                     <span class="secno">{string-join($seq,'.')}</span>
                     
                      <span class="content" title="{$tree/@target}">{  $tree/@name/string() }</span>
                      <div class="badge badge-success" 
                            title="RESTXQ: {$tree/@target}">GET
                      </div>
                      <div class="badge badge-danger"  style="float:right"
                            title="RESTXQ: {$tree/@target}">X
                      </div>
                   </a>
               else 
                <span class="content">{$tree/@name/string()}</span>
             }</li>   
  default 
     return <li>unknown</li>
};



(:~ views list with links
 : @todo only show in referenced in $opts
 :)
declare 
function page:view-list($renderers as map(*)*,$exclude as xs:string*)                       
as element(table)
{
 <table class="data">
 <thead>
 <th>View</th>
 <th>Description</th>
 </thead>
 <tbody>
 {
  for  $def in $renderers
  where not($def?name = $exclude)
  return <tr><td><a href="{ $def?uri }">{ $def?name }</a></td>
             <td>{ $def?description }</td>
         </tr>
  }    
 </tbody>
</table>
};
